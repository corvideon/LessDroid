android.support.v4.app.ActivityCompatHoneycomb -> a:
    android.support.v4.app.ActivityCompatHoneycomb next$fe619d5 -> a
    android.support.v4.app.ActivityCompatHoneycomb prev$fe619d5 -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
    boolean getResources_getBoolean(android.content.Context,int) -> a
    int getResources_getInteger(android.content.Context,int) -> b
    void openApp(android.content.Context,com.corvideon.lessdroidbasic.AppInfo,java.lang.String) -> a
    void alternateOpenApp(android.content.Context,com.corvideon.lessdroidbasic.AppInfo,java.lang.String) -> b
    boolean isValidAppInfo(com.corvideon.lessdroidbasic.AppInfo) -> a
    com.google.inject.internal.Initializable of(java.lang.Object) -> a
    boolean allowsNull(java.lang.annotation.Annotation[]) -> a
    java.lang.String toString(java.lang.reflect.Member) -> a
    java.lang.Class memberType(java.lang.reflect.Member) -> b
    int smear(int) -> a
    int chooseTableSize(int) -> b
    java.lang.Object getOnlyElement(java.lang.Iterable) -> a
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable) -> a
    java.util.ArrayList newArrayList(java.lang.Iterable) -> b
    java.util.ArrayList newArrayList(java.util.Iterator) -> a
    java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> a
    java.lang.Object[] newArray(java.lang.Object[],int) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> b
    void checkArgument(boolean) -> a
    void checkArgument(boolean,java.lang.Object) -> a
    void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> a
    void checkState(boolean,java.lang.Object) -> b
    java.lang.Object checkNotNull(java.lang.Object) -> b
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> c
    void checkElementIndex(int,int) -> a
    void checkPositionIndex(int,int) -> b
    void checkPositionIndex(int,int,java.lang.String) -> a
    void checkPositionIndexes(int,int,int) -> a
    java.lang.String format(java.lang.String,java.lang.Object[]) -> a
    java.lang.Object forMember(java.lang.reflect.Member) -> c
    com.google.inject.name.Named named(java.lang.String) -> a
    com.google.inject.Provider of(java.lang.Object) -> c
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> a
    java.lang.String toSQLName(java.lang.String) -> b
    java.lang.String makeDescriptor(java.lang.reflect.Method) -> a
    void makeDesc(java.lang.StringBuffer,java.lang.Class) -> a
    boolean notNullable(java.lang.reflect.Field) -> a
    java.lang.String join(java.lang.String,java.util.Collection) -> a
    java.lang.String join(java.lang.String,java.lang.Object[]) -> b
    int copy(java.io.Reader,java.io.Writer) -> a
    long copyLarge(java.io.Reader,java.io.Writer) -> b
    java.lang.String toString(java.lang.Object) -> d
    boolean notEmpty(java.lang.Object) -> e
android.support.v4.app.BackStackRecord -> b:
    android.support.v4.app.FragmentManagerImpl mManager -> l
    android.support.v4.app.ActivityCompatHoneycomb mHead$fe619d5 -> a
    android.support.v4.app.ActivityCompatHoneycomb mTail$fe619d5 -> m
    int mNumOp -> b
    int mTransition -> c
    int mTransitionStyle -> d
    boolean mAddToBackStack -> e
    java.lang.String mName -> f
    boolean mCommitted -> n
    int mIndex -> g
    int mBreadCrumbTitleRes -> h
    java.lang.CharSequence mBreadCrumbTitleText -> i
    int mBreadCrumbShortTitleRes -> j
    java.lang.CharSequence mBreadCrumbShortTitleText -> k
    void dump$ec96877(java.lang.String,java.io.PrintWriter) -> a
    void addOp$568ae146(android.support.v4.app.ActivityCompatHoneycomb) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> a
    void bumpBackStackNesting(int) -> a
    int commit() -> b
    void run() -> run
    void popFromBackStack(boolean) -> a
    boolean isEmpty() -> c
android.support.v4.app.BackStackState -> c:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> d:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> e:
    java.util.HashMap sClassMap -> J
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> K
    android.os.Bundle mArguments -> g
    android.support.v4.app.Fragment mTarget -> h
    int mTargetIndex -> i
    int mTargetRequestCode -> j
    boolean mAdded -> k
    boolean mRemoving -> l
    boolean mResumed -> m
    boolean mFromLayout -> n
    boolean mInLayout -> o
    boolean mRestored -> p
    int mBackStackNesting -> q
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> r
    android.support.v4.app.FragmentActivity mActivity -> s
    int mFragmentId -> t
    int mContainerId -> u
    java.lang.String mTag -> v
    boolean mHidden -> w
    boolean mDetached -> x
    boolean mRetainInstance -> y
    boolean mRetaining -> z
    boolean mMenuVisible -> A
    boolean mCalled -> B
    int mNextAnim -> C
    android.view.ViewGroup mContainer -> D
    android.view.View mView -> E
    android.view.View mInnerView -> F
    boolean mDeferStart -> G
    boolean mUserVisibleHint -> H
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> I
    boolean mLoadersStarted -> L
    boolean mCheckedForLoaderManager -> M
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState() -> a
    void setIndex(int) -> a
    boolean isInBackStack() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.content.res.Resources getResources() -> c
    void onHiddenChanged$1385ff() -> d
    void onActivityResult$6eb84b52() -> e
    android.view.LayoutInflater getLayoutInflater$2ee30c11() -> f
    void onInflate$423a76cd() -> g
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation$24236ca7() -> h
    void onCreate(android.os.Bundle) -> a
    android.view.View onCreateView$469ccb8a() -> i
    void onViewCreated$65f1d89() -> j
    void onActivityCreated$79e5e33f() -> k
    void onResume() -> l
    void onSaveInstanceState$79e5e33f() -> m
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> n
    void onLowMemory() -> onLowMemory
    void onDestroy() -> o
    void initState() -> p
    void onDetach() -> q
    void onDestroyOptionsMenu() -> r
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected$1b88ab4c() -> s
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void performStart() -> t
    void performStop() -> u
    void performReallyStop() -> v
    void performDestroyView() -> w
android.support.v4.app.Fragment$InstantiationException -> f:
android.support.v4.app.FragmentActivity -> android.support.v4.app.FragmentActivity:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    boolean mCreated -> e
    boolean mResumed -> f
    boolean mStopped -> c
    boolean mReallyStopped -> g
    boolean mRetaining -> d
    boolean mOptionsMenuInvalidated -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    android.support.v4.app.HCSparseArray mAllLoaderManagers -> k
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> l
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    void supportInvalidateOptionsMenu() -> b_
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void doReallyStop(boolean) -> a
    void onAttachFragment$65850823() -> b
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> c
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragmentIndex(int) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> g:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$FragmentTag -> h:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> i:
    java.util.ArrayList fragments -> a
    android.support.v4.app.HCSparseArray loaders -> b
android.support.v4.app.FragmentManager -> j:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> k:
    boolean onNavigationItemSelected$255f65a() -> a
    boolean onClose() -> b
    boolean onQueryTextSubmit$552c4dfd() -> c
    boolean onSuggestionSelect$134632() -> d
    boolean onSuggestionClick$134632() -> e
android.support.v4.app.FragmentManagerImpl -> l:
    boolean DEBUG -> a
    boolean HONEYCOMB -> f
    java.util.ArrayList mPendingActions -> g
    java.lang.Runnable[] mTmpActions -> h
    boolean mExecutingActions -> i
    java.util.ArrayList mActive -> b
    java.util.ArrayList mAdded -> c
    java.util.ArrayList mAvailIndices -> j
    java.util.ArrayList mBackStack -> k
    java.util.ArrayList mCreatedMenus -> l
    java.util.ArrayList mBackStackIndices -> m
    java.util.ArrayList mAvailBackStackIndices -> n
    int mCurState -> d
    android.support.v4.app.FragmentActivity mActivity -> o
    boolean mNeedMenuInvalidate -> p
    boolean mStateSaved -> q
    boolean mDestroyed -> r
    java.lang.String mNoTransactionsBecause -> e
    boolean mHavePendingDeferredStart -> s
    android.os.Bundle mStateBundle -> t
    android.util.SparseArray mStateArray -> u
    java.lang.Runnable mExecCommit -> v
    android.view.animation.Interpolator DECELERATE_QUINT -> w
    android.view.animation.Interpolator DECELERATE_CUBIC -> x
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean popBackStackImmediate() -> b
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation$376f30fd(float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation$424ea1bd(float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int) -> a
    void moveToState(android.support.v4.app.Fragment) -> a
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> p
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> q
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> c
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    java.util.ArrayList retainNonConfig() -> d
    void saveFragmentViewState(android.support.v4.app.Fragment) -> b
    android.os.Parcelable saveAllState() -> e
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity) -> a
    void noteStateNotSaved() -> f
    void dispatchCreate() -> g
    void dispatchActivityCreated() -> h
    void dispatchStart() -> i
    void dispatchResume() -> j
    void dispatchPause() -> k
    void dispatchStop() -> l
    void dispatchReallyStop() -> m
    void dispatchDestroy() -> n
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> o
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
android.support.v4.app.FragmentManagerImpl$1 -> m:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> n:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> o:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> p:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> q:
    java.lang.String mClassName -> c
    int mIndex -> d
    boolean mFromLayout -> e
    int mFragmentId -> f
    int mContainerId -> g
    java.lang.String mTag -> h
    boolean mRetainInstance -> i
    boolean mDetached -> j
    android.os.Bundle mArguments -> k
    android.os.Bundle mSavedFragmentState -> a
    android.support.v4.app.Fragment mInstance -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> r:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTransaction -> s:
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> a
    boolean isEmpty() -> c
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> a
    int commit() -> b
android.support.v4.app.HCSparseArray -> t:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    void remove(int) -> b
    void removeAt(int) -> c
    void gc() -> c
    int size() -> a
    int keyAt(int) -> d
    java.lang.Object valueAt(int) -> e
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealIntArraySize(int) -> f
android.support.v4.app.LoaderManager -> u:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl -> v:
    boolean DEBUG -> a
    android.support.v4.app.HCSparseArray mLoaders -> d
    android.support.v4.app.HCSparseArray mInactiveLoaders -> e
    android.support.v4.app.FragmentActivity mActivity -> b
    boolean mStarted -> f
    boolean mRetaining -> c
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> w:
    int mId -> a
    android.os.Bundle mArgs -> j
    android.support.v4.app.FragmentManager$OnBackStackChangedListener mCallbacks$641e715d -> b
    android.support.v4.content.Loader mLoader -> c
    boolean mHaveData -> k
    boolean mDeliveredData -> d
    java.lang.Object mData -> l
    boolean mStarted -> e
    boolean mRetaining -> f
    boolean mRetainingStarted -> g
    boolean mReportNextStart -> h
    boolean mDestroyed -> m
    boolean mListenerRegistered -> i
    void stop() -> a
    void destroy() -> b
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> x:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> y:
android.support.v4.app.Watson -> android.support.v4.app.Watson:
    java.util.ArrayList mCreatedMenus -> e
    boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu) -> a
    boolean onPreparePanel$5631e5b5(int,com.actionbarsherlock.view.Menu) -> b
    boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem) -> a
    boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu) -> a
    boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem) -> a
    com.actionbarsherlock.view.MenuInflater getSupportMenuInflater() -> d
android.support.v4.content.Loader -> z:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    java.lang.String toString() -> toString
android.support.v4.content.Loader$OnLoadCompleteListener -> A:
android.support.v4.os.ParcelableCompat$CompatCreator -> B:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> C:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> D:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.util.LogWriter -> E:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.view.KeyEventCompat -> F:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> G:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> b
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> H:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> I:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> J:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> K:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> L:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> M:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> N:
    com.actionbarsherlock.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener -> a
    int getCount() -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    boolean isViewFromObject$171eb1dd() -> b
    android.view.View onCreateActionView() -> c
    void setSubUiVisibilityListener(com.actionbarsherlock.view.ActionProvider$SubUiVisibilityListener) -> a
android.support.v4.view.PagerTitleStrip -> android.support.v4.view.PagerTitleStrip:
    android.support.v4.view.ViewPager mPager -> a
    android.widget.TextView mPrevText -> b
    android.widget.TextView mCurrText -> c
    android.widget.TextView mNextText -> d
    int mLastKnownCurrentPage -> e
    float mLastKnownPositionOffset -> f
    int mScaledTextSpacing -> g
    boolean mUpdatingText -> h
    boolean mUpdatingPositions -> i
    android.support.v4.view.PagerTitleStrip$PageListener mPageListener -> j
    int[] ATTRS -> k
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void updateText(int,android.support.v4.view.PagerAdapter) -> a
    void requestLayout() -> requestLayout
    void updateAdapter(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
    void updateTextPositions(int,float) -> a
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
android.support.v4.view.PagerTitleStrip$PageListener -> O:
    int mScrollState -> a
    android.support.v4.view.PagerTitleStrip this$0 -> b
    void onPageScrolled$486775f1(int,float) -> a
    void onPageSelected$13462e() -> a
    void onPageScrollStateChanged(int) -> a
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
    void onChanged() -> onChanged
android.support.v4.view.VelocityTrackerCompat -> P:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> Q:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> R:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> S:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> T:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> U:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> V:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$ViewCompatImpl -> W:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> X:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> Y:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> Z:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> aa:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.PagerAdapter mAdapter -> e
    int mCurItem -> f
    int mRestoredCurItem -> g
    android.os.Parcelable mRestoredAdapterState -> h
    java.lang.ClassLoader mRestoredClassLoader -> i
    android.widget.Scroller mScroller -> j
    android.support.v4.view.ViewPager$PagerObserver mObserver -> k
    int mPageMargin -> l
    android.graphics.drawable.Drawable mMarginDrawable -> m
    int mTopPageBounds -> n
    int mBottomPageBounds -> o
    int mChildWidthMeasureSpec -> p
    int mChildHeightMeasureSpec -> q
    boolean mInLayout -> r
    boolean mScrollingCacheEnabled -> s
    boolean mPopulatePending -> t
    boolean mScrolling -> u
    int mOffscreenPageLimit -> v
    boolean mIsBeingDragged -> w
    boolean mIsUnableToDrag -> x
    int mTouchSlop -> y
    float mInitialMotionX -> z
    float mLastMotionX -> A
    float mLastMotionY -> B
    int mActivePointerId -> C
    android.view.VelocityTracker mVelocityTracker -> D
    int mMinimumVelocity -> E
    int mMaximumVelocity -> F
    int mFlingDistance -> G
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> H
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> I
    boolean mFirstLayout -> J
    boolean mCalledSuper -> K
    int mDecorChildCount -> L
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> M
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> N
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> O
    int mScrollState -> P
    void initViewPager() -> e
    void setScrollState(int) -> a
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    android.support.v4.view.PagerAdapter getAdapter() -> a
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> a
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> setCurrentItem
    int getCurrentItem() -> b
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    void addNewItem(int,int) -> a
    void dataSetChanged() -> c
    void populate() -> f
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    void pageScrolled(int) -> b
    void completeScroll() -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> h
    void setScrollingCacheEnabled(boolean) -> a
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean arrowScroll(int) -> c
    boolean pageLeft() -> i
    boolean pageRight() -> j
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$100() -> d
android.support.v4.view.ViewPager$1 -> ab:
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> ac:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> ad:
android.support.v4.view.ViewPager$ItemInfo -> ae:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ViewPager$LayoutParams:
    boolean isDecor -> a
    int gravity -> b
android.support.v4.view.ViewPager$OnAdapterChangeListener -> af:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> ag:
    void onPageScrolled$486775f1(int,float) -> a
    void onPageSelected$13462e() -> a
    void onPageScrollStateChanged(int) -> a
android.support.v4.view.ViewPager$PagerObserver -> ah:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> ai:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> aj:
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.widget.CursorAdapter -> ak:
    boolean mDataValid -> a
    boolean mAutoRequery -> d
    android.database.Cursor mCursor -> b
    android.content.Context mContext -> c
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView$4693bf34(android.view.View,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> b
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    void onContentChanged() -> b
android.support.v4.widget.CursorAdapter$ChangeObserver -> al:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> am:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> an:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> ao:
    java.lang.CharSequence convertToString(android.database.Cursor) -> b
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.EdgeEffectCompat -> ap:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> aq:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> ar:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> as:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> at:
    int mLayout -> d
    int mDropDownLayout -> e
    android.view.LayoutInflater mInflater -> f
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
com.actionbarsherlock.ActionBarSherlock -> au:
    java.lang.Class[] CONSTRUCTOR_ARGS -> c
    java.util.HashMap IMPLEMENTATIONS -> d
    android.app.Activity mActivity -> a
    boolean mIsDelegate -> b
    com.actionbarsherlock.view.MenuInflater mMenuInflater -> e
    void registerImplementation(java.lang.Class) -> a
    com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int) -> a
    com.actionbarsherlock.app.ActionBar getActionBar() -> a
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchPostResume() -> b
    void dispatchPause() -> c
    void dispatchStop() -> d
    void dispatchInvalidateOptionsMenu() -> e
    boolean dispatchOpenOptionsMenu() -> f
    boolean dispatchCloseOptionsMenu() -> g
    void dispatchPostCreate$79e5e33f() -> h
    void dispatchTitleChanged$609be50a(java.lang.CharSequence) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> a
    boolean dispatchCreateOptionsMenu(android.view.Menu) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> b
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchMenuOpened$2fef5512(int) -> a
    void dispatchPanelClosed$2fef5516(int) -> b
    void dispatchDestroy() -> i
    void dispatchSaveInstanceState(android.os.Bundle) -> a
    void dispatchRestoreInstanceState(android.os.Bundle) -> b
    boolean callbackCreateOptionsMenu(com.actionbarsherlock.view.Menu) -> a
    boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu) -> b
    boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem) -> a
    void setContentView(int) -> c
    void setContentView(android.view.View) -> a
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    com.actionbarsherlock.view.MenuInflater getMenuInflater() -> j
    android.content.Context getThemedContext() -> k
com.actionbarsherlock.ActionBarSherlock$Implementation -> av:
    int api() -> a
    int dpi() -> b
com.actionbarsherlock.ActionBarSherlock$OnCreateOptionsMenuListener -> aw:
    boolean onCreateOptionsMenu$7c622cda() -> a
com.actionbarsherlock.ActionBarSherlock$OnCreatePanelMenuListener -> ax:
    boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu) -> a
com.actionbarsherlock.ActionBarSherlock$OnMenuItemSelectedListener -> ay:
    boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem) -> a
com.actionbarsherlock.ActionBarSherlock$OnOptionsItemSelectedListener -> az:
    boolean onOptionsItemSelected$58cc55c7() -> a
com.actionbarsherlock.ActionBarSherlock$OnPrepareOptionsMenuListener -> aA:
    boolean onPrepareOptionsMenu$7c622cda() -> a
com.actionbarsherlock.ActionBarSherlock$OnPreparePanelListener -> aB:
    boolean onPreparePanel$5631e5b5(int,com.actionbarsherlock.view.Menu) -> b
com.actionbarsherlock.R$attr -> aC:
    int textAppearanceSmall -> textAppearanceSmall
    int actionModeStyle -> actionModeStyle
    int searchViewCloseIcon -> searchViewCloseIcon
    int activityChooserViewStyle -> activityChooserViewStyle
    int itemIconDisabledAlpha -> itemIconDisabledAlpha
    int headerBackground -> headerBackground
    int dividerVertical -> dividerVertical
    int actionModeCloseDrawable -> actionModeCloseDrawable
    int actionBarDivider -> actionBarDivider
    int searchViewVoiceIcon -> searchViewVoiceIcon
    int actionBarWidgetTheme -> actionBarWidgetTheme
    int spinnerDropDownItemStyle -> spinnerDropDownItemStyle
    int divider -> divider
    int navigationMode -> navigationMode
    int listPopupWindowStyle -> listPopupWindowStyle
    int actionBarItemBackground -> actionBarItemBackground
    int homeLayout -> homeLayout
    int progressBarPadding -> progressBarPadding
    int horizontalDivider -> horizontalDivider
    int listPreferredItemHeightSmall -> listPreferredItemHeightSmall
    int textColorPrimary -> textColorPrimary
    int selectableItemBackground -> selectableItemBackground
    int backgroundSplit -> backgroundSplit
    int actionBarTabBarStyle -> actionBarTabBarStyle
    int textAppearanceSearchResultSubtitle -> textAppearanceSearchResultSubtitle
    int title -> title
    int preserveIconSpacing -> preserveIconSpacing
    int actionBarSize -> actionBarSize
    int textAppearanceListItemSmall -> textAppearanceListItemSmall
    int searchViewEditQuery -> searchViewEditQuery
    int itemPadding -> itemPadding
    int searchViewTextField -> searchViewTextField
    int logo -> logo
    int textColorPrimaryDisableOnly -> textColorPrimaryDisableOnly
    int backgroundStacked -> backgroundStacked
    int searchViewSearchIcon -> searchViewSearchIcon
    int itemTextAppearance -> itemTextAppearance
    int windowActionBar -> windowActionBar
    int windowSplitActionBar -> windowSplitActionBar
    int spinnerItemStyle -> spinnerItemStyle
    int background -> background
    int actionOverflowButtonStyle -> actionOverflowButtonStyle
    int windowMinWidthMajor -> windowMinWidthMajor
    int initialActivityCount -> initialActivityCount
    int listPreferredItemPaddingRight -> listPreferredItemPaddingRight
    int dropDownListViewStyle -> dropDownListViewStyle
    int actionBarTabTextStyle -> actionBarTabTextStyle
    int searchViewEditQueryBackground -> searchViewEditQueryBackground
    int windowMinWidthMinor -> windowMinWidthMinor
    int actionModeBackground -> actionModeBackground
    int searchViewTextFieldRight -> searchViewTextFieldRight
    int height -> height
    int textAppearanceSmallPopupMenu -> textAppearanceSmallPopupMenu
    int textColorSearchUrl -> textColorSearchUrl
    int actionButtonStyle -> actionButtonStyle
    int windowAnimationStyle -> windowAnimationStyle
    int searchAutoCompleteTextView -> searchAutoCompleteTextView
    int actionBarTabStyle -> actionBarTabStyle
    int windowContentOverlay -> windowContentOverlay
    int actionBarStyle -> actionBarStyle
    int windowActionModeOverlay -> windowActionModeOverlay
    int indeterminateProgressStyle -> indeterminateProgressStyle
    int expandActivityOverflowButtonDrawable -> expandActivityOverflowButtonDrawable
    int actionModeShareDrawable -> actionModeShareDrawable
    int activatedBackgroundIndicator -> activatedBackgroundIndicator
    int windowNoTitle -> windowNoTitle
    int actionMenuTextAppearance -> actionMenuTextAppearance
    int textAppearanceLargePopupMenu -> textAppearanceLargePopupMenu
    int textColorPrimaryInverse -> textColorPrimaryInverse
    int verticalDivider -> verticalDivider
    int homeAsUpIndicator -> homeAsUpIndicator
    int actionModePopupWindowStyle -> actionModePopupWindowStyle
    int itemBackground -> itemBackground
    int iconifiedByDefault -> iconifiedByDefault
    int searchResultListItemHeight -> searchResultListItemHeight
    int actionModeCloseButtonStyle -> actionModeCloseButtonStyle
    int actionBarSplitStyle -> actionBarSplitStyle
    int popupMenuStyle -> popupMenuStyle
    int searchViewGoIcon -> searchViewGoIcon
    int actionSpinnerItemStyle -> actionSpinnerItemStyle
    int dropdownListPreferredItemHeight -> dropdownListPreferredItemHeight
    int buttonStyleSmall -> buttonStyleSmall
    int displayOptions -> displayOptions
    int titleTextStyle -> titleTextStyle
    int icon -> icon
    int customNavigationLayout -> customNavigationLayout
    int actionModeSplitBackground -> actionModeSplitBackground
    int queryHint -> queryHint
    int listPreferredItemPaddingLeft -> listPreferredItemPaddingLeft
    int windowActionBarOverlay -> windowActionBarOverlay
    int searchDropdownBackground -> searchDropdownBackground
    int subtitleTextStyle -> subtitleTextStyle
    int progressBarStyle -> progressBarStyle
    int textAppearanceSearchResultTitle -> textAppearanceSearchResultTitle
    int subtitle -> subtitle
    int actionDropDownStyle -> actionDropDownStyle
    int actionMenuTextColor -> actionMenuTextColor
    int abs__config_allowActionMenuItemTextWithIcon -> abs__config_allowActionMenuItemTextWithIcon
    int abs__action_bar_expanded_action_views_exclusive -> abs__action_bar_expanded_action_views_exclusive
    int abs__config_showMenuShortcutsWhenKeyboardPresent -> abs__config_showMenuShortcutsWhenKeyboardPresent
    int abs__action_bar_embed_tabs -> abs__action_bar_embed_tabs
    int abs__split_action_bar_is_narrow -> abs__split_action_bar_is_narrow
    int abs__config_actionMenuItemAllCaps -> abs__config_actionMenuItemAllCaps
    int abs__config_prefDialogWidth -> abs__config_prefDialogWidth
    int abs__action_bar_subtitle_text_size -> abs__action_bar_subtitle_text_size
    int abs__action_bar_icon_vertical_padding -> abs__action_bar_icon_vertical_padding
    int abs__dropdownitem_icon_width -> abs__dropdownitem_icon_width
    int abs__action_bar_subtitle_top_margin -> abs__action_bar_subtitle_top_margin
    int abs__action_button_min_width -> abs__action_button_min_width
    int action_button_min_width -> action_button_min_width
    int abs__action_bar_default_height -> abs__action_bar_default_height
    int abs__dropdownitem_text_padding_left -> abs__dropdownitem_text_padding_left
    int abs__dialog_min_width_minor -> abs__dialog_min_width_minor
    int abs__dropdownitem_text_padding_right -> abs__dropdownitem_text_padding_right
    int abs__dialog_min_width_major -> abs__dialog_min_width_major
    int abs__search_view_text_min_width -> abs__search_view_text_min_width
    int abs__search_view_preferred_width -> abs__search_view_preferred_width
    int abs__action_bar_subtitle_bottom_margin -> abs__action_bar_subtitle_bottom_margin
    int abs__alert_dialog_title_height -> abs__alert_dialog_title_height
    int abs__action_bar_title_text_size -> abs__action_bar_title_text_size
    int abs__action_bar_container -> abs__action_bar_container
    int normal -> normal
    int abs__search_go_btn -> abs__search_go_btn
    int abs__default_activity_button -> abs__default_activity_button
    int homeAsUp -> homeAsUp
    int abs__search_bar -> abs__search_bar
    int abs__action_mode_bar$2f3ad98a -> abs__action_mode_bar$2f3ad98a
    int abs__imageButton -> abs__imageButton
    int edit_query -> edit_query
    int abs__action_bar_subtitle -> abs__action_bar_subtitle
    int abs__activity_chooser_view_content -> abs__activity_chooser_view_content
    int abs__search_voice_btn -> abs__search_voice_btn
    int disableHome -> disableHome
    int showTitle -> showTitle
    int abs__up -> abs__up
    int abs__split_action_bar -> abs__split_action_bar
    int abs__action_context_bar -> abs__action_context_bar
    int abs__list_item -> abs__list_item
    int abs__progress_horizontal -> abs__progress_horizontal
    int showHome -> showHome
    int abs__home -> abs__home
    int abs__search_src_text -> abs__search_src_text
    int abs__search_mag_icon -> abs__search_mag_icon
    int abs__checkbox -> abs__checkbox
    int abs__search_close_btn -> abs__search_close_btn
    int abs__image -> abs__image
    int showCustom -> showCustom
    int abs__action_mode_bar_stub -> abs__action_mode_bar_stub
    int abs__content -> abs__content
    int abs__icon -> abs__icon
    int abs__action_menu_divider -> abs__action_menu_divider
    int abs__search_badge -> abs__search_badge
    int abs__action_bar -> abs__action_bar
    int abs__search_plate -> abs__search_plate
    int abs__action_mode_close_button -> abs__action_mode_close_button
    int wrap_content -> wrap_content
    int listMode -> listMode
    int abs__title -> abs__title
    int abs__progress_circular -> abs__progress_circular
    int useLogo -> useLogo
    int tabMode -> tabMode
    int abs__search_edit_frame -> abs__search_edit_frame
    int abs__radio -> abs__radio
    int abs__action_bar_title -> abs__action_bar_title
    int abs__search_button -> abs__search_button
    int abs__shortcut -> abs__shortcut
    int abs__action_menu_presenter -> abs__action_menu_presenter
    int abs__textButton -> abs__textButton
    int abs__titleDivider -> abs__titleDivider
    int abs__expand_activities_button -> abs__expand_activities_button
    int abs__submit_area -> abs__submit_area
    int abs__max_action_buttons -> abs__max_action_buttons
    int abs__list_menu_item_radio -> abs__list_menu_item_radio
    int abs__action_mode_close_item -> abs__action_mode_close_item
    int abs__activity_chooser_view_list_item -> abs__activity_chooser_view_list_item
    int abs__dialog_title_holo -> abs__dialog_title_holo
    int abs__screen_simple_overlay_action_mode -> abs__screen_simple_overlay_action_mode
    int abs__screen_action_bar -> abs__screen_action_bar
    int abs__action_menu_layout -> abs__action_menu_layout
    int sherlock_spinner_dropdown_item -> sherlock_spinner_dropdown_item
    int abs__search_dropdown_item_icons_2line -> abs__search_dropdown_item_icons_2line
    int abs__screen_action_bar_overlay -> abs__screen_action_bar_overlay
    int abs__action_bar_title_item -> abs__action_bar_title_item
    int abs__simple_dropdown_hint -> abs__simple_dropdown_hint
    int abs__list_menu_item_checkbox -> abs__list_menu_item_checkbox
    int abs__list_menu_item_icon -> abs__list_menu_item_icon
    int abs__action_mode_bar -> abs__action_mode_bar
    int abs__list_menu_item_layout -> abs__list_menu_item_layout
    int sherlock_spinner_item -> sherlock_spinner_item
    int abs__screen_simple -> abs__screen_simple
    int abs__search_view -> abs__search_view
    int abs__activity_chooser_view -> abs__activity_chooser_view
    int abs__popup_menu_item_layout -> abs__popup_menu_item_layout
    int abs__action_bar_home -> abs__action_bar_home
    int abs__action_bar_tab_bar_view -> abs__action_bar_tab_bar_view
    int abs__action_menu_item_layout -> abs__action_menu_item_layout
    int abs__action_bar_tab -> abs__action_bar_tab
    int abs__action_bar_up_description -> abs__action_bar_up_description
    int abs__searchview_description_clear -> abs__searchview_description_clear
    int abs__activity_chooser_view_dialog_title_default -> abs__activity_chooser_view_dialog_title_default
    int abs__action_mode_done -> abs__action_mode_done
    int abs__searchview_description_voice -> abs__searchview_description_voice
    int abs__searchview_description_query -> abs__searchview_description_query
    int abs__shareactionprovider_share_with -> abs__shareactionprovider_share_with
    int abs__action_bar_home_description -> abs__action_bar_home_description
    int abs__searchview_description_search -> abs__searchview_description_search
    int abs__activity_chooser_view_see_all -> abs__activity_chooser_view_see_all
    int abs__activitychooserview_choose_application -> abs__activitychooserview_choose_application
    int abs__share_action_provider_share_with -> abs__share_action_provider_share_with
    int abs__action_menu_overflow_description -> abs__action_menu_overflow_description
    int abs__searchview_description_submit -> abs__searchview_description_submit
    int abs__shareactionprovider_share_with_application -> abs__shareactionprovider_share_with_application
com.actionbarsherlock.R$styleable -> aD:
    int SherlockTheme_textColorPrimaryInverse -> SherlockTheme_textColorPrimaryInverse
    int SherlockActionBar_displayOptions -> SherlockActionBar_displayOptions
    int SherlockTheme_actionMenuTextAppearance -> SherlockTheme_actionMenuTextAppearance
    int SherlockTheme_listPreferredItemPaddingLeft -> SherlockTheme_listPreferredItemPaddingLeft
    int SherlockMenuView_itemBackground -> SherlockMenuView_itemBackground
    int SherlockTheme_actionBarDivider -> SherlockTheme_actionBarDivider
    int SherlockTheme_homeAsUpIndicator -> SherlockTheme_homeAsUpIndicator
    int SherlockView_android_focusable -> SherlockView_android_focusable
    int SherlockMenuItem_android_id -> SherlockMenuItem_android_id
    int[] SherlockTheme -> SherlockTheme
    int[] SherlockMenuGroup -> SherlockMenuGroup
    int SherlockTheme_actionBarSplitStyle -> SherlockTheme_actionBarSplitStyle
    int SherlockTheme_actionModeShareDrawable -> SherlockTheme_actionModeShareDrawable
    int SherlockTheme_activatedBackgroundIndicator -> SherlockTheme_activatedBackgroundIndicator
    int SherlockTheme_searchViewGoIcon -> SherlockTheme_searchViewGoIcon
    int SherlockTheme_searchViewCloseIcon -> SherlockTheme_searchViewCloseIcon
    int SherlockActionBar_subtitle -> SherlockActionBar_subtitle
    int SherlockActionMode_backgroundSplit -> SherlockActionMode_backgroundSplit
    int[] SherlockActionBar -> SherlockActionBar
    int SherlockTheme_buttonStyleSmall -> SherlockTheme_buttonStyleSmall
    int SherlockMenuItem_android_icon -> SherlockMenuItem_android_icon
    int SherlockSearchView_android_maxWidth -> SherlockSearchView_android_maxWidth
    int SherlockMenuItem_android_title -> SherlockMenuItem_android_title
    int SherlockTheme_dropdownListPreferredItemHeight -> SherlockTheme_dropdownListPreferredItemHeight
    int SherlockActivityChooserView_initialActivityCount -> SherlockActivityChooserView_initialActivityCount
    int SherlockActionBar_itemPadding -> SherlockActionBar_itemPadding
    int SherlockTheme_actionBarWidgetTheme -> SherlockTheme_actionBarWidgetTheme
    int[] SherlockSearchView -> SherlockSearchView
    int SherlockSpinner_android_dropDownHorizontalOffset -> SherlockSpinner_android_dropDownHorizontalOffset
    int SherlockMenuGroup_android_orderInCategory -> SherlockMenuGroup_android_orderInCategory
    int SherlockTheme_actionOverflowButtonStyle -> SherlockTheme_actionOverflowButtonStyle
    int SherlockTheme_spinnerDropDownItemStyle -> SherlockTheme_spinnerDropDownItemStyle
    int SherlockTheme_android_windowIsFloating -> SherlockTheme_android_windowIsFloating
    int SherlockActionMode_background -> SherlockActionMode_background
    int SherlockTheme_searchDropdownBackground -> SherlockTheme_searchDropdownBackground
    int SherlockTheme_actionMenuTextColor -> SherlockTheme_actionMenuTextColor
    int SherlockActionBar_progressBarPadding -> SherlockActionBar_progressBarPadding
    int SherlockSearchView_iconifiedByDefault -> SherlockSearchView_iconifiedByDefault
    int SherlockMenuItem_android_titleCondensed -> SherlockMenuItem_android_titleCondensed
    int SherlockActionMode_height -> SherlockActionMode_height
    int SherlockActionMenuItemView_android_minWidth -> SherlockActionMenuItemView_android_minWidth
    int SherlockTheme_actionBarTabStyle -> SherlockTheme_actionBarTabStyle
    int SherlockTheme_actionSpinnerItemStyle -> SherlockTheme_actionSpinnerItemStyle
    int SherlockActivityChooserView_expandActivityOverflowButtonDrawable -> SherlockActivityChooserView_expandActivityOverflowButtonDrawable
    int SherlockActionBar_backgroundSplit -> SherlockActionBar_backgroundSplit
    int SherlockMenuView_headerBackground -> SherlockMenuView_headerBackground
    int SherlockActionBar_subtitleTextStyle -> SherlockActionBar_subtitleTextStyle
    int SherlockTheme_textColorSearchUrl -> SherlockTheme_textColorSearchUrl
    int SherlockActionBar_icon -> SherlockActionBar_icon
    int SherlockTheme_dropDownListViewStyle -> SherlockTheme_dropDownListViewStyle
    int SherlockTheme_searchViewSearchIcon -> SherlockTheme_searchViewSearchIcon
    int SherlockMenuItem_android_alphabeticShortcut -> SherlockMenuItem_android_alphabeticShortcut
    int[] SherlockActionMenuItemView -> SherlockActionMenuItemView
    int SherlockSpinner_android_dropDownWidth -> SherlockSpinner_android_dropDownWidth
    int SherlockActionBar_indeterminateProgressStyle -> SherlockActionBar_indeterminateProgressStyle
    int SherlockTheme_textAppearanceLargePopupMenu -> SherlockTheme_textAppearanceLargePopupMenu
    int SherlockTheme_windowMinWidthMajor -> SherlockTheme_windowMinWidthMajor
    int SherlockMenuItem_android_checked -> SherlockMenuItem_android_checked
    int SherlockActionBar_progressBarStyle -> SherlockActionBar_progressBarStyle
    int SherlockMenuView_horizontalDivider -> SherlockMenuView_horizontalDivider
    int[] SherlockActivityChooserView -> SherlockActivityChooserView
    int[] SherlockMenuItem -> SherlockMenuItem
    int SherlockTheme_actionBarStyle -> SherlockTheme_actionBarStyle
    int SherlockTheme_windowSplitActionBar -> SherlockTheme_windowSplitActionBar
    int SherlockMenuGroup_android_enabled -> SherlockMenuGroup_android_enabled
    int SherlockSpinner_android_gravity -> SherlockSpinner_android_gravity
    int SherlockActionBar_customNavigationLayout -> SherlockActionBar_customNavigationLayout
    int SherlockSpinner_android_prompt -> SherlockSpinner_android_prompt
    int SherlockTheme_actionBarTabBarStyle -> SherlockTheme_actionBarTabBarStyle
    int SherlockActionBar_title -> SherlockActionBar_title
    int SherlockMenuItem_android_menuCategory -> SherlockMenuItem_android_menuCategory
    int SherlockTheme_textAppearanceSearchResultSubtitle -> SherlockTheme_textAppearanceSearchResultSubtitle
    int SherlockActionBar_height -> SherlockActionBar_height
    int SherlockActionBar_navigationMode -> SherlockActionBar_navigationMode
    int SherlockTheme_actionBarTabTextStyle -> SherlockTheme_actionBarTabTextStyle
    int SherlockTheme_windowMinWidthMinor -> SherlockTheme_windowMinWidthMinor
    int SherlockMenuItem_android_actionViewClass -> SherlockMenuItem_android_actionViewClass
    int SherlockMenuView_itemTextAppearance -> SherlockMenuView_itemTextAppearance
    int SherlockTheme_actionModeBackground -> SherlockTheme_actionModeBackground
    int SherlockTheme_selectableItemBackground -> SherlockTheme_selectableItemBackground
    int SherlockTheme_searchViewTextField -> SherlockTheme_searchViewTextField
    int SherlockTheme_actionModeCloseDrawable -> SherlockTheme_actionModeCloseDrawable
    int SherlockMenuItem_android_checkable -> SherlockMenuItem_android_checkable
    int SherlockTheme_searchViewEditQuery -> SherlockTheme_searchViewEditQuery
    int SherlockTheme_windowNoTitle -> SherlockTheme_windowNoTitle
    int SherlockTheme_searchViewEditQueryBackground -> SherlockTheme_searchViewEditQueryBackground
    int SherlockTheme_textAppearanceSmall -> SherlockTheme_textAppearanceSmall
    int SherlockSpinner_android_dropDownVerticalOffset -> SherlockSpinner_android_dropDownVerticalOffset
    int SherlockMenuView_verticalDivider -> SherlockMenuView_verticalDivider
    int SherlockMenuGroup_android_visible -> SherlockMenuGroup_android_visible
    int SherlockActionMode_subtitleTextStyle -> SherlockActionMode_subtitleTextStyle
    int SherlockMenuView_itemIconDisabledAlpha -> SherlockMenuView_itemIconDisabledAlpha
    int SherlockTheme_actionBarItemBackground -> SherlockTheme_actionBarItemBackground
    int SherlockTheme_textColorPrimary -> SherlockTheme_textColorPrimary
    int SherlockTheme_searchViewTextFieldRight -> SherlockTheme_searchViewTextFieldRight
    int SherlockTheme_listPreferredItemHeightSmall -> SherlockTheme_listPreferredItemHeightSmall
    int SherlockTheme_windowContentOverlay -> SherlockTheme_windowContentOverlay
    int SherlockTheme_listPopupWindowStyle -> SherlockTheme_listPopupWindowStyle
    int SherlockMenuGroup_android_menuCategory -> SherlockMenuGroup_android_menuCategory
    int SherlockActionBar_logo -> SherlockActionBar_logo
    int SherlockMenuItem_android_actionProviderClass -> SherlockMenuItem_android_actionProviderClass
    int SherlockTheme_actionBarSize -> SherlockTheme_actionBarSize
    int SherlockActionBar_backgroundStacked -> SherlockActionBar_backgroundStacked
    int SherlockTheme_actionModeCloseButtonStyle -> SherlockTheme_actionModeCloseButtonStyle
    int SherlockSearchView_android_inputType -> SherlockSearchView_android_inputType
    int SherlockActivityChooserView_android_background -> SherlockActivityChooserView_android_background
    int SherlockTheme_dividerVertical -> SherlockTheme_dividerVertical
    int SherlockTheme_actionModePopupWindowStyle -> SherlockTheme_actionModePopupWindowStyle
    int SherlockTheme_textAppearanceSmallPopupMenu -> SherlockTheme_textAppearanceSmallPopupMenu
    int SherlockSpinner_android_popupBackground -> SherlockSpinner_android_popupBackground
    int[] SherlockActionMode -> SherlockActionMode
    int SherlockTheme_popupMenuStyle -> SherlockTheme_popupMenuStyle
    int[] SherlockMenuView -> SherlockMenuView
    int SherlockSpinner_android_popupPromptView -> SherlockSpinner_android_popupPromptView
    int SherlockActionBar_background -> SherlockActionBar_background
    int SherlockSpinner_android_dropDownSelector -> SherlockSpinner_android_dropDownSelector
    int SherlockTheme_actionModeSplitBackground -> SherlockTheme_actionModeSplitBackground
    int SherlockTheme_actionModeStyle -> SherlockTheme_actionModeStyle
    int SherlockTheme_searchAutoCompleteTextView -> SherlockTheme_searchAutoCompleteTextView
    int SherlockMenuView_windowAnimationStyle -> SherlockMenuView_windowAnimationStyle
    int SherlockTheme_textAppearanceSearchResultTitle -> SherlockTheme_textAppearanceSearchResultTitle
    int SherlockTheme_listPreferredItemPaddingRight -> SherlockTheme_listPreferredItemPaddingRight
    int SherlockMenuItem_android_numericShortcut -> SherlockMenuItem_android_numericShortcut
    int SherlockMenuItem_android_showAsAction -> SherlockMenuItem_android_showAsAction
    int SherlockTheme_actionButtonStyle -> SherlockTheme_actionButtonStyle
    int SherlockMenuGroup_android_checkableBehavior -> SherlockMenuGroup_android_checkableBehavior
    int SherlockTheme_searchResultListItemHeight -> SherlockTheme_searchResultListItemHeight
    int SherlockMenuGroup_android_id -> SherlockMenuGroup_android_id
    int SherlockTheme_actionDropDownStyle -> SherlockTheme_actionDropDownStyle
    int SherlockSearchView_android_imeOptions -> SherlockSearchView_android_imeOptions
    int SherlockSearchView_queryHint -> SherlockSearchView_queryHint
    int SherlockActionMode_titleTextStyle -> SherlockActionMode_titleTextStyle
    int SherlockTheme_textColorPrimaryDisableOnly -> SherlockTheme_textColorPrimaryDisableOnly
    int SherlockTheme_textAppearanceListItemSmall -> SherlockTheme_textAppearanceListItemSmall
    int SherlockTheme_windowActionModeOverlay -> SherlockTheme_windowActionModeOverlay
    int SherlockActionBar_homeLayout -> SherlockActionBar_homeLayout
    int SherlockActionBar_divider -> SherlockActionBar_divider
    int SherlockTheme_spinnerItemStyle -> SherlockTheme_spinnerItemStyle
    int SherlockMenuItem_android_visible -> SherlockMenuItem_android_visible
    int SherlockMenuItem_android_orderInCategory -> SherlockMenuItem_android_orderInCategory
    int SherlockActionBar_titleTextStyle -> SherlockActionBar_titleTextStyle
    int SherlockMenuView_preserveIconSpacing -> SherlockMenuView_preserveIconSpacing
    int SherlockTheme_windowActionBar -> SherlockTheme_windowActionBar
    int SherlockTheme_activityChooserViewStyle -> SherlockTheme_activityChooserViewStyle
    int SherlockMenuItem_android_enabled -> SherlockMenuItem_android_enabled
    int[] SherlockView -> SherlockView
    int SherlockMenuItem_android_onClick -> SherlockMenuItem_android_onClick
    int SherlockMenuItem_android_actionLayout -> SherlockMenuItem_android_actionLayout
    int SherlockTheme_searchViewVoiceIcon -> SherlockTheme_searchViewVoiceIcon
    int[] SherlockSpinner -> SherlockSpinner
    int SherlockTheme_windowActionBarOverlay -> SherlockTheme_windowActionBarOverlay
com.actionbarsherlock.app.ActionBar -> com.actionbarsherlock.app.ActionBar:
    void setSelectedNavigationItem(int) -> a
    void setTitle(java.lang.CharSequence) -> a
    void setNavigationMode(int) -> b
    com.actionbarsherlock.app.ActionBar$Tab newTab() -> a
    void addTab(com.actionbarsherlock.app.ActionBar$Tab) -> a
    com.actionbarsherlock.app.ActionBar$Tab getSelectedTab() -> b
com.actionbarsherlock.app.ActionBar$LayoutParams -> com.actionbarsherlock.app.ActionBar$LayoutParams:
    int[] ATTRS -> b
    int gravity -> a
com.actionbarsherlock.app.ActionBar$Tab -> aE:
    int getPosition() -> a
    android.graphics.drawable.Drawable getIcon() -> b
    java.lang.CharSequence getText() -> c
    com.actionbarsherlock.app.ActionBar$Tab setIcon(int) -> a
    com.actionbarsherlock.app.ActionBar$Tab setText(int) -> b
    android.view.View getCustomView() -> d
    com.actionbarsherlock.app.ActionBar$Tab setTabListener(com.actionbarsherlock.app.ActionBar$TabListener) -> a
    void select() -> e
    java.lang.CharSequence getContentDescription() -> f
com.actionbarsherlock.app.ActionBar$TabListener -> aF:
    void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> a
com.actionbarsherlock.app.SherlockActivity -> com.actionbarsherlock.app.SherlockActivity:
    com.actionbarsherlock.ActionBarSherlock mSherlock -> a
    com.actionbarsherlock.ActionBarSherlock getSherlock() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void openOptionsMenu() -> openOptionsMenu
    void closeOptionsMenu() -> closeOptionsMenu
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void setContentView(int) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setContentView(android.view.View) -> setContentView
com.actionbarsherlock.app.SherlockExpandableListActivity -> com.actionbarsherlock.app.SherlockExpandableListActivity:
    com.actionbarsherlock.ActionBarSherlock mSherlock -> a
    com.actionbarsherlock.ActionBarSherlock getSherlock() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void openOptionsMenu() -> openOptionsMenu
    void closeOptionsMenu() -> closeOptionsMenu
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void setContentView(int) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setContentView(android.view.View) -> setContentView
com.actionbarsherlock.app.SherlockFragment -> aG:
    com.actionbarsherlock.app.SherlockFragmentActivity mActivity -> J
    void onAttach(android.app.Activity) -> a
    void onDetach() -> q
com.actionbarsherlock.app.SherlockFragmentActivity -> com.actionbarsherlock.app.SherlockFragmentActivity:
    com.actionbarsherlock.ActionBarSherlock mSherlock -> e
    boolean mIgnoreNativeCreate -> f
    boolean mIgnoreNativePrepare -> g
    boolean mIgnoreNativeSelected -> h
    com.actionbarsherlock.ActionBarSherlock getSherlock() -> f
    com.actionbarsherlock.app.ActionBar getSupportActionBar() -> e
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    com.actionbarsherlock.view.MenuInflater getSupportMenuInflater() -> d
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    void supportInvalidateOptionsMenu() -> b_
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void openOptionsMenu() -> openOptionsMenu
    void closeOptionsMenu() -> closeOptionsMenu
    boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu) -> a
    boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void setContentView(int) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setContentView(android.view.View) -> setContentView
com.actionbarsherlock.app.SherlockListActivity -> com.actionbarsherlock.app.SherlockListActivity:
    com.actionbarsherlock.ActionBarSherlock mSherlock -> a
    com.actionbarsherlock.ActionBarSherlock getSherlock() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void openOptionsMenu() -> openOptionsMenu
    void closeOptionsMenu() -> closeOptionsMenu
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void setContentView(int) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setContentView(android.view.View) -> setContentView
com.actionbarsherlock.app.SherlockPreferenceActivity -> com.actionbarsherlock.app.SherlockPreferenceActivity:
    com.actionbarsherlock.ActionBarSherlock mSherlock -> a
    com.actionbarsherlock.ActionBarSherlock getSherlock() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void openOptionsMenu() -> openOptionsMenu
    void closeOptionsMenu() -> closeOptionsMenu
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void setContentView(int) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setContentView(android.view.View) -> setContentView
com.actionbarsherlock.internal.ActionBarSherlockCompat -> aH:
    boolean mReserveOverflow -> c
    boolean mReserveOverflowSet -> d
    com.actionbarsherlock.internal.view.menu.MenuBuilder mMenu -> e
    java.util.HashMap mNativeItemMap -> f
    android.view.ViewGroup mDecor -> g
    android.view.ViewGroup mContentParent -> h
    boolean mIsTitleReady -> i
    boolean mIsDestroyed -> j
    boolean mClosingActionMenu -> k
    boolean mMenuIsPrepared -> l
    boolean mMenuRefreshContent -> m
    android.os.Bundle mMenuFrozenActionViewState -> n
    com.actionbarsherlock.internal.app.ActionBarImpl aActionBar -> o
    com.actionbarsherlock.internal.widget.ActionBarView wActionBar -> p
    int mFeatures -> q
    int mUiOptions -> r
    com.actionbarsherlock.internal.widget.IcsProgressBar mCircularProgressBar -> s
    com.actionbarsherlock.internal.widget.ActionBarContextView mActionModeView -> t
    android.widget.TextView mTitleView -> u
    java.lang.CharSequence mTitle -> v
    boolean mIsFloating -> w
    com.actionbarsherlock.app.ActionBar getActionBar() -> a
    void initActionBar() -> m
    android.content.Context getThemedContext() -> k
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchPostResume() -> b
    void dispatchPause() -> c
    void dispatchStop() -> d
    void dispatchInvalidateOptionsMenu() -> e
    boolean dispatchOpenOptionsMenu() -> f
    boolean dispatchCloseOptionsMenu() -> g
    void dispatchPostCreate$79e5e33f() -> h
    boolean dispatchCreateOptionsMenu(android.view.Menu) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> b
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchMenuOpened$2fef5512(int) -> a
    void dispatchPanelClosed$2fef5516(int) -> b
    void dispatchTitleChanged$609be50a(java.lang.CharSequence) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> a
    void dispatchDestroy() -> i
    void dispatchSaveInstanceState(android.os.Bundle) -> a
    void dispatchRestoreInstanceState(android.os.Bundle) -> b
    boolean preparePanel() -> n
    boolean onMenuItemSelected$5f8dddaf(com.actionbarsherlock.view.MenuItem) -> b
    void onMenuModeChange$26b6228d() -> l
    boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    void onCloseMenu$4ff11e19(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onMenuItemSelected$7350e552(com.actionbarsherlock.view.MenuItem) -> c
    boolean hasFeature(int) -> d
    boolean requestFeature(int) -> e
    void setContentView(int) -> c
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    void installDecor() -> o
    boolean isReservingOverflow() -> p
    int loadUiOptionsFromManifest(android.app.Activity) -> a
    java.lang.String cleanActivityName(java.lang.String,java.lang.String) -> a
    android.app.Activity access$1(com.actionbarsherlock.internal.ActionBarSherlockCompat) -> a
    boolean access$4(com.actionbarsherlock.internal.ActionBarSherlockCompat) -> b
    com.actionbarsherlock.internal.view.menu.MenuBuilder access$5(com.actionbarsherlock.internal.ActionBarSherlockCompat) -> c
com.actionbarsherlock.internal.ActionBarSherlockCompat$1 -> aI:
    com.actionbarsherlock.internal.ActionBarSherlockCompat this$0 -> a
    void run() -> run
com.actionbarsherlock.internal.ActionBarSherlockNative -> aJ:
    com.actionbarsherlock.internal.app.ActionBarWrapper mActionBar -> c
    com.actionbarsherlock.internal.view.menu.MenuWrapper mMenu -> d
    com.actionbarsherlock.app.ActionBar getActionBar() -> a
    void initActionBar() -> l
    void dispatchInvalidateOptionsMenu() -> e
    boolean dispatchCreateOptionsMenu(android.view.Menu) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> b
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    void setContentView(int) -> c
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    android.content.Context getThemedContext() -> k
com.actionbarsherlock.internal.app.ActionBarImpl -> aK:
    android.content.Context mContext -> a
    android.content.Context mThemedContext -> b
    android.app.Activity mActivity -> k
    com.actionbarsherlock.internal.widget.ActionBarContainer mContainerView -> c
    com.actionbarsherlock.internal.widget.ActionBarView mActionView -> d
    com.actionbarsherlock.internal.widget.ActionBarContextView mContextView -> e
    com.actionbarsherlock.internal.widget.ActionBarContainer mSplitView -> f
    com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout mContentView -> g
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView mTabScrollView -> h
    java.util.ArrayList mTabs -> l
    com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl mSelectedTab -> m
    int mSavedTabPosition -> n
    boolean mLastMenuVisibility -> o
    java.util.ArrayList mMenuVisibilityListeners -> p
    int mContextDisplayMode -> i
    boolean mHasEmbeddedTabs -> q
    com.actionbarsherlock.internal.nineoldandroids.animation.Animator mCurrentShowAnim -> j
    void setHasEmbeddedTabs(boolean) -> a
    void ensureTabsExist() -> c
    void setShowHideAnimationEnabled(boolean) -> b
    void dispatchMenuVisibilityChanged(boolean) -> c
    void setSelectedNavigationItem(int) -> a
    void setTitle(java.lang.CharSequence) -> a
    void addTab(com.actionbarsherlock.app.ActionBar$Tab) -> a
    com.actionbarsherlock.app.ActionBar$Tab newTab() -> a
    void selectTab(com.actionbarsherlock.app.ActionBar$Tab) -> b
    com.actionbarsherlock.app.ActionBar$Tab getSelectedTab() -> b
    void setNavigationMode(int) -> b
com.actionbarsherlock.internal.app.ActionBarImpl$1 -> aL:
    com.actionbarsherlock.internal.app.ActionBarImpl this$0 -> a
com.actionbarsherlock.internal.app.ActionBarImpl$2 -> aM:
    com.actionbarsherlock.internal.app.ActionBarImpl this$0 -> a
com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl -> aN:
    com.actionbarsherlock.app.ActionBar$TabListener mCallback -> a
    android.graphics.drawable.Drawable mIcon -> c
    java.lang.CharSequence mText -> d
    int mPosition -> b
    com.actionbarsherlock.internal.app.ActionBarImpl this$0 -> e
    com.actionbarsherlock.app.ActionBar$Tab setTabListener(com.actionbarsherlock.app.ActionBar$TabListener) -> a
    android.view.View getCustomView() -> d
    android.graphics.drawable.Drawable getIcon() -> b
    int getPosition() -> a
    java.lang.CharSequence getText() -> c
    com.actionbarsherlock.app.ActionBar$Tab setIcon(int) -> a
    com.actionbarsherlock.app.ActionBar$Tab setText(int) -> b
    void select() -> e
    java.lang.CharSequence getContentDescription() -> f
com.actionbarsherlock.internal.app.ActionBarWrapper -> aO:
    android.app.Activity mActivity -> a
    android.app.ActionBar mActionBar -> b
    java.util.Set mMenuVisibilityListeners -> c
    android.support.v4.app.FragmentTransaction mFragmentTransaction -> d
    boolean onNavigationItemSelected(int,long) -> onNavigationItemSelected
    void setSelectedNavigationItem(int) -> a
    void setTitle(java.lang.CharSequence) -> a
    void setNavigationMode(int) -> b
    com.actionbarsherlock.app.ActionBar$Tab newTab() -> a
    void addTab(com.actionbarsherlock.app.ActionBar$Tab) -> a
    com.actionbarsherlock.app.ActionBar$Tab getSelectedTab() -> b
    void onMenuVisibilityChanged(boolean) -> onMenuVisibilityChanged
    android.app.Activity access$0(com.actionbarsherlock.internal.app.ActionBarWrapper) -> a
    android.support.v4.app.FragmentTransaction access$1(com.actionbarsherlock.internal.app.ActionBarWrapper) -> b
    void access$2(com.actionbarsherlock.internal.app.ActionBarWrapper,android.support.v4.app.FragmentTransaction) -> a
com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper -> aP:
    android.app.ActionBar$Tab mNativeTab -> a
    com.actionbarsherlock.app.ActionBar$TabListener mListener -> b
    com.actionbarsherlock.internal.app.ActionBarWrapper this$0 -> c
    int getPosition() -> a
    android.graphics.drawable.Drawable getIcon() -> b
    java.lang.CharSequence getText() -> c
    com.actionbarsherlock.app.ActionBar$Tab setIcon(int) -> a
    com.actionbarsherlock.app.ActionBar$Tab setText(int) -> b
    android.view.View getCustomView() -> d
    com.actionbarsherlock.app.ActionBar$Tab setTabListener(com.actionbarsherlock.app.ActionBar$TabListener) -> a
    void select() -> e
    java.lang.CharSequence getContentDescription() -> f
    void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabReselected
    void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabSelected
    void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabUnselected
com.actionbarsherlock.internal.nineoldandroids.animation.Animator -> aQ:
    java.util.ArrayList mListeners -> a
    void end() -> a
    com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone() -> b
    java.lang.Object clone() -> clone
com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener -> aR:
com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorListenerAdapter -> aS:
com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup -> com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup:
    com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy mProxy -> a
    void setVisibility(int) -> setVisibility
    float getAlpha() -> getAlpha
    void setAlpha(float) -> setAlpha
    float getTranslationX() -> getTranslationX
    void setTranslationX(float) -> setTranslationX
    float getTranslationY() -> getTranslationY
    void setTranslationY(float) -> setTranslationY
com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy -> aT:
    boolean NEEDS_PROXY -> a
    java.util.WeakHashMap PROXIES -> b
    java.lang.ref.WeakReference mView -> c
    float mAlpha -> d
    float mScaleX -> e
    float mScaleY -> f
    float mTranslationX -> g
    float mTranslationY -> h
    android.graphics.RectF mBefore -> i
    android.graphics.RectF mAfter -> j
    android.graphics.Matrix mTempMatrix -> k
    com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View) -> a
    float getAlpha() -> a
    void setAlpha(float) -> a
    float getTranslationX() -> b
    void setTranslationX(float) -> b
    float getTranslationY() -> c
    void setTranslationY(float) -> c
    void prepareForUpdate() -> d
    void invalidateAfterUpdate() -> e
    void computeRect(android.graphics.RectF,android.view.View) -> a
    void transformMatrix(android.graphics.Matrix,android.view.View) -> a
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
    void reset() -> reset
com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout -> com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout:
    com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy mProxy -> a
    void setVisibility(int) -> setVisibility
    float getAlpha() -> getAlpha
    void setAlpha(float) -> setAlpha
    float getTranslationY() -> getTranslationY
    void setTranslationY(float) -> setTranslationY
com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView -> com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView:
    com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy mProxy -> a
    void setVisibility(int) -> setVisibility
    float getAlpha() -> getAlpha
    void setAlpha(float) -> setAlpha
com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout -> com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout:
    com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy mProxy -> a
    void setVisibility(int) -> setVisibility
    float getAlpha() -> getAlpha
    void setAlpha(float) -> setAlpha
    float getTranslationX() -> getTranslationX
    void setTranslationX(float) -> setTranslationX
com.actionbarsherlock.internal.view.ActionProviderWrapper -> aU:
    android.support.v4.view.PagerAdapter mProvider$1885b2c9 -> a
    android.support.v4.view.PagerAdapter unwrap$7980f728() -> a
    android.view.View onCreateActionView() -> onCreateActionView
    boolean hasSubMenu() -> hasSubMenu
    boolean onPerformDefaultAction() -> onPerformDefaultAction
    void onPrepareSubMenu(android.view.SubMenu) -> onPrepareSubMenu
com.actionbarsherlock.internal.view.View_HasStateListenerSupport -> aV:
    void addOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) -> a
    void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) -> b
com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener -> aW:
    void onViewDetachedFromWindow(android.view.View) -> a
com.actionbarsherlock.internal.view.menu.ActionMenuItem -> aX:
    int mId -> a
    int mGroup -> b
    android.graphics.drawable.Drawable mIconDrawable -> c
    android.content.Context mContext -> d
    int mFlags -> e
    int getGroupId() -> a
    android.graphics.drawable.Drawable getIcon() -> b
    int getItemId() -> c
    com.actionbarsherlock.view.SubMenu getSubMenu() -> d
    boolean hasSubMenu() -> e
    boolean isVisible() -> f
    com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char) -> a
    com.actionbarsherlock.view.MenuItem setCheckable(boolean) -> a
    com.actionbarsherlock.view.MenuItem setChecked(boolean) -> b
    com.actionbarsherlock.view.MenuItem setEnabled(boolean) -> c
    com.actionbarsherlock.view.MenuItem setIcon(int) -> a
    com.actionbarsherlock.view.MenuItem setNumericShortcut(char) -> b
    com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener) -> a
    com.actionbarsherlock.view.MenuItem setTitle(java.lang.CharSequence) -> a
    com.actionbarsherlock.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> b
    com.actionbarsherlock.view.MenuItem setVisible(boolean) -> d
    void setShowAsAction(int) -> b
    com.actionbarsherlock.view.MenuItem setActionView(android.view.View) -> a
    android.view.View getActionView() -> g
    com.actionbarsherlock.view.MenuItem setActionView(int) -> c
    android.support.v4.view.PagerAdapter getActionProvider$7980f728() -> h
    com.actionbarsherlock.view.MenuItem setActionProvider$5b10848a(android.support.v4.view.PagerAdapter) -> a
    boolean expandActionView() -> i
    boolean isActionViewExpanded() -> j
com.actionbarsherlock.internal.view.menu.ActionMenuItemView -> com.actionbarsherlock.internal.view.menu.ActionMenuItemView:
    com.actionbarsherlock.internal.view.menu.MenuItemImpl mItemData -> a
    java.lang.CharSequence mTitle -> b
    com.actionbarsherlock.internal.view.menu.MenuBuilder$ItemInvoker mItemInvoker -> c
    android.widget.ImageButton mImageButton -> d
    com.actionbarsherlock.internal.widget.CapitalizingButton mTextButton -> e
    boolean mAllowTextWithIcon -> f
    boolean mExpandedFormat -> g
    int mMinWidth -> h
    java.util.Set mListeners -> i
    void addOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) -> a
    void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onFinishInflate() -> onFinishInflate
    com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData() -> a
    void initialize$679020ce(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    void setEnabled(boolean) -> setEnabled
    void onClick(android.view.View) -> onClick
    void setItemInvoker(com.actionbarsherlock.internal.view.menu.MenuBuilder$ItemInvoker) -> setItemInvoker
    boolean prefersCondensedTitle() -> b
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setExpandedFormat(boolean) -> setExpandedFormat
    void updateTextButtonVisibility() -> f
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    boolean hasText() -> c
    void setShortcut(boolean,char) -> setShortcut
    void setTitle(java.lang.CharSequence) -> setTitle
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean dispatchHoverEvent(android.view.MotionEvent) -> dispatchHoverEvent
    boolean needsDividerBefore() -> d
    boolean needsDividerAfter() -> e
    boolean onLongClick(android.view.View) -> onLongClick
    void onMeasure(int,int) -> onMeasure
com.actionbarsherlock.internal.view.menu.ActionMenuPresenter -> aY:
    android.view.View mOverflowButton -> g
    boolean mReserveOverflow -> h
    int mWidthLimit -> i
    int mActionItemWidthLimit -> j
    int mMaxItems -> k
    boolean mMaxItemsSet -> l
    boolean mStrictWidthLimit -> m
    boolean mWidthLimitSet -> n
    boolean mExpandedActionViewsExclusive -> o
    int mMinCellSize -> p
    android.util.SparseBooleanArray mActionButtonGroups -> q
    android.view.View mScrapActionButtonView -> r
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup mOverflowPopup -> s
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu mActionButtonPopup -> t
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable mPostedOpenRunnable -> u
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback -> a
    int mOpenSubMenuId -> b
    void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    boolean reserveOverflow(android.content.Context) -> a
    void onConfigurationChanged$308b225b() -> a
    void setWidthLimit(int,boolean) -> a
    void setItemLimit(int) -> a
    void setExpandedActionViewsExclusive(boolean) -> a
    com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,com.actionbarsherlock.internal.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem$2525e600(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    void updateMenuView(boolean) -> b
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder) -> a
    boolean showOverflowMenu() -> b
    boolean hideOverflowMenu() -> c
    boolean dismissPopupMenus() -> d
    boolean hideSubMenus() -> e
    boolean isOverflowMenuShowing() -> f
    boolean isOverflowReserved() -> g
    boolean flagActionItems() -> h
    void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean) -> a
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup access$0(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter) -> a
    void access$1(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup) -> a
    android.view.View access$2(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter) -> b
    void access$3(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu) -> a
    void access$4(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable) -> a
com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu -> aZ:
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter this$0 -> e
    void onDismiss() -> onDismiss
com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable -> ba:
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup mPopup -> a
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter this$0 -> b
    void run() -> run
com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton -> bb:
    java.util.Set mListeners -> a
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter this$0 -> b
    boolean performClick() -> performClick
    boolean needsDividerBefore() -> d
    boolean needsDividerAfter() -> e
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void addOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) -> a
    void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener) -> b
com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup -> bc:
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter this$0 -> e
    void onDismiss() -> onDismiss
com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback -> bd:
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter this$0 -> a
    boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    void onCloseMenu$4ff11e19(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> b
com.actionbarsherlock.internal.view.menu.ActionMenuView -> com.actionbarsherlock.internal.view.menu.ActionMenuView:
    boolean IS_FROYO -> a
    com.actionbarsherlock.internal.view.menu.MenuBuilder mMenu -> b
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter mPresenter -> c
    boolean mFormatItems -> d
    int mFormatItemsWidth -> e
    int mMinCellSize -> f
    int mGeneratedItemPadding -> g
    boolean mFirst -> h
    void setPresenter(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter) -> setPresenter
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    int measureChildForCells(android.view.View,int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOverflowReserved(boolean) -> setOverflowReserved
    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams() -> b
    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams() -> a
    boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    void initialize(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    boolean hasDividerBeforeChildAt(int) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView -> be:
    boolean needsDividerBefore() -> d
    boolean needsDividerAfter() -> e
com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams -> com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams:
    boolean isOverflowButton -> a
    int cellsUsed -> b
    int extraPixels -> c
    boolean expandable -> d
    boolean preventEdgeOffset -> e
    boolean expanded -> f
com.actionbarsherlock.internal.view.menu.BaseMenuPresenter -> bf:
    boolean IS_HONEYCOMB -> a
    android.content.Context mSystemContext -> c
    android.content.Context mContext -> d
    com.actionbarsherlock.internal.view.menu.MenuBuilder mMenu -> e
    android.view.LayoutInflater mSystemInflater -> b
    com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback mCallback -> g
    int mMenuLayoutRes -> h
    int mItemLayoutRes -> i
    com.actionbarsherlock.internal.view.menu.MenuView mMenuView -> f
    void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    void updateMenuView(boolean) -> b
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback) -> a
    android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,com.actionbarsherlock.internal.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem$2525e600(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder) -> a
    boolean flagActionItems() -> h
    boolean expandItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> b
    boolean collapseItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> c
    void setId(int) -> b
com.actionbarsherlock.internal.view.menu.ListMenuItemView -> com.actionbarsherlock.internal.view.menu.ListMenuItemView:
    com.actionbarsherlock.internal.view.menu.MenuItemImpl mItemData -> a
    android.widget.ImageView mIconView -> b
    android.widget.RadioButton mRadioButton -> c
    android.widget.TextView mTitleView -> d
    android.widget.CheckBox mCheckBox -> e
    android.widget.TextView mShortcutView -> f
    android.graphics.drawable.Drawable mBackground -> g
    int mTextAppearance -> h
    android.content.Context mTextAppearanceContext -> i
    boolean mPreserveIconSpacing -> j
    android.view.LayoutInflater mInflater -> k
    boolean mForceShowIcon -> l
    android.content.Context mContext -> m
    void onFinishInflate() -> onFinishInflate
    void initialize$679020ce(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    void setForceShowIcon(boolean) -> setForceShowIcon
    void setTitle(java.lang.CharSequence) -> setTitle
    com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData() -> a
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setShortcut(boolean,char) -> setShortcut
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void onMeasure(int,int) -> onMeasure
    void insertRadioButton() -> c
    void insertCheckBox() -> d
    boolean prefersCondensedTitle() -> b
    android.view.LayoutInflater getInflater() -> e
com.actionbarsherlock.internal.view.menu.MenuBuilder -> bg:
    int[] sCategoryToOrder -> b
    android.content.Context mContext -> c
    android.content.res.Resources mResources -> a
    boolean mQwertyMode -> d
    boolean mShortcutsVisible -> e
    com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback mCallback -> f
    java.util.ArrayList mItems -> g
    java.util.ArrayList mVisibleItems -> h
    boolean mIsVisibleItemsStale -> i
    java.util.ArrayList mActionItems -> j
    java.util.ArrayList mNonActionItems -> k
    boolean mIsActionItemsStale -> l
    int mDefaultShowAsAction -> m
    boolean mPreventDispatchingItemsChanged -> n
    boolean mItemsChangedWhileDispatchPrevented -> o
    boolean mOptionalIconsVisible -> p
    boolean mIsClosing -> q
    java.util.concurrent.CopyOnWriteArrayList mPresenters -> r
    com.actionbarsherlock.internal.view.menu.MenuItemImpl mExpandedItem -> s
    void addMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter) -> a
    void removeMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter) -> b
    void saveActionViewStates(android.os.Bundle) -> a
    void restoreActionViewStates(android.os.Bundle) -> b
    java.lang.String getActionViewStatesKey() -> a
    void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback) -> a
    com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence) -> c
    com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence) -> a
    com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> b
    void clear() -> b
    void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem) -> a
    void setGroupCheckable(int,boolean,boolean) -> a
    boolean hasVisibleItems() -> c
    com.actionbarsherlock.view.MenuItem findItem(int) -> a
    int size() -> d
    com.actionbarsherlock.view.MenuItem getItem(int) -> b
    void setQwertyMode(boolean) -> a
    boolean isQwertyMode() -> e
    boolean isShortcutsVisible() -> f
    android.content.res.Resources getResources() -> g
    android.content.Context getContext() -> h
    boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem) -> a
    void changeMenuMode() -> i
    int findInsertIndex(java.util.ArrayList,int) -> a
    boolean performItemAction(com.actionbarsherlock.view.MenuItem,int) -> a
    void close(boolean) -> b
    void close() -> j
    void onItemsChanged(boolean) -> c
    void stopDispatchingItemsChanged() -> k
    void startDispatchingItemsChanged() -> l
    void onItemVisibleChanged$5e2decd5() -> m
    void onItemActionRequestChanged$5e2decd5() -> n
    java.util.ArrayList getVisibleItems() -> o
    void flagActionItems() -> p
    java.util.ArrayList getActionItems() -> q
    java.util.ArrayList getNonActionItems() -> r
    com.actionbarsherlock.internal.view.menu.MenuBuilder getRootMenu() -> s
    boolean getOptionalIconsVisible() -> t
    boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> b
    com.actionbarsherlock.internal.view.menu.MenuItemImpl getExpandedItem() -> u
    boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap) -> a
com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback -> bh:
    boolean onMenuItemSelected$5f8dddaf(com.actionbarsherlock.view.MenuItem) -> b
    void onMenuModeChange$26b6228d() -> l
com.actionbarsherlock.internal.view.menu.MenuBuilder$ItemInvoker -> bi:
    boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
com.actionbarsherlock.internal.view.menu.MenuItemImpl -> bj:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    char mShortcutNumericChar -> g
    char mShortcutAlphabeticChar -> h
    android.graphics.drawable.Drawable mIconDrawable -> i
    int mIconResId -> j
    com.actionbarsherlock.internal.view.menu.MenuBuilder mMenu -> k
    com.actionbarsherlock.internal.view.menu.SubMenuBuilder mSubMenu -> l
    com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener mClickListener -> m
    int mFlags -> n
    int mShowAsAction -> o
    android.view.View mActionView -> p
    android.support.v4.view.PagerAdapter mActionProvider$1885b2c9 -> q
    boolean mIsActionViewExpanded -> r
    boolean invoke() -> k
    boolean isEnabled() -> l
    com.actionbarsherlock.view.MenuItem setEnabled(boolean) -> c
    int getGroupId() -> a
    int getItemId() -> c
    int getOrder() -> m
    int getOrdering() -> n
    android.content.Intent getIntent() -> o
    char getAlphabeticShortcut() -> p
    com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char) -> a
    char getNumericShortcut() -> q
    com.actionbarsherlock.view.MenuItem setNumericShortcut(char) -> b
    char getShortcut() -> r
    java.lang.String getShortcutLabel() -> s
    boolean shouldShowShortcut() -> t
    com.actionbarsherlock.view.SubMenu getSubMenu() -> d
    boolean hasSubMenu() -> e
    void setSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder) -> a
    java.lang.CharSequence getTitle() -> u
    java.lang.CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView) -> a
    java.lang.CharSequence getTitleCondensed() -> v
    com.actionbarsherlock.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> b
    android.graphics.drawable.Drawable getIcon() -> b
    com.actionbarsherlock.view.MenuItem setIcon(int) -> a
    boolean isCheckable() -> w
    com.actionbarsherlock.view.MenuItem setCheckable(boolean) -> a
    void setExclusiveCheckable(boolean) -> e
    boolean isExclusiveCheckable() -> x
    boolean isChecked() -> y
    com.actionbarsherlock.view.MenuItem setChecked(boolean) -> b
    void setCheckedInt(boolean) -> f
    boolean isVisible() -> f
    com.actionbarsherlock.view.MenuItem setVisible(boolean) -> d
    com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener) -> a
    java.lang.String toString() -> toString
    void actionFormatChanged() -> z
    boolean shouldShowIcon() -> A
    boolean isActionButton() -> B
    boolean requestsActionButton() -> C
    boolean requiresActionButton() -> D
    void setIsActionButton(boolean) -> g
    boolean showsTextAsAction() -> E
    void setShowAsAction(int) -> b
    com.actionbarsherlock.view.MenuItem setActionView(android.view.View) -> a
    com.actionbarsherlock.view.MenuItem setActionView(int) -> c
    android.view.View getActionView() -> g
    android.support.v4.view.PagerAdapter getActionProvider$7980f728() -> h
    com.actionbarsherlock.view.MenuItem setActionProvider$5b10848a(android.support.v4.view.PagerAdapter) -> a
    boolean expandActionView() -> i
    boolean collapseActionView() -> F
    boolean hasCollapsibleActionView() -> G
    void setActionViewExpanded(boolean) -> h
    boolean isActionViewExpanded() -> j
com.actionbarsherlock.internal.view.menu.MenuItemWrapper -> bk:
    android.view.MenuItem mNativeItem -> a
    com.actionbarsherlock.view.SubMenu mSubMenu -> b
    com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener mMenuItemClickListener -> c
    int getItemId() -> c
    int getGroupId() -> a
    com.actionbarsherlock.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> b
    com.actionbarsherlock.view.MenuItem setIcon(int) -> a
    android.graphics.drawable.Drawable getIcon() -> b
    com.actionbarsherlock.view.MenuItem setNumericShortcut(char) -> b
    com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char) -> a
    com.actionbarsherlock.view.MenuItem setCheckable(boolean) -> a
    com.actionbarsherlock.view.MenuItem setChecked(boolean) -> b
    com.actionbarsherlock.view.MenuItem setVisible(boolean) -> d
    boolean isVisible() -> f
    com.actionbarsherlock.view.MenuItem setEnabled(boolean) -> c
    boolean hasSubMenu() -> e
    com.actionbarsherlock.view.SubMenu getSubMenu() -> d
    com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void setShowAsAction(int) -> b
    com.actionbarsherlock.view.MenuItem setActionView(android.view.View) -> a
    com.actionbarsherlock.view.MenuItem setActionView(int) -> c
    android.view.View getActionView() -> g
    com.actionbarsherlock.view.MenuItem setActionProvider$5b10848a(android.support.v4.view.PagerAdapter) -> a
    android.support.v4.view.PagerAdapter getActionProvider$7980f728() -> h
    boolean expandActionView() -> i
    boolean isActionViewExpanded() -> j
com.actionbarsherlock.internal.view.menu.MenuPopupHelper -> bl:
    int ITEM_LAYOUT -> a
    android.content.Context mContext -> e
    android.view.LayoutInflater mInflater -> f
    com.actionbarsherlock.internal.widget.IcsListPopupWindow mPopup -> g
    com.actionbarsherlock.internal.view.menu.MenuBuilder mMenu -> h
    int mPopupMaxWidth -> i
    android.view.View mAnchorView -> b
    boolean mOverflowOnly -> j
    android.view.ViewTreeObserver mTreeObserver -> k
    com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter mAdapter -> l
    com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback mPresenterCallback -> c
    boolean mForceShowIcon -> d
    android.view.ViewGroup mMeasureParent -> m
    void setAnchorView(android.view.View) -> b
    void show() -> a
    boolean tryShow() -> b
    void dismiss() -> c
    void onDismiss() -> onDismiss
    boolean isShowing() -> d
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void onGlobalLayout() -> onGlobalLayout
    void onViewDetachedFromWindow(android.view.View) -> a
    void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> h
    boolean expandItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> b
    boolean collapseItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> c
    boolean access$0(com.actionbarsherlock.internal.view.menu.MenuPopupHelper) -> a
    android.view.LayoutInflater access$1(com.actionbarsherlock.internal.view.menu.MenuPopupHelper) -> b
    com.actionbarsherlock.internal.view.menu.MenuBuilder access$2(com.actionbarsherlock.internal.view.menu.MenuPopupHelper) -> c
    com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter access$3(com.actionbarsherlock.internal.view.menu.MenuPopupHelper) -> d
com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver -> bm:
    com.actionbarsherlock.internal.view.menu.MenuPopupHelper this$0 -> a
    void onChanged() -> onChanged
com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter -> bn:
    com.actionbarsherlock.internal.view.menu.MenuBuilder mAdapterMenu -> a
    int mExpandedIndex -> b
    com.actionbarsherlock.internal.view.menu.MenuPopupHelper this$0 -> c
    int getCount() -> getCount
    com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    java.lang.Object getItem(int) -> getItem
    com.actionbarsherlock.internal.view.menu.MenuBuilder access$1(com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter) -> a
com.actionbarsherlock.internal.view.menu.MenuPresenter -> bo:
    void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> h
    boolean expandItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> b
    boolean collapseItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> c
com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback -> bp:
    void onCloseMenu$4ff11e19(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> b
    boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
com.actionbarsherlock.internal.view.menu.MenuView -> bq:
    void initialize(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
com.actionbarsherlock.internal.view.menu.MenuView$ItemView -> br:
    void initialize$679020ce(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData() -> a
    boolean prefersCondensedTitle() -> b
com.actionbarsherlock.internal.view.menu.MenuWrapper -> bs:
    android.view.Menu mNativeMenu -> a
    java.util.WeakHashMap mNativeMap -> b
    com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem) -> b
    com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence) -> a
    com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> b
    void setGroupCheckable(int,boolean,boolean) -> a
    boolean hasVisibleItems() -> c
    com.actionbarsherlock.view.MenuItem findItem(int) -> a
    com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem) -> a
com.actionbarsherlock.internal.view.menu.SubMenuBuilder -> bt:
    com.actionbarsherlock.internal.view.menu.MenuBuilder mParentMenu -> b
    com.actionbarsherlock.internal.view.menu.MenuItemImpl mItem -> c
    void setQwertyMode(boolean) -> a
    boolean isQwertyMode() -> e
    boolean isShortcutsVisible() -> f
    com.actionbarsherlock.view.Menu getParentMenu() -> v
    com.actionbarsherlock.view.MenuItem getItem() -> w
    void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback) -> a
    com.actionbarsherlock.internal.view.menu.MenuBuilder getRootMenu() -> s
    boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem) -> a
    com.actionbarsherlock.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> a
    boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> b
    java.lang.String getActionViewStatesKey() -> a
com.actionbarsherlock.internal.view.menu.SubMenuWrapper -> bu:
    android.view.SubMenu mNativeSubMenu -> b
    com.actionbarsherlock.view.MenuItem mItem -> c
    com.actionbarsherlock.view.MenuItem getItem() -> w
com.actionbarsherlock.internal.widget.AbsActionBarView -> com.actionbarsherlock.internal.widget.AbsActionBarView:
    com.actionbarsherlock.internal.view.menu.ActionMenuView mMenuView -> a
    com.actionbarsherlock.internal.view.menu.ActionMenuPresenter mActionMenuPresenter -> b
    com.actionbarsherlock.internal.widget.ActionBarContainer mSplitView -> c
    boolean mSplitActionBar -> d
    boolean mSplitWhenNarrow -> h
    int mContentHeight -> e
    android.content.Context mContext -> f
    com.actionbarsherlock.internal.nineoldandroids.animation.Animator mVisibilityAnim -> g
    com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener mVisAnimListener -> i
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
    void setContentHeight(int) -> setContentHeight
    void setSplitView(com.actionbarsherlock.internal.widget.ActionBarContainer) -> setSplitView
    int getAnimatedVisibility() -> a
    void setVisibility(int) -> setVisibility
    boolean showOverflowMenu() -> b
    boolean hideOverflowMenu() -> c
    boolean isOverflowMenuShowing() -> d
    boolean isOverflowReserved() -> e
    void dismissPopupMenus() -> f
    int measureChildView(android.view.View,int,int,int) -> a
    int positionChild(android.view.View,int,int,int) -> b
    int positionChildInverse(android.view.View,int,int,int) -> c
com.actionbarsherlock.internal.widget.AbsActionBarView$1 -> bv:
    com.actionbarsherlock.internal.widget.AbsActionBarView this$0 -> a
    void run() -> run
com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener -> bw:
    boolean mCanceled -> a
    com.actionbarsherlock.internal.widget.AbsActionBarView this$0 -> b
com.actionbarsherlock.internal.widget.ActionBarContainer -> com.actionbarsherlock.internal.widget.ActionBarContainer:
    boolean mIsTransitioning -> a
    android.view.View mTabContainer -> b
    com.actionbarsherlock.internal.widget.ActionBarView mActionBarView -> c
    android.graphics.drawable.Drawable mBackground -> d
    android.graphics.drawable.Drawable mStackedBackground -> e
    android.graphics.drawable.Drawable mSplitBackground -> f
    boolean mIsSplit -> g
    boolean mIsStacked -> h
    void onFinishInflate() -> onFinishInflate
    void setPrimaryBackground(android.graphics.drawable.Drawable) -> setPrimaryBackground
    void setStackedBackground(android.graphics.drawable.Drawable) -> setStackedBackground
    void setSplitBackground(android.graphics.drawable.Drawable) -> setSplitBackground
    void setTransitioning(boolean) -> setTransitioning
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView) -> setTabContainer
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
com.actionbarsherlock.internal.widget.ActionBarContextView -> com.actionbarsherlock.internal.widget.ActionBarContextView:
    java.lang.CharSequence mTitle -> h
    java.lang.CharSequence mSubtitle -> i
    android.view.View mCustomView -> j
    android.widget.LinearLayout mTitleLayout -> k
    android.widget.TextView mTitleView -> l
    android.widget.TextView mSubtitleView -> m
    int mTitleStyleRes -> n
    int mSubtitleStyleRes -> o
    android.graphics.drawable.Drawable mSplitBackground -> p
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setContentHeight(int) -> setContentHeight
    void setCustomView(android.view.View) -> setCustomView
    void setTitle(java.lang.CharSequence) -> setTitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    void initTitle() -> g
    boolean showOverflowMenu() -> b
    boolean hideOverflowMenu() -> c
    boolean isOverflowMenuShowing() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
com.actionbarsherlock.internal.widget.ActionBarView -> com.actionbarsherlock.internal.widget.ActionBarView:
    int mNavigationMode -> j
    int mDisplayOptions -> k
    java.lang.CharSequence mTitle -> l
    java.lang.CharSequence mSubtitle -> m
    android.graphics.drawable.Drawable mIcon -> n
    android.graphics.drawable.Drawable mLogo -> o
    com.actionbarsherlock.internal.widget.ActionBarView$HomeView mHomeLayout -> p
    com.actionbarsherlock.internal.widget.ActionBarView$HomeView mExpandedHomeLayout -> q
    android.widget.LinearLayout mTitleLayout -> r
    android.widget.TextView mTitleView -> s
    android.widget.TextView mSubtitleView -> t
    android.view.View mTitleUpView -> u
    com.actionbarsherlock.internal.widget.IcsSpinner mSpinner -> v
    com.actionbarsherlock.internal.widget.IcsLinearLayout mListNavLayout -> w
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView mTabScrollView -> x
    android.view.View mCustomNavView -> y
    com.actionbarsherlock.internal.widget.IcsProgressBar mProgressView -> z
    com.actionbarsherlock.internal.widget.IcsProgressBar mIndeterminateProgressView -> A
    int mProgressBarPadding -> B
    int mItemPadding -> C
    int mTitleStyleRes -> D
    int mSubtitleStyleRes -> E
    int mProgressStyle -> F
    int mIndeterminateProgressStyle -> G
    boolean mUserTitle -> H
    boolean mIncludeTabs -> I
    boolean mIsCollapsable -> J
    boolean mIsCollapsed -> K
    com.actionbarsherlock.internal.view.menu.MenuBuilder mOptionsMenu -> L
    com.actionbarsherlock.internal.widget.ActionBarContextView mContextView -> M
    com.actionbarsherlock.internal.view.menu.ActionMenuItem mLogoNavItem -> N
    android.widget.SpinnerAdapter mSpinnerAdapter -> O
    android.support.v4.app.FragmentManager$OnBackStackChangedListener mCallback$449d8d00 -> P
    com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter mExpandedMenuPresenter -> Q
    android.view.View mExpandedActionView -> h
    com.actionbarsherlock.view.Window$Callback mWindowCallback -> i
    com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener mNavItemSelectedListener -> R
    android.view.View$OnClickListener mExpandedActionViewUpListener -> S
    android.view.View$OnClickListener mUpClickListener -> T
    int loadLogoFromManifest(android.app.Activity) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setWindowCallback(com.actionbarsherlock.view.Window$Callback) -> setWindowCallback
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void initProgress() -> g
    void initIndeterminateProgress() -> h
    void setSplitActionBar(boolean) -> setSplitActionBar
    boolean isSplitActionBar() -> i
    void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView) -> setEmbeddedTabView
    void setCallback$4a30998b(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> setCallback$4a30998b
    void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback) -> setMenu
    void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    boolean hasExpandedActionView() -> j
    void collapseActionView() -> k
    void setCustomNavigationView(android.view.View) -> setCustomNavigationView
    java.lang.CharSequence getTitle() -> l
    void setTitle(java.lang.CharSequence) -> setTitle
    void setWindowTitle(java.lang.CharSequence) -> setWindowTitle
    void setTitleImpl(java.lang.CharSequence) -> a
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    void setHomeButtonEnabled(boolean) -> setHomeButtonEnabled
    void setDisplayOptions(int) -> setDisplayOptions
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void setIcon(int) -> setIcon
    void setLogo(android.graphics.drawable.Drawable) -> setLogo
    void setLogo(int) -> setLogo
    void setNavigationMode(int) -> setNavigationMode
    void setDropdownAdapter(android.widget.SpinnerAdapter) -> setDropdownAdapter
    void setDropdownSelectedPosition(int) -> setDropdownSelectedPosition
    int getDropdownSelectedPosition() -> m
    int getNavigationMode() -> n
    int getDisplayOptions() -> o
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void onFinishInflate() -> onFinishInflate
    void initTitle() -> q
    void setContextView(com.actionbarsherlock.internal.widget.ActionBarContextView) -> setContextView
    void setCollapsable(boolean) -> setCollapsable
    boolean isCollapsed() -> p
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.support.v4.app.FragmentManager$OnBackStackChangedListener access$0$5c60a900(com.actionbarsherlock.internal.widget.ActionBarView) -> a
    com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter access$1(com.actionbarsherlock.internal.widget.ActionBarView) -> b
    com.actionbarsherlock.internal.view.menu.ActionMenuItem access$2(com.actionbarsherlock.internal.widget.ActionBarView) -> c
    com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$3(com.actionbarsherlock.internal.widget.ActionBarView) -> d
    android.graphics.drawable.Drawable access$4(com.actionbarsherlock.internal.widget.ActionBarView) -> e
    com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$5(com.actionbarsherlock.internal.widget.ActionBarView) -> f
    android.widget.LinearLayout access$6(com.actionbarsherlock.internal.widget.ActionBarView) -> g
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$7(com.actionbarsherlock.internal.widget.ActionBarView) -> h
    com.actionbarsherlock.internal.widget.IcsSpinner access$8(com.actionbarsherlock.internal.widget.ActionBarView) -> i
    android.view.View access$9(com.actionbarsherlock.internal.widget.ActionBarView) -> j
    int access$10(com.actionbarsherlock.internal.widget.ActionBarView) -> k
    void access$11(com.actionbarsherlock.internal.widget.ActionBarView) -> l
    int access$12(com.actionbarsherlock.internal.widget.ActionBarView) -> m
com.actionbarsherlock.internal.widget.ActionBarView$1 -> bx:
    com.actionbarsherlock.internal.widget.ActionBarView this$0 -> a
    void onItemSelected$4cda22f6(android.view.View,int,long) -> a
com.actionbarsherlock.internal.widget.ActionBarView$2 -> by:
    com.actionbarsherlock.internal.widget.ActionBarView this$0 -> a
    void onClick(android.view.View) -> onClick
com.actionbarsherlock.internal.widget.ActionBarView$3 -> bz:
    com.actionbarsherlock.internal.widget.ActionBarView this$0 -> a
    void onClick(android.view.View) -> onClick
com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter -> bA:
    com.actionbarsherlock.internal.view.menu.MenuBuilder mMenu -> b
    com.actionbarsherlock.internal.view.menu.MenuItemImpl mCurrentExpandedItem -> a
    com.actionbarsherlock.internal.widget.ActionBarView this$0 -> c
    void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> h
    boolean expandItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> b
    boolean collapseItemActionView$2d5bb53f(com.actionbarsherlock.internal.view.menu.MenuItemImpl) -> c
com.actionbarsherlock.internal.widget.ActionBarView$HomeView -> com.actionbarsherlock.internal.widget.ActionBarView$HomeView:
    android.view.View mUpView -> a
    android.widget.ImageView mIconView -> b
    int mUpWidth -> c
    void setUp(boolean) -> setUp
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean dispatchHoverEvent(android.view.MotionEvent) -> dispatchHoverEvent
    void onFinishInflate() -> onFinishInflate
    int getLeftOffset() -> a
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
com.actionbarsherlock.internal.widget.ActionBarView$SavedState -> bB:
    int expandedMenuItemId -> a
    boolean isOverflowOpen -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1 -> bC:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.actionbarsherlock.internal.widget.CapitalizingButton -> com.actionbarsherlock.internal.widget.CapitalizingButton:
    boolean SANS_ICE_CREAM -> a
    boolean IS_GINGERBREAD -> b
    int[] R_styleable_Button -> c
    boolean mAllCaps -> d
    void setTextCompat(java.lang.CharSequence) -> setTextCompat
com.actionbarsherlock.internal.widget.CapitalizingTextView -> com.actionbarsherlock.internal.widget.CapitalizingTextView:
    boolean SANS_ICE_CREAM -> a
    boolean IS_GINGERBREAD -> b
    int[] R_styleable_TextView -> c
    boolean mAllCaps -> d
    void setTextCompat(java.lang.CharSequence) -> setTextCompat
com.actionbarsherlock.internal.widget.CollapsibleActionViewWrapper -> com.actionbarsherlock.internal.widget.CollapsibleActionViewWrapper:
    com.actionbarsherlock.view.CollapsibleActionView child -> a
    void onActionViewExpanded() -> onActionViewExpanded
    void onActionViewCollapsed() -> onActionViewCollapsed
    android.view.View unwrap() -> a
com.actionbarsherlock.internal.widget.FakeDialogPhoneWindow -> com.actionbarsherlock.internal.widget.FakeDialogPhoneWindow:
    android.util.TypedValue mMinWidthMajor -> a
    android.util.TypedValue mMinWidthMinor -> b
    void onMeasure(int,int) -> onMeasure
com.actionbarsherlock.internal.widget.IcsAbsSpinner -> com.actionbarsherlock.internal.widget.IcsAbsSpinner:
    boolean IS_HONEYCOMB -> u
    android.widget.SpinnerAdapter mAdapter -> a
    int mHeightMeasureSpec -> b
    int mWidthMeasureSpec -> c
    boolean mBlockLayoutRequests -> v
    int mSelectionLeftPadding -> w
    int mSelectionTopPadding -> x
    int mSelectionRightPadding -> y
    int mSelectionBottomPadding -> z
    android.graphics.Rect mSpinnerPadding -> d
    com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin mRecycler -> e
    android.database.DataSetObserver mDataSetObserver -> A
    void initAbsSpinner() -> l
    void setAdapter(android.widget.SpinnerAdapter) -> setAdapter
    void resetList() -> a
    void onMeasure(int,int) -> onMeasure
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void setSelection(int,boolean) -> setSelection
    void setSelection(int) -> setSelection
    void layout$2563266() -> b
    android.view.View getSelectedView() -> c
    void requestLayout() -> requestLayout
    android.widget.SpinnerAdapter getAdapter() -> d
    int getCount() -> e
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void setAdapter(android.widget.Adapter) -> setAdapter
    android.widget.Adapter getAdapter() -> f
    void access$2(com.actionbarsherlock.internal.widget.IcsAbsSpinner,android.view.View,boolean) -> a
com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin -> bD:
    android.util.SparseArray mScrapHeap -> a
    com.actionbarsherlock.internal.widget.IcsAbsSpinner this$0 -> b
    void put(int,android.view.View) -> a
    android.view.View get(int) -> a
com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState -> bE:
    long selectedId -> a
    int position -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1 -> bF:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.actionbarsherlock.internal.widget.IcsAdapterView -> com.actionbarsherlock.internal.widget.IcsAdapterView:
    int mFirstPosition -> f
    int mSyncPosition -> g
    long mSyncRowId -> h
    boolean mNeedSync -> i
    int mSyncMode -> j
    int mLayoutHeight -> a
    boolean mInLayout -> k
    com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener mOnItemSelectedListener -> b
    boolean mDataChanged -> l
    int mNextSelectedPosition -> m
    long mNextSelectedRowId -> n
    int mSelectedPosition -> o
    long mSelectedRowId -> p
    android.view.View mEmptyView -> c
    int mItemCount -> q
    int mOldItemCount -> r
    int mOldSelectedPosition -> s
    long mOldSelectedRowId -> t
    boolean mDesiredFocusableState -> d
    boolean mDesiredFocusableInTouchModeState -> e
    com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier mSelectionNotifier -> u
    boolean mBlockLayoutRequests -> v
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    void setOnItemLongClickListener$4fc6aad(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> setOnItemLongClickListener$4fc6aad
    void setOnItemSelectedListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener) -> setOnItemSelectedListener
    android.widget.Adapter getAdapter() -> f
    void setAdapter(android.widget.Adapter) -> setAdapter
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeAllViews() -> removeAllViews
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getSelectedItemPosition() -> g
    android.view.View getSelectedView() -> c
    int getCount() -> e
    int getLastVisiblePosition() -> a
    void setSelection(int) -> setSelection
    void setEmptyView(android.view.View) -> setEmptyView
    void setFocusable(boolean) -> setFocusable
    void setFocusableInTouchMode(boolean) -> setFocusableInTouchMode
    void checkFocus() -> h
    void updateEmptyStatus(boolean) -> a
    long getItemIdAtPosition(int) -> c
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void onDetachedFromWindow() -> onDetachedFromWindow
    void fireOnSelected() -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    boolean isScrollableForAccessibility() -> d
    boolean canAnimate() -> canAnimate
    void handleDataChanged() -> i
    void checkSelectionChanged() -> j
    void setSelectedPositionInt(int) -> a
    void setNextSelectedPositionInt(int) -> b
    void rememberSyncState() -> k
    void access$0(com.actionbarsherlock.internal.widget.IcsAdapterView,android.os.Parcelable) -> a
    android.os.Parcelable access$1(com.actionbarsherlock.internal.widget.IcsAdapterView) -> a
    void access$2(com.actionbarsherlock.internal.widget.IcsAdapterView) -> b
com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver -> bG:
    android.os.Parcelable mInstanceState -> a
    com.actionbarsherlock.internal.widget.IcsAdapterView this$0 -> b
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener -> bH:
    void onItemSelected$4cda22f6(android.view.View,int,long) -> a
com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier -> bI:
    com.actionbarsherlock.internal.widget.IcsAdapterView this$0 -> a
    void run() -> run
com.actionbarsherlock.internal.widget.IcsColorDrawable -> bJ:
    int color -> a
    android.graphics.Paint paint -> b
    void draw(android.graphics.Canvas) -> draw
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
com.actionbarsherlock.internal.widget.IcsLinearLayout -> com.actionbarsherlock.internal.widget.IcsLinearLayout:
    int[] R_styleable_LinearLayout -> a
    android.graphics.drawable.Drawable mDivider -> b
    int mDividerWidth -> c
    int mDividerHeight -> d
    int mShowDividers -> e
    int mDividerPadding -> f
    boolean mUseLargestChild -> g
    void setShowDividers(int) -> setShowDividers
    int getShowDividers() -> getShowDividers
    void setDividerDrawable(android.graphics.drawable.Drawable) -> setDividerDrawable
    void setDividerPadding(int) -> setDividerPadding
    int getDividerPadding() -> getDividerPadding
    void measureChildWithMargins(android.view.View,int,int,int,int) -> measureChildWithMargins
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawHorizontalDivider(android.graphics.Canvas,int) -> a
    void drawVerticalDivider(android.graphics.Canvas,int) -> b
    boolean hasDividerBeforeChildAt(int) -> a
    boolean isMeasureWithLargestChildEnabled() -> isMeasureWithLargestChildEnabled
    void setMeasureWithLargestChildEnabled(boolean) -> setMeasureWithLargestChildEnabled
    void onMeasure(int,int) -> onMeasure
com.actionbarsherlock.internal.widget.IcsListPopupWindow -> com.actionbarsherlock.internal.widget.IcsListPopupWindow:
    android.content.Context mContext -> f
    android.widget.PopupWindow mPopup -> g
    android.widget.ListAdapter mAdapter -> h
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView mDropDownList -> a
    int mDropDownHeight -> i
    int mDropDownWidth -> j
    int mDropDownHorizontalOffset -> b
    int mDropDownVerticalOffset -> k
    boolean mDropDownVerticalOffsetSet -> l
    int mListItemExpandMaximum -> m
    int mPromptPosition -> c
    android.database.DataSetObserver mObserver -> n
    android.view.View mDropDownAnchorView -> d
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> e
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable mResizePopupRunnable -> o
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor mTouchInterceptor -> p
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener mScrollListener -> q
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider mHideSelector -> r
    android.os.Handler mHandler -> s
    android.graphics.Rect mTempRect -> t
    boolean mModal -> u
    void setAdapter(android.widget.ListAdapter) -> a
    void setModal(boolean) -> a
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> a
    void setAnchorView(android.view.View) -> a
    void setHorizontalOffset(int) -> a
    void setVerticalOffset(int) -> b
    void setContentWidth(int) -> c
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> a
    void show() -> a
    void dismiss() -> b
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void setInputMethodMode(int) -> d
    void clearListSelection() -> c
    boolean isShowing() -> d
    boolean isInputMethodNotNeeded() -> f
    android.widget.ListView getListView() -> e
    int measureHeightOfChildren(int,int,int,int,int) -> a
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView access$0(com.actionbarsherlock.internal.widget.IcsListPopupWindow) -> a
    int access$1(com.actionbarsherlock.internal.widget.IcsListPopupWindow) -> b
    android.widget.PopupWindow access$2(com.actionbarsherlock.internal.widget.IcsListPopupWindow) -> c
    android.os.Handler access$3(com.actionbarsherlock.internal.widget.IcsListPopupWindow) -> d
    com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable access$4(com.actionbarsherlock.internal.widget.IcsListPopupWindow) -> e
    boolean access$5(com.actionbarsherlock.internal.widget.IcsListPopupWindow) -> f
com.actionbarsherlock.internal.widget.IcsListPopupWindow$1 -> bK:
    com.actionbarsherlock.internal.widget.IcsListPopupWindow this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView -> bL:
    boolean mListSelectionHidden -> a
    boolean mHijackFocus -> b
    boolean isInTouchMode() -> isInTouchMode
    boolean hasWindowFocus() -> hasWindowFocus
    boolean isFocused() -> isFocused
    boolean hasFocus() -> hasFocus
    void access$0(com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView,boolean) -> a
com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider -> bM:
    com.actionbarsherlock.internal.widget.IcsListPopupWindow this$0 -> a
    void run() -> run
com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver -> bN:
    com.actionbarsherlock.internal.widget.IcsListPopupWindow this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener -> bO:
    com.actionbarsherlock.internal.widget.IcsListPopupWindow this$0 -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor -> bP:
    com.actionbarsherlock.internal.widget.IcsListPopupWindow this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable -> bQ:
    com.actionbarsherlock.internal.widget.IcsListPopupWindow this$0 -> a
    void run() -> run
com.actionbarsherlock.internal.widget.IcsProgressBar -> com.actionbarsherlock.internal.widget.IcsProgressBar:
    boolean IS_HONEYCOMB -> a
    int[] ProgressBar -> b
    int mMinWidth -> c
    int mMaxWidth -> d
    int mMinHeight -> e
    int mMaxHeight -> f
    int mProgress -> g
    int mSecondaryProgress -> h
    int mMax -> i
    int mBehavior -> j
    int mDuration -> k
    boolean mIndeterminate -> l
    boolean mOnlyIndeterminate -> m
    android.view.animation.Transformation mTransformation -> n
    android.view.animation.AlphaAnimation mAnimation -> o
    android.graphics.drawable.Drawable mIndeterminateDrawable -> p
    int mIndeterminateRealLeft -> q
    int mIndeterminateRealTop -> r
    android.graphics.drawable.Drawable mProgressDrawable -> s
    android.graphics.drawable.Drawable mCurrentDrawable -> t
    android.graphics.Bitmap mSampleTile -> u
    boolean mNoInvalidate -> v
    android.view.animation.Interpolator mInterpolator -> w
    com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable mRefreshProgressRunnable -> x
    long mUiThreadId -> y
    boolean mShouldStartAnimationDrawable -> z
    long mLastDrawTime -> A
    boolean mInDrawing -> B
    int mAnimationResolution -> C
    android.view.accessibility.AccessibilityManager mAccessibilityManager -> D
    com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender mAccessibilityEventSender -> E
    android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean) -> a
    android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable) -> a
    void setIndeterminate(boolean) -> setIndeterminate
    void setIndeterminateDrawable(android.graphics.drawable.Drawable) -> setIndeterminateDrawable
    void setProgressDrawable(android.graphics.drawable.Drawable) -> setProgressDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void jumpDrawablesToCurrentState() -> jumpDrawablesToCurrentState
    void postInvalidate() -> postInvalidate
    void doRefreshProgress(int,int,boolean,boolean) -> a
    void refreshProgress(int,int,boolean) -> a
    void setProgress(int) -> setProgress
    void setProgress(int,boolean) -> a
    void setSecondaryProgress(int) -> setSecondaryProgress
    void setMax(int) -> setMax
    void startAnimation() -> a
    void stopAnimation() -> b
    void setInterpolator(android.content.Context,int) -> setInterpolator
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    void setVisibility(int) -> setVisibility
    void onVisibilityChanged(android.view.View,int) -> onVisibilityChanged
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void updateDrawableBounds(int,int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void drawableStateChanged() -> drawableStateChanged
    void updateDrawableState() -> c
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void access$0(com.actionbarsherlock.internal.widget.IcsProgressBar,int,int,boolean,boolean) -> a
    void access$1(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable) -> a
com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender -> bR:
    com.actionbarsherlock.internal.widget.IcsProgressBar this$0 -> a
    void run() -> run
com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable -> bS:
    int mId -> a
    int mProgress -> b
    boolean mFromUser -> c
    com.actionbarsherlock.internal.widget.IcsProgressBar this$0 -> d
    void run() -> run
    void setup(int,int,boolean) -> a
com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState -> bT:
    int progress -> a
    int secondaryProgress -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1 -> bU:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.actionbarsherlock.internal.widget.IcsSpinner -> com.actionbarsherlock.internal.widget.IcsSpinner:
    com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup mPopup -> v
    com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter mTempAdapter -> w
    int mDropDownWidth -> u
    int mGravity -> x
    boolean mDisableChildrenWhenDisabled -> y
    android.graphics.Rect mTempRect -> z
    void setEnabled(boolean) -> setEnabled
    void setGravity(int) -> setGravity
    void setAdapter(android.widget.SpinnerAdapter) -> setAdapter
    int getBaseline() -> getBaseline
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void layout$2563266() -> b
    android.view.View makeAndAddView(int) -> c
    void setUpChild(android.view.View) -> a
    boolean performClick() -> performClick
    void onClick(android.content.DialogInterface,int) -> onClick
    void setPrompt(java.lang.CharSequence) -> setPrompt
    void setPromptId(int) -> setPromptId
    int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
    android.graphics.Rect access$0(com.actionbarsherlock.internal.widget.IcsSpinner) -> a
com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter -> bV:
    android.widget.SpinnerAdapter mAdapter -> a
    android.widget.ListAdapter mListAdapter -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    boolean hasStableIds() -> hasStableIds
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    boolean isEmpty() -> isEmpty
com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup -> bW:
    android.widget.ListAdapter mAdapter -> f
    com.actionbarsherlock.internal.widget.IcsSpinner this$0 -> g
    void setAdapter(android.widget.ListAdapter) -> a
    void show() -> a
    com.actionbarsherlock.internal.widget.IcsSpinner access$0(com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup) -> a
com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup$1 -> bX:
    com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup -> bY:
    void setAdapter(android.widget.ListAdapter) -> a
    void show() -> a
    void dismiss() -> b
    boolean isShowing() -> d
com.actionbarsherlock.internal.widget.ScrollingTabContainerView -> com.actionbarsherlock.internal.widget.ScrollingTabContainerView:
    java.lang.Runnable mTabSelector -> a
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener mTabClickListener -> c
    com.actionbarsherlock.internal.widget.IcsLinearLayout mTabLayout -> d
    com.actionbarsherlock.internal.widget.IcsSpinner mTabSpinner -> e
    boolean mAllowCollapse -> f
    android.view.LayoutInflater mInflater -> g
    int mMaxTabWidth -> b
    int mContentHeight -> h
    int mSelectedTabIndex -> i
    void onMeasure(int,int) -> onMeasure
    boolean isCollapsed() -> a
    void setAllowCollapse(boolean) -> setAllowCollapse
    boolean performExpand() -> b
    void setTabSelected(int) -> setTabSelected
    void setContentHeight(int) -> setContentHeight
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void animateToTab(int) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean) -> b
    void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean) -> a
    void updateTab(int) -> b
    void onItemSelected$4cda22f6(android.view.View,int,long) -> a
    com.actionbarsherlock.internal.widget.IcsLinearLayout access$0(com.actionbarsherlock.internal.widget.ScrollingTabContainerView) -> a
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView access$1(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean) -> a
com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1 -> bZ:
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView this$0 -> a
    android.view.View val$tabView -> b
    void run() -> run
com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter -> ca:
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener -> cb:
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView this$0 -> a
    void onClick(android.view.View) -> onClick
com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView -> com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView:
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView mParent -> a
    com.actionbarsherlock.app.ActionBar$Tab mTab -> b
    com.actionbarsherlock.internal.widget.CapitalizingTextView mTextView -> c
    android.widget.ImageView mIconView -> d
    android.view.View mCustomView -> e
    void init(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean) -> a
    void bindTab(com.actionbarsherlock.app.ActionBar$Tab) -> a
    void onMeasure(int,int) -> onMeasure
    void update() -> a
    com.actionbarsherlock.app.ActionBar$Tab getTab() -> b
com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener -> cc:
    boolean mCanceled -> a
    com.actionbarsherlock.internal.widget.ScrollingTabContainerView this$0 -> b
com.actionbarsherlock.view.ActionProvider$SubUiVisibilityListener -> cd:
com.actionbarsherlock.view.CollapsibleActionView -> ce:
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
com.actionbarsherlock.view.Menu -> cf:
    com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence) -> a
    com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> b
    void setGroupCheckable(int,boolean,boolean) -> a
    boolean hasVisibleItems() -> c
    com.actionbarsherlock.view.MenuItem findItem(int) -> a
com.actionbarsherlock.view.MenuInflater -> cg:
    java.lang.Class[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE -> a
    java.lang.Class[] ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE -> b
    java.lang.Object[] mActionViewConstructorArguments -> c
    java.lang.Object[] mActionProviderConstructorArguments -> d
    android.content.Context mContext -> e
    java.lang.Object mRealOwner -> f
    void inflate(int,com.actionbarsherlock.view.Menu) -> a
    void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu) -> a
    android.content.Context access$0(com.actionbarsherlock.view.MenuInflater) -> a
    java.lang.Object access$3(com.actionbarsherlock.view.MenuInflater) -> b
    java.lang.Class[] access$4() -> a
    java.lang.Object[] access$5(com.actionbarsherlock.view.MenuInflater) -> c
com.actionbarsherlock.view.MenuInflater$InflatedOnMenuItemClickListener -> ch:
    java.lang.Class[] PARAM_TYPES -> a
    java.lang.Object mRealOwner -> b
    java.lang.reflect.Method mMethod -> c
    boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem) -> a
com.actionbarsherlock.view.MenuInflater$MenuState -> ci:
    com.actionbarsherlock.view.Menu menu -> a
    int groupId -> b
    int groupCategory -> c
    int groupOrder -> d
    int groupCheckable -> e
    boolean groupVisible -> f
    boolean groupEnabled -> g
    boolean itemAdded -> h
    int itemId -> i
    int itemCategoryOrder -> j
    java.lang.CharSequence itemTitle -> k
    java.lang.CharSequence itemTitleCondensed -> l
    int itemIconResId -> m
    char itemAlphabeticShortcut -> n
    char itemNumericShortcut -> o
    int itemCheckable -> p
    boolean itemChecked -> q
    boolean itemVisible -> r
    boolean itemEnabled -> s
    int itemShowAsAction -> t
    int itemActionViewLayout -> u
    java.lang.String itemActionViewClassName -> v
    java.lang.String itemActionProviderClassName -> w
    java.lang.String itemListenerMethodName -> x
    android.support.v4.view.PagerAdapter itemActionProvider$1885b2c9 -> y
    com.actionbarsherlock.view.MenuInflater this$0 -> z
    void resetGroup() -> a
    char getShortcut(java.lang.String) -> a
    void setItem(com.actionbarsherlock.view.MenuItem) -> a
    java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
com.actionbarsherlock.view.MenuItem -> cj:
    int getItemId() -> c
    int getGroupId() -> a
    com.actionbarsherlock.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> b
    com.actionbarsherlock.view.MenuItem setIcon(int) -> a
    android.graphics.drawable.Drawable getIcon() -> b
    com.actionbarsherlock.view.MenuItem setNumericShortcut(char) -> b
    com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char) -> a
    com.actionbarsherlock.view.MenuItem setCheckable(boolean) -> a
    com.actionbarsherlock.view.MenuItem setChecked(boolean) -> b
    com.actionbarsherlock.view.MenuItem setVisible(boolean) -> d
    boolean isVisible() -> f
    com.actionbarsherlock.view.MenuItem setEnabled(boolean) -> c
    boolean hasSubMenu() -> e
    com.actionbarsherlock.view.SubMenu getSubMenu() -> d
    com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener) -> a
    void setShowAsAction(int) -> b
    com.actionbarsherlock.view.MenuItem setActionView(android.view.View) -> a
    com.actionbarsherlock.view.MenuItem setActionView(int) -> c
    android.view.View getActionView() -> g
    com.actionbarsherlock.view.MenuItem setActionProvider$5b10848a(android.support.v4.view.PagerAdapter) -> a
    android.support.v4.view.PagerAdapter getActionProvider$7980f728() -> h
    boolean expandActionView() -> i
    boolean isActionViewExpanded() -> j
com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener -> ck:
    boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem) -> a
com.actionbarsherlock.view.SubMenu -> cl:
    com.actionbarsherlock.view.MenuItem getItem() -> w
com.actionbarsherlock.view.Window -> cm:
com.actionbarsherlock.view.Window$Callback -> cn:
    boolean onMenuItemSelected$7350e552(com.actionbarsherlock.view.MenuItem) -> c
com.actionbarsherlock.widget.ActivityChooserModel -> co:
    java.lang.String LOG_TAG -> a
    java.lang.Object mInstanceLock -> b
    java.util.List mActivites -> c
    java.util.List mHistoricalRecords -> d
    boolean mHistoricalRecordsChanged -> e
    java.util.concurrent.Executor SERIAL_EXECUTOR -> f
    int getActivityCount() -> a
    android.content.pm.ResolveInfo getActivity(int) -> a
    int getActivityIndex(android.content.pm.ResolveInfo) -> a
    android.content.Intent chooseActivity(int) -> b
    android.content.pm.ResolveInfo getDefaultActivity() -> b
    void setDefaultActivity(int) -> c
    int getHistorySize() -> c
    boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord) -> a
com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo -> cp:
    android.content.pm.ResolveInfo resolveInfo -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord -> cq:
    android.content.ComponentName activity -> a
    long time -> b
    float weight -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.actionbarsherlock.widget.ActivityChooserView -> com.actionbarsherlock.widget.ActivityChooserView:
    com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter mAdapter -> a
    com.actionbarsherlock.widget.ActivityChooserView$Callbacks mCallbacks -> b
    com.actionbarsherlock.internal.widget.IcsLinearLayout mActivityChooserContent -> c
    android.graphics.drawable.Drawable mActivityChooserContentBackground -> d
    android.widget.FrameLayout mExpandActivityOverflowButton -> e
    android.widget.ImageView mExpandActivityOverflowButtonImage -> f
    android.widget.FrameLayout mDefaultActivityButton -> g
    android.widget.ImageView mDefaultActivityButtonImage -> h
    int mListPopupMaxWidth -> i
    android.database.DataSetObserver mModelDataSetOberver -> j
    android.view.ViewTreeObserver$OnGlobalLayoutListener mOnGlobalLayoutListener -> k
    com.actionbarsherlock.internal.widget.IcsListPopupWindow mListPopupWindow -> l
    boolean mIsSelectingDefaultActivity -> m
    int mInitialActivityCount -> n
    android.content.Context mContext -> o
    boolean IS_HONEYCOMB -> p
    void showPopupUnchecked(int) -> a
    boolean dismissPopup() -> a
    boolean isShowingPopup() -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow() -> d
    com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$0(com.actionbarsherlock.widget.ActivityChooserView) -> a
    com.actionbarsherlock.internal.widget.IcsListPopupWindow access$1(com.actionbarsherlock.widget.ActivityChooserView) -> b
    void access$2(com.actionbarsherlock.widget.ActivityChooserView,int) -> a
    boolean access$3(com.actionbarsherlock.widget.ActivityChooserView) -> c
    android.content.Context access$4(com.actionbarsherlock.widget.ActivityChooserView) -> d
    android.widget.FrameLayout access$5(com.actionbarsherlock.widget.ActivityChooserView) -> e
    android.widget.FrameLayout access$6(com.actionbarsherlock.widget.ActivityChooserView) -> f
    void access$7(com.actionbarsherlock.widget.ActivityChooserView,boolean) -> a
    int access$8(com.actionbarsherlock.widget.ActivityChooserView) -> g
    android.widget.PopupWindow$OnDismissListener access$9(com.actionbarsherlock.widget.ActivityChooserView) -> h
    boolean access$11() -> c
    void access$12(com.actionbarsherlock.widget.ActivityChooserView) -> i
com.actionbarsherlock.widget.ActivityChooserView$1 -> cr:
    com.actionbarsherlock.widget.ActivityChooserView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.actionbarsherlock.widget.ActivityChooserView$2 -> cs:
    com.actionbarsherlock.widget.ActivityChooserView this$0 -> a
    void onGlobalLayout() -> onGlobalLayout
com.actionbarsherlock.widget.ActivityChooserView$3 -> ct:
    com.actionbarsherlock.widget.ActivityChooserView this$0 -> a
    void onChanged() -> onChanged
com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter -> cu:
    int mMaxActivityCount -> a
    boolean mShowDefaultActivity -> b
    boolean mHighlightDefaultActivity -> c
    boolean mShowFooterView -> d
    com.actionbarsherlock.widget.ActivityChooserView this$0 -> e
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int measureContentWidth() -> a
    void setMaxActivityCount(int) -> a
    android.content.pm.ResolveInfo getDefaultActivity() -> b
    void setShowFooterView(boolean) -> a
    int getActivityCount() -> c
    int getHistorySize() -> d
    int getMaxActivityCount() -> e
    com.actionbarsherlock.widget.ActivityChooserModel getDataModel() -> f
    void setShowDefaultActivity(boolean,boolean) -> a
    boolean getShowDefaultActivity() -> g
com.actionbarsherlock.widget.ActivityChooserView$Callbacks -> cv:
    com.actionbarsherlock.widget.ActivityChooserView this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onClick(android.view.View) -> onClick
    boolean onLongClick(android.view.View) -> onLongClick
    void onDismiss() -> onDismiss
com.actionbarsherlock.widget.SearchView -> com.actionbarsherlock.widget.SearchView:
    android.support.v4.app.FragmentManager$OnBackStackChangedListener mOnQueryChangeListener$6047a284 -> a
    android.support.v4.app.FragmentManager$OnBackStackChangedListener mOnCloseListener$4ab271f9 -> b
    android.view.View$OnFocusChangeListener mOnQueryTextFocusChangeListener -> c
    android.support.v4.app.FragmentManager$OnBackStackChangedListener mOnSuggestionListener$50a7db99 -> d
    android.view.View$OnClickListener mOnSearchClickListener -> e
    boolean mIconifiedByDefault -> f
    boolean mIconified -> g
    android.support.v4.widget.CursorAdapter mSuggestionsAdapter -> h
    android.view.View mSearchButton -> i
    android.view.View mSubmitButton -> j
    android.view.View mSearchPlate -> k
    android.view.View mSubmitArea -> l
    android.widget.ImageView mCloseButton -> m
    android.view.View mSearchEditFrame -> n
    android.view.View mVoiceButton -> o
    com.actionbarsherlock.widget.SearchView$SearchAutoComplete mQueryTextView -> p
    android.view.View mDropDownAnchor -> q
    android.widget.ImageView mSearchHintIcon -> r
    boolean mSubmitButtonEnabled -> s
    java.lang.CharSequence mQueryHint -> t
    boolean mQueryRefinement -> u
    boolean mClearingFocus -> v
    int mMaxWidth -> w
    boolean mVoiceButtonEnabled -> x
    java.lang.CharSequence mOldQueryText -> y
    java.lang.CharSequence mUserQuery -> z
    boolean mExpandedInActionView -> A
    int mCollapsedImeOptions -> B
    android.app.SearchableInfo mSearchable -> C
    android.os.Bundle mAppSearchData -> D
    java.lang.Runnable mShowImeRunnable -> E
    java.lang.Runnable mUpdateDrawableStateRunnable -> F
    java.lang.Runnable mReleaseCursorRunnable -> G
    android.content.Intent mVoiceWebSearchIntent -> H
    android.content.Intent mVoiceAppSearchIntent -> I
    java.util.WeakHashMap mOutsideDrawablesCache -> J
    android.view.View$OnClickListener mOnClickListener -> K
    android.view.View$OnKeyListener mTextKeyListener -> L
    android.widget.TextView$OnEditorActionListener mOnEditorActionListener -> M
    android.widget.AdapterView$OnItemClickListener mOnItemClickListener -> N
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> O
    android.text.TextWatcher mTextWatcher -> P
    void setSearchableInfo(android.app.SearchableInfo) -> setSearchableInfo
    void setAppSearchData(android.os.Bundle) -> setAppSearchData
    void setImeOptions(int) -> setImeOptions
    void setInputType(int) -> setInputType
    boolean requestFocus(int,android.graphics.Rect) -> requestFocus
    void clearFocus() -> clearFocus
    void setOnQueryTextListener$523f8ea1(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> setOnQueryTextListener$523f8ea1
    void setOnCloseListener$5875a3de(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> setOnCloseListener$5875a3de
    void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener) -> setOnQueryTextFocusChangeListener
    void setOnSuggestionListener$13f5e132(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> setOnSuggestionListener$13f5e132
    void setOnSearchClickListener(android.view.View$OnClickListener) -> setOnSearchClickListener
    void setQuery(java.lang.CharSequence,boolean) -> setQuery
    void setQueryHint(java.lang.CharSequence) -> setQueryHint
    void setIconifiedByDefault(boolean) -> setIconifiedByDefault
    void setIconified(boolean) -> setIconified
    void setSubmitButtonEnabled(boolean) -> setSubmitButtonEnabled
    void setQueryRefinementEnabled(boolean) -> setQueryRefinementEnabled
    void setSuggestionsAdapter(android.support.v4.widget.CursorAdapter) -> setSuggestionsAdapter
    void setMaxWidth(int) -> setMaxWidth
    void onMeasure(int,int) -> onMeasure
    int getPreferredWidth() -> d
    void updateViewsVisibility(boolean) -> a
    boolean isSubmitAreaEnabled() -> e
    void updateSubmitButton(boolean) -> b
    void updateSubmitArea() -> f
    void updateCloseButton() -> g
    void postUpdateFocusedState() -> h
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setImeVisibility(boolean) -> c
    void onQueryRefine(java.lang.CharSequence) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onSuggestionsKey$33ade166(int,android.view.KeyEvent) -> a
    java.lang.CharSequence getDecoratedHint(java.lang.CharSequence) -> b
    void updateQueryHint() -> i
    void updateVoiceButton(boolean) -> d
    void onSubmitQuery() -> j
    void onCloseClicked() -> k
    void onSearchClicked() -> l
    void onTextFocusChanged() -> c
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onActionViewCollapsed() -> b
    void onActionViewExpanded() -> a
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    boolean onItemClicked$3e6d8123(int) -> a
    void launchIntent(android.content.Intent) -> a
    void setQuery(java.lang.CharSequence) -> c
    void launchQuerySearch(int,java.lang.String,java.lang.String) -> a
    android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String) -> a
    android.content.Intent createIntentFromSuggestion(android.database.Cursor,int,java.lang.String) -> a
    void forceSuggestionQuery() -> m
    boolean isLandscapeMode(android.content.Context) -> a
    void ensureImeVisible(android.widget.AutoCompleteTextView,boolean) -> b
    void access$0(android.view.View,android.view.inputmethod.InputMethodManager,int) -> a
    void access$1(com.actionbarsherlock.widget.SearchView) -> a
    android.support.v4.widget.CursorAdapter access$2(com.actionbarsherlock.widget.SearchView) -> b
    android.view.View access$3(com.actionbarsherlock.widget.SearchView) -> c
    void access$4(com.actionbarsherlock.widget.SearchView) -> d
    android.widget.ImageView access$5(com.actionbarsherlock.widget.SearchView) -> e
    void access$6(com.actionbarsherlock.widget.SearchView) -> f
    android.view.View access$7(com.actionbarsherlock.widget.SearchView) -> g
    void access$8(com.actionbarsherlock.widget.SearchView) -> h
    android.view.View access$9(com.actionbarsherlock.widget.SearchView) -> i
    void access$10(com.actionbarsherlock.widget.SearchView) -> j
    com.actionbarsherlock.widget.SearchView$SearchAutoComplete access$11(com.actionbarsherlock.widget.SearchView) -> k
    void access$12(com.actionbarsherlock.widget.SearchView) -> l
    android.app.SearchableInfo access$13(com.actionbarsherlock.widget.SearchView) -> m
    boolean access$14(com.actionbarsherlock.widget.SearchView,android.view.View,int,android.view.KeyEvent) -> a
    void access$15(com.actionbarsherlock.widget.SearchView,int,java.lang.String,java.lang.String) -> a
    boolean access$16(com.actionbarsherlock.widget.SearchView,int,int,java.lang.String) -> a
    boolean access$17(com.actionbarsherlock.widget.SearchView,int) -> a
    void access$18(com.actionbarsherlock.widget.SearchView,java.lang.CharSequence) -> a
    void access$19(android.widget.AutoCompleteTextView,boolean) -> a
    void access$20(com.actionbarsherlock.widget.SearchView,boolean) -> a
    android.view.View$OnFocusChangeListener access$21(com.actionbarsherlock.widget.SearchView) -> n
    void access$22(com.actionbarsherlock.widget.SearchView) -> o
com.actionbarsherlock.widget.SearchView$1 -> cw:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void run() -> run
com.actionbarsherlock.widget.SearchView$10 -> cx:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.actionbarsherlock.widget.SearchView$11 -> cy:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int) -> onLayoutChange
com.actionbarsherlock.widget.SearchView$12 -> cz:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void onGlobalLayout() -> onGlobalLayout
com.actionbarsherlock.widget.SearchView$2 -> cA:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void run() -> run
com.actionbarsherlock.widget.SearchView$3 -> cB:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void run() -> run
com.actionbarsherlock.widget.SearchView$4 -> cC:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void onClick(android.view.View) -> onClick
com.actionbarsherlock.widget.SearchView$5 -> cD:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.actionbarsherlock.widget.SearchView$6 -> cE:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.actionbarsherlock.widget.SearchView$7 -> cF:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.actionbarsherlock.widget.SearchView$8 -> cG:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.actionbarsherlock.widget.SearchView$9 -> cH:
    com.actionbarsherlock.widget.SearchView this$0 -> a
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.actionbarsherlock.widget.SearchView$SearchAutoComplete -> com.actionbarsherlock.widget.SearchView$SearchAutoComplete:
    int mThreshold -> a
    com.actionbarsherlock.widget.SearchView mSearchView -> b
    void setSearchView(com.actionbarsherlock.widget.SearchView) -> a
    void setThreshold(int) -> setThreshold
    void replaceText(java.lang.CharSequence) -> replaceText
    void performCompletion() -> performCompletion
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    boolean enoughToFilter() -> enoughToFilter
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
    boolean access$0(com.actionbarsherlock.widget.SearchView$SearchAutoComplete) -> a
com.actionbarsherlock.widget.SuggestionsAdapter -> cI:
    com.actionbarsherlock.widget.SearchView mSearchView -> d
    android.content.Context mProviderContext -> e
    java.util.WeakHashMap mOutsideDrawablesCache -> f
    boolean mClosed -> g
    int mQueryRefinement -> h
    android.content.res.ColorStateList mUrlColor -> i
    int mText1Col -> j
    int mText2Col -> k
    int mText2UrlCol -> l
    int mIconName1Col -> m
    int mIconName2Col -> n
    int mFlagsCol -> o
    void setQueryRefinement(int) -> a
    boolean hasStableIds() -> hasStableIds
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    void notifyDataSetInvalidated() -> notifyDataSetInvalidated
    void updateSpinnerState(android.database.Cursor) -> c
    void changeCursor(android.database.Cursor) -> a
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void bindView$4693bf34(android.view.View,android.database.Cursor) -> a
    void onClick(android.view.View) -> onClick
    void setViewText(android.widget.TextView,java.lang.CharSequence) -> a
    void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String) -> a
    android.graphics.drawable.Drawable getDrawable(android.net.Uri) -> a
    android.graphics.drawable.Drawable getTheDrawable(android.net.Uri) -> b
    android.graphics.drawable.Drawable checkIconCache(java.lang.String) -> b
    void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable) -> a
    java.lang.String getColumnString(android.database.Cursor,java.lang.String) -> a
    java.lang.String getStringOrNull(android.database.Cursor,int) -> a
com.actionbarsherlock.widget.SuggestionsAdapter$ChildViewCache -> cJ:
    android.widget.TextView mText1 -> a
    android.widget.TextView mText2 -> b
    android.widget.ImageView mIcon1 -> c
    android.widget.ImageView mIcon2 -> d
    android.widget.ImageView mIconRefine -> e
com.corvideon.lessdroidbasic.AppHolder -> cK:
    com.corvideon.lessdroidbasic.AppInfo appInfo -> a
    android.graphics.drawable.Drawable icon -> b
com.corvideon.lessdroidbasic.AppInfo -> cL:
    java.lang.String title -> a
    java.lang.String className -> b
    java.lang.String isFavourite -> c
    boolean isSelected() -> a
    void setSelected(boolean) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.corvideon.lessdroidbasic.AppInstallListener -> com.corvideon.lessdroidbasic.AppInstallListener:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.corvideon.lessdroidbasic.AppListingAdapter -> cM:
    android.view.LayoutInflater inflater -> a
    android.content.Context context -> b
    java.util.List apps -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setListItems(java.util.Map) -> a
com.corvideon.lessdroidbasic.AppListingAdapter$1 -> cN:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.corvideon.lessdroidbasic.AppListingAdapter$AppViewHolder -> cO:
    android.widget.TextView appName -> a
    android.widget.ImageView icon -> b
com.corvideon.lessdroidbasic.AppUninstallListener -> com.corvideon.lessdroidbasic.AppUninstallListener:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.corvideon.lessdroidbasic.FaveAppsActivity -> com.corvideon.lessdroidbasic.FaveAppsActivity:
    com.corvideon.lessdroidbasic.FaveAppsActivity$MyFaveAppsAdapter dataAdapter -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
com.corvideon.lessdroidbasic.FaveAppsActivity$1 -> cP:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.corvideon.lessdroidbasic.FaveAppsActivity$2 -> cQ:
    com.corvideon.lessdroidbasic.FaveAppsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.FaveAppsActivity$MyFaveAppsAdapter -> cR:
    java.util.ArrayList appList -> a
    com.corvideon.lessdroidbasic.FaveAppsActivity this$0 -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.ArrayList access$0(com.corvideon.lessdroidbasic.FaveAppsActivity$MyFaveAppsAdapter) -> a
com.corvideon.lessdroidbasic.FaveAppsActivity$MyFaveAppsAdapter$1 -> cS:
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.FaveAppsActivity$MyFaveAppsAdapter$ViewHolder -> cT:
    android.widget.CheckBox name -> a
com.corvideon.lessdroidbasic.FirstRunTask -> cU:
    android.app.ProgressDialog dialog -> a
    android.content.Context context -> b
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground$7273979() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.corvideon.lessdroidbasic.FragmentsTabApps -> cV:
    android.widget.ListView listApps -> J
    com.corvideon.lessdroidbasic.AppListingAdapter adapter -> K
    void onCreate(android.os.Bundle) -> a
    void onResume() -> l
com.corvideon.lessdroidbasic.FragmentsTabApps$1 -> cW:
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.corvideon.lessdroidbasic.FragmentsTabHome -> cX:
    android.widget.Button phone_button -> J
    android.widget.Button contact_button -> K
    android.widget.Button messaging_button -> L
    android.widget.Button camera_button -> M
    android.widget.Button gallery_button -> N
    void onCreate(android.os.Bundle) -> a
    void onResume() -> l
com.corvideon.lessdroidbasic.FragmentsTabHome$1 -> cY:
    com.corvideon.lessdroidbasic.FragmentsTabHome this$0 -> a
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.FragmentsTabHome$2 -> cZ:
    com.corvideon.lessdroidbasic.FragmentsTabHome this$0 -> a
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.FragmentsTabHome$3 -> da:
    com.corvideon.lessdroidbasic.FragmentsTabHome this$0 -> a
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.FragmentsTabHome$4 -> db:
    com.corvideon.lessdroidbasic.FragmentsTabHome this$0 -> a
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.FragmentsTabHome$5 -> dc:
    com.corvideon.lessdroidbasic.FragmentsTabHome this$0 -> a
    void onClick(android.view.View) -> onClick
com.corvideon.lessdroidbasic.HelpActivity -> com.corvideon.lessdroidbasic.HelpActivity:
    android.webkit.WebView webViewHelp -> a
    void onCreate(android.os.Bundle) -> onCreate
com.corvideon.lessdroidbasic.LessDroidApp -> com.corvideon.lessdroidbasic.LessDroidApp:
    com.corvideon.lessdroidbasic.LessDroidApp instance -> b
    android.content.Context context -> c
    com.corvideon.lessdroidbasic.LessDroidApp$AppInfoManager appManager -> d
    void onCreate() -> onCreate
    com.corvideon.lessdroidbasic.LessDroidApp getDefault() -> a
    android.content.Context getContext() -> b
    com.corvideon.lessdroidbasic.LessDroidApp$AppInfoManager getAppManager() -> c
    java.util.Map getApplications(boolean) -> a
    void getApplicationsOnStart() -> d
    void refreshApplications() -> e
    void saveApplications(java.util.ArrayList) -> a
    void launchApp(java.lang.String,android.content.Context) -> a
    void appInstalledEvent(java.lang.String) -> a
    void appUninstalledEvent(java.lang.String) -> b
    android.content.Context access$0() -> f
com.corvideon.lessdroidbasic.LessDroidApp$AppInfoManager -> dd:
    java.util.Map appList -> a
    java.util.Map getApplicationsFromDatabase() -> a
    android.graphics.drawable.Drawable getAppIcon(android.content.pm.ApplicationInfo) -> a
    boolean isLaunchableApp(java.lang.String) -> a
    com.corvideon.lessdroidbasic.AppInfo getAppInfoByTitle(java.lang.String) -> b
    void addAppToLessDroid(java.lang.String) -> c
    void removeAppFromLessDroid(java.lang.String) -> d
com.corvideon.lessdroidbasic.LessDroidPrefActivity -> com.corvideon.lessdroidbasic.LessDroidPrefActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.corvideon.lessdroidbasic.MainActivity -> com.corvideon.lessdroidbasic.MainActivity:
    java.lang.String defaultTitle -> e
    boolean disableRotation -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu) -> a
    boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setActionBarTitle() -> f
    void setRotation() -> g
    java.lang.String getVersionInfoString() -> h
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
com.corvideon.lessdroidbasic.MainActivity$1 -> de:
    com.corvideon.lessdroidbasic.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.corvideon.lessdroidbasic.MainActivity$2 -> df:
    void onClick(android.content.DialogInterface,int) -> onClick
com.corvideon.lessdroidbasic.MainActivity$3 -> dg:
    void onClick(android.content.DialogInterface,int) -> onClick
com.corvideon.lessdroidbasic.MainActivity$RefreshAppsTask -> dh:
    android.app.ProgressDialog dialog -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.corvideon.lessdroidbasic.StartAppTask -> di:
    android.app.ProgressDialog dialog -> a
    android.content.Context context -> b
    void onPreExecute() -> onPreExecute
    java.lang.Boolean doInBackground$7273979() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.google.inject.AbstractModule -> dj:
    com.google.inject.Binder binder -> a
    void configure(com.google.inject.Binder) -> a
    void configure() -> a
    com.google.inject.binder.ScopedBindingBuilder bind$632dde3e(java.lang.Class) -> a
    com.google.inject.Provider getProvider(java.lang.Class) -> b
    void bindListener(com.google.inject.matcher.Matcher,com.google.inject.spi.TypeListener) -> a
com.google.inject.Binder -> dk:
    void bindScope(java.lang.Class,com.google.inject.Scope) -> a
    com.google.inject.binder.ScopedBindingBuilder bind$5e9cddf6(com.google.inject.Key) -> a
    com.google.inject.binder.ScopedBindingBuilder bind$632dde3e(java.lang.Class) -> a
    com.google.inject.binder.AnnotatedConstantBindingBuilder bindConstant() -> a
    void requestInjection(java.lang.Object) -> a
    void requestStaticInjection(java.lang.Class[]) -> a
    void install(com.google.inject.Module) -> a
    void addError(java.lang.String,java.lang.Object[]) -> a
    void addError(com.google.inject.spi.Message) -> a
    com.google.inject.Provider getProvider(com.google.inject.Key) -> b
    com.google.inject.Provider getProvider(java.lang.Class) -> b
    void bindListener(com.google.inject.matcher.Matcher,com.google.inject.spi.TypeListener) -> a
    com.google.inject.Binder withSource(java.lang.Object) -> b
    com.google.inject.PrivateBinder newPrivateBinder() -> b
com.google.inject.Binding -> dl:
    com.google.inject.Key getKey() -> a
    com.google.inject.Provider getProvider() -> b
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
com.google.inject.BindingAnnotation -> dm:
com.google.inject.ConfigurationException -> dn:
    com.google.inject.internal.util.$ImmutableSet messages -> a
    java.lang.Object partialValue -> b
    com.google.inject.ConfigurationException withPartialValue(java.lang.Object) -> a
    java.util.Collection getErrorMessages() -> a
    java.lang.Object getPartialValue() -> b
    java.lang.String getMessage() -> getMessage
com.google.inject.CreationException -> do:
    com.google.inject.internal.util.$ImmutableSet messages -> a
    java.util.Collection getErrorMessages() -> a
    java.lang.String getMessage() -> getMessage
com.google.inject.Exposed -> dp:
com.google.inject.Guice -> dq:
    com.google.inject.Injector createInjector(com.google.inject.Stage,com.google.inject.Module[]) -> a
com.google.inject.ImplementedBy -> dr:
    java.lang.Class value() -> a
com.google.inject.Inject -> ds:
    boolean optional() -> a
com.google.inject.Injector -> dt:
    void injectMembers(java.lang.Object) -> a
    java.util.Map getBindings() -> a
    java.lang.Object getInstance(com.google.inject.Key) -> a
    java.lang.Object getInstance(java.lang.Class) -> a
com.google.inject.Key -> du:
    com.google.inject.Key$AnnotationStrategy annotationStrategy -> a
    com.google.inject.TypeLiteral typeLiteral -> b
    int hashCode -> c
    int computeHashCode() -> f
    com.google.inject.TypeLiteral getTypeLiteral() -> a
    java.lang.Class getAnnotationType() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.inject.Key get(java.lang.Class) -> a
    com.google.inject.Key get(java.lang.Class,java.lang.Class) -> a
    com.google.inject.Key get(java.lang.Class,java.lang.annotation.Annotation) -> a
    com.google.inject.Key get(java.lang.reflect.Type) -> a
    com.google.inject.Key get(com.google.inject.TypeLiteral) -> a
    com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.annotation.Annotation) -> a
    com.google.inject.Key ofType(java.lang.reflect.Type) -> b
    com.google.inject.Key ofType(com.google.inject.TypeLiteral) -> b
    boolean hasAttributes() -> d
    com.google.inject.Key withoutAttributes() -> e
    com.google.inject.Key$AnnotationStrategy strategyFor(java.lang.annotation.Annotation) -> a
    void ensureRetainedAtRuntime(java.lang.Class) -> b
    void ensureIsBindingAnnotation(java.lang.Class) -> c
com.google.inject.Key$AnnotationInstanceStrategy -> dv:
    java.lang.annotation.Annotation annotation -> a
    boolean hasAttributes() -> a
    com.google.inject.Key$AnnotationStrategy withoutAttributes() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    java.lang.Class getAnnotationType() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.Key$AnnotationStrategy -> dw:
    java.lang.annotation.Annotation getAnnotation() -> c
    java.lang.Class getAnnotationType() -> d
    boolean hasAttributes() -> a
    com.google.inject.Key$AnnotationStrategy withoutAttributes() -> b
com.google.inject.Key$AnnotationTypeStrategy -> dx:
    java.lang.Class annotationType -> a
    java.lang.annotation.Annotation annotation -> b
    boolean hasAttributes() -> a
    com.google.inject.Key$AnnotationStrategy withoutAttributes() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    java.lang.Class getAnnotationType() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.Key$NullAnnotationStrategy -> dy:
    com.google.inject.Key$NullAnnotationStrategy INSTANCE -> a
    boolean hasAttributes() -> a
    com.google.inject.Key$AnnotationStrategy withoutAttributes() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    java.lang.Class getAnnotationType() -> d
    java.lang.String toString() -> toString
com.google.inject.MembersInjector -> dz:
    void injectMembers(java.lang.Object) -> a
com.google.inject.Module -> dA:
    void configure(com.google.inject.Binder) -> a
com.google.inject.PrivateBinder -> dB:
    void expose(com.google.inject.Key) -> c
com.google.inject.PrivateModule -> dC:
com.google.inject.ProvidedBy -> dD:
    java.lang.Class value() -> a
com.google.inject.Provider -> dE:
    java.lang.Object get() -> a
com.google.inject.Provides -> dF:
com.google.inject.ProvisionException -> dG:
    com.google.inject.internal.util.$ImmutableSet messages -> a
    java.util.Collection getErrorMessages() -> a
    java.lang.String getMessage() -> getMessage
com.google.inject.Scope -> dH:
    com.google.inject.Provider scope(com.google.inject.Key,com.google.inject.Provider) -> a
com.google.inject.ScopeAnnotation -> dI:
com.google.inject.Scopes -> dJ:
    java.lang.Object NULL -> c
    com.google.inject.Scope SINGLETON -> a
    com.google.inject.Scope NO_SCOPE -> b
    java.lang.Object access$000() -> a
com.google.inject.Scopes$1 -> dK:
    com.google.inject.Provider scope(com.google.inject.Key,com.google.inject.Provider) -> a
    java.lang.String toString() -> toString
com.google.inject.Scopes$1$1 -> dL:
    java.lang.Object instance -> a
    com.google.inject.Provider val$creator -> b
    java.lang.Object get() -> a
    java.lang.String toString() -> toString
com.google.inject.Scopes$2 -> dM:
    com.google.inject.Provider scope(com.google.inject.Key,com.google.inject.Provider) -> a
    java.lang.String toString() -> toString
com.google.inject.Singleton -> dN:
com.google.inject.Stage -> dO:
    com.google.inject.Stage TOOL -> a
    com.google.inject.Stage DEVELOPMENT -> b
    com.google.inject.Stage PRODUCTION -> c
com.google.inject.TypeLiteral -> dP:
    java.lang.Class rawType -> a
    java.lang.reflect.Type type -> b
    int hashCode -> c
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> d
    com.google.inject.TypeLiteral fromSuperclassTypeParameter(java.lang.Class) -> a
    java.lang.Class getRawType() -> a
    java.lang.reflect.Type getType() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.inject.TypeLiteral get(java.lang.reflect.Type) -> a
    com.google.inject.TypeLiteral get(java.lang.Class) -> b
    java.util.List resolveAll(java.lang.reflect.Type[]) -> a
    com.google.inject.TypeLiteral resolve(java.lang.reflect.Type) -> b
    java.lang.reflect.Type resolveType(java.lang.reflect.Type) -> c
    com.google.inject.TypeLiteral getSupertype(java.lang.Class) -> c
    com.google.inject.TypeLiteral getFieldType(java.lang.reflect.Field) -> a
    java.util.List getParameterTypes(java.lang.reflect.Member) -> a
    com.google.inject.TypeLiteral getReturnType(java.lang.reflect.Method) -> a
com.google.inject.binder.AnnotatedConstantBindingBuilder -> dQ:
    com.google.inject.binder.ConstantBindingBuilder annotatedWith(java.lang.annotation.Annotation) -> a
com.google.inject.binder.ConstantBindingBuilder -> dR:
    void to(java.lang.String) -> a
com.google.inject.binder.ScopedBindingBuilder -> dS:
    void in(java.lang.Class) -> a
    void toInstance(java.lang.Object) -> a
    com.google.inject.binder.ScopedBindingBuilder toProvider(com.google.inject.Provider) -> a
    com.google.inject.binder.ScopedBindingBuilder toProvider(java.lang.Class) -> b
    com.google.inject.binder.ScopedBindingBuilder toProvider(com.google.inject.Key) -> a
com.google.inject.internal.AbstractBindingBuilder -> dT:
    com.google.inject.Key NULL_KEY -> a
    java.util.List elements -> d
    int position -> e
    com.google.inject.Binder binder -> b
    com.google.inject.internal.BindingImpl binding -> c
    com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl) -> a
    com.google.inject.internal.BindingImpl annotatedWithInternal(java.lang.annotation.Annotation) -> b
    void in(java.lang.Class) -> a
    void checkNotTargetted() -> a
com.google.inject.internal.AbstractBindingProcessor -> dU:
    java.util.Set FORBIDDEN_TYPES -> d
    com.google.inject.internal.ProcessedBindingData bindingData -> a
    com.google.inject.internal.UntargettedBindingImpl invalidBinding(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object) -> a
    void putBinding(com.google.inject.internal.BindingImpl) -> a
    void access$000(com.google.inject.internal.AbstractBindingProcessor,java.lang.Object,com.google.inject.Key) -> a
com.google.inject.internal.AbstractBindingProcessor$Processor -> dV:
    java.lang.Object source -> a
    com.google.inject.Key key -> b
    com.google.inject.internal.Scoping scoping -> c
    com.google.inject.internal.AbstractBindingProcessor this$0 -> d
    void prepareBinding() -> a
    void scheduleInitialization(com.google.inject.internal.BindingImpl) -> a
com.google.inject.internal.AbstractBindingProcessor$Processor$1 -> dW:
    com.google.inject.internal.BindingImpl val$binding -> a
    com.google.inject.internal.AbstractBindingProcessor$Processor this$1 -> b
    void run() -> run
com.google.inject.internal.AbstractProcessor -> dX:
    com.google.inject.internal.Errors errors -> b
    com.google.inject.internal.InjectorImpl injector -> c
    void process(java.lang.Iterable) -> a
    void process(com.google.inject.internal.InjectorImpl,java.util.List) -> a
    java.lang.Object visitOther(com.google.inject.spi.Element) -> a
com.google.inject.internal.Annotations -> dY:
    com.google.inject.internal.Annotations$AnnotationChecker scopeChecker -> a
    com.google.inject.internal.Annotations$AnnotationChecker bindingAnnotationChecker -> b
    boolean isMarker(java.lang.Class) -> a
    boolean isRetainedAtRuntime(java.lang.Class) -> b
    java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors,java.lang.Class) -> a
    java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors,java.lang.annotation.Annotation[]) -> a
    boolean isScopeAnnotation(java.lang.Class) -> c
    void checkForMisplacedScopeAnnotations(java.lang.Class,java.lang.Object,com.google.inject.internal.Errors) -> a
    com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.annotation.Annotation[],com.google.inject.internal.Errors) -> a
    java.lang.annotation.Annotation findBindingAnnotation(com.google.inject.internal.Errors,java.lang.reflect.Member,java.lang.annotation.Annotation[]) -> a
    boolean isBindingAnnotation(java.lang.Class) -> d
    java.lang.annotation.Annotation canonicalizeIfNamed(java.lang.annotation.Annotation) -> a
    java.lang.Class canonicalizeIfNamed(java.lang.Class) -> e
com.google.inject.internal.Annotations$AnnotationChecker -> dZ:
    java.util.Collection annotationTypes -> a
    com.google.inject.internal.util.$Function hasAnnotations -> b
    java.util.Map cache -> c
    boolean hasAnnotations(java.lang.Class) -> a
com.google.inject.internal.Annotations$AnnotationChecker$1 -> ea:
    com.google.inject.internal.Annotations$AnnotationChecker this$0 -> a
    java.lang.Object apply(java.lang.Object) -> a
com.google.inject.internal.BindingBuilder -> eb:
    void toInstance(java.lang.Object) -> a
    com.google.inject.internal.BindingBuilder toProvider(com.google.inject.Provider) -> b
    com.google.inject.internal.BindingBuilder toProvider(com.google.inject.Key) -> b
    java.lang.String toString() -> toString
    void copyErrorsToBinder(com.google.inject.ConfigurationException) -> a
    com.google.inject.binder.ScopedBindingBuilder toProvider(com.google.inject.Key) -> a
    com.google.inject.binder.ScopedBindingBuilder toProvider(java.lang.Class) -> b
    com.google.inject.binder.ScopedBindingBuilder toProvider(com.google.inject.Provider) -> a
com.google.inject.internal.BindingImpl -> ec:
    com.google.inject.internal.InjectorImpl injector -> d
    com.google.inject.Key key -> a
    java.lang.Object source -> b
    com.google.inject.internal.Scoping scoping -> c
    com.google.inject.internal.InternalFactory internalFactory -> e
    com.google.inject.Provider provider -> f
    com.google.inject.Key getKey() -> a
    java.lang.Object getSource() -> c
    com.google.inject.Provider getProvider() -> b
    com.google.inject.internal.InternalFactory getInternalFactory() -> d
    com.google.inject.internal.Scoping getScoping() -> e
    boolean isConstant() -> f
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    com.google.inject.internal.InjectorImpl getInjector() -> g
com.google.inject.internal.BindingProcessor -> ed:
    com.google.inject.internal.Initializer initializer -> d
    java.lang.Object visit(com.google.inject.spi.PrivateElements) -> a
    java.lang.Object visit(com.google.inject.Binding) -> a
    com.google.inject.internal.Initializer access$000(com.google.inject.internal.BindingProcessor) -> a
com.google.inject.internal.BindingProcessor$1 -> ee:
    com.google.inject.internal.BindingProcessor this$0 -> e
    java.lang.Boolean visit(com.google.inject.spi.ConstructorBinding) -> b
    java.lang.Object visit(com.google.inject.spi.ProviderBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ConvertedConstantBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ConstructorBinding) -> a
    java.lang.Object visit(com.google.inject.spi.UntargettedBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ExposedBinding) -> a
    java.lang.Object visit(com.google.inject.spi.LinkedKeyBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ProviderKeyBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ProviderInstanceBinding) -> a
    java.lang.Object visit(com.google.inject.spi.InstanceBinding) -> a
    java.lang.Object visitOther(com.google.inject.Binding) -> a
com.google.inject.internal.BoundProviderFactory -> ef:
    com.google.inject.internal.InjectorImpl injector -> a
    com.google.inject.Key providerKey -> b
    java.lang.Object source -> c
    com.google.inject.internal.InternalFactory providerFactory -> d
    void notify(com.google.inject.internal.Errors) -> a
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.BytecodeGen -> eg:
    java.util.logging.Logger logger -> a
    java.lang.ClassLoader GUICE_CLASS_LOADER -> b
    java.lang.String GUICE_INTERNAL_PACKAGE -> c
    boolean CUSTOM_LOADER_ENABLED -> d
    java.util.Map CLASS_LOADER_CACHE -> e
    java.lang.ClassLoader canonicalize(java.lang.ClassLoader) -> a
    java.lang.ClassLoader getClassLoader(java.lang.Class) -> a
com.google.inject.internal.BytecodeGen$1 -> eh:
    java.lang.Object apply(java.lang.Object) -> a
com.google.inject.internal.BytecodeGen$1$1 -> ei:
    java.lang.ClassLoader val$typeClassLoader -> a
    java.lang.Object run() -> run
com.google.inject.internal.BytecodeGen$BridgeClassLoader -> ej:
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
com.google.inject.internal.BytecodeGen$SystemBridgeHolder -> ek:
    com.google.inject.internal.BytecodeGen$BridgeClassLoader SYSTEM_BRIDGE -> a
com.google.inject.internal.BytecodeGen$Visibility -> el:
    com.google.inject.internal.BytecodeGen$Visibility PUBLIC -> a
    com.google.inject.internal.BytecodeGen$Visibility SAME_PACKAGE -> b
    com.google.inject.internal.BytecodeGen$Visibility forType(java.lang.Class) -> a
com.google.inject.internal.BytecodeGen$Visibility$1 -> em:
com.google.inject.internal.BytecodeGen$Visibility$2 -> en:
com.google.inject.internal.CircularDependencyProxy -> eo:
com.google.inject.internal.ConstantBindingBuilderImpl -> ep:
    com.google.inject.binder.ConstantBindingBuilder annotatedWith(java.lang.annotation.Annotation) -> a
    void to(java.lang.String) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.ConstantFactory -> eq:
    com.google.inject.internal.Initializable initializable -> a
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.ConstructionContext -> er:
    java.lang.Object currentReference -> a
    boolean constructing -> b
    java.util.List invocationHandlers -> c
    void finishConstruction() -> a
    void setProxyDelegates(java.lang.Object) -> a
com.google.inject.internal.ConstructionProxy -> es:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.inject.internal.DefaultConstructionProxyFactory this$0 -> b
    java.lang.Object newInstance(java.lang.Object[]) -> a
    com.google.inject.spi.InjectionPoint getInjectionPoint() -> a
com.google.inject.internal.ConstructionProxyFactory -> et:
    com.google.inject.internal.ConstructionProxy create() -> a
com.google.inject.internal.ConstructorBindingImpl -> eu:
    com.google.inject.internal.ConstructorBindingImpl$Factory factory -> d
    com.google.inject.spi.InjectionPoint constructorInjectionPoint -> e
    com.google.inject.internal.ConstructorBindingImpl create(com.google.inject.internal.InjectorImpl,com.google.inject.Key,com.google.inject.spi.InjectionPoint,java.lang.Object,com.google.inject.internal.Scoping,com.google.inject.internal.Errors,boolean) -> a
    void initialize(com.google.inject.internal.InjectorImpl,com.google.inject.internal.Errors) -> a
    boolean isInitialized() -> h
    com.google.inject.spi.InjectionPoint getInternalConstructor() -> i
    java.util.Set getInternalDependencies() -> j
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    com.google.inject.spi.InjectionPoint getConstructor() -> k
    java.util.Set getInjectableMembers() -> m
    java.util.Set getDependencies() -> l
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.ConstructorBindingImpl$Factory -> ev:
    boolean failIfNotLinked -> c
    com.google.inject.Key key -> d
    boolean allowCircularProxy -> a
    com.google.inject.internal.ConstructorInjector constructorInjector -> b
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.ConstructorInjector -> ew:
    com.google.inject.internal.util.$ImmutableSet injectableMembers -> a
    com.google.inject.internal.SingleParameterInjector[] parameterInjectors -> c
    com.google.inject.internal.ConstructionProxy constructionProxy -> b
    com.google.inject.internal.MembersInjectorImpl membersInjector -> d
    java.lang.Object construct(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,java.lang.Class,boolean) -> a
com.google.inject.internal.ConstructorInjectorStore -> ex:
    com.google.inject.internal.InjectorImpl injector -> a
    com.google.inject.internal.FailableCache cache -> b
com.google.inject.internal.ConstructorInjectorStore$1 -> ey:
    com.google.inject.internal.ConstructorInjectorStore this$0 -> a
    java.lang.Object create(java.lang.Object,com.google.inject.internal.Errors) -> a
com.google.inject.internal.ContextualCallable -> ez:
    java.lang.Object call(com.google.inject.internal.InternalContext) -> a
com.google.inject.internal.CreationListener -> eA:
    void notify(com.google.inject.internal.Errors) -> a
com.google.inject.internal.DefaultConstructionProxyFactory -> eB:
    com.google.inject.spi.InjectionPoint injectionPoint -> a
    com.google.inject.internal.ConstructionProxy create() -> a
com.google.inject.internal.DeferredLookups -> eC:
    com.google.inject.internal.InjectorImpl injector -> a
    java.util.List lookups -> b
    com.google.inject.Provider getProvider(com.google.inject.Key) -> a_
com.google.inject.internal.DelegatingInvocationHandler -> eD:
    java.lang.Object delegate -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void setDelegate(java.lang.Object) -> a
com.google.inject.internal.Errors -> eE:
    com.google.inject.internal.Errors root -> a
    com.google.inject.internal.Errors parent -> b
    java.lang.Object source -> c
    java.util.List errors -> d
    java.util.Collection converters -> e
    com.google.inject.internal.Errors withSource(java.lang.Object) -> a
    com.google.inject.internal.Errors missingImplementation(com.google.inject.Key) -> a
    com.google.inject.internal.Errors jitDisabled(com.google.inject.Key) -> b
    com.google.inject.internal.Errors converterReturnedNull(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding) -> a
    com.google.inject.internal.Errors conversionTypeError(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding,java.lang.Object) -> a
    com.google.inject.internal.Errors conversionError(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding,java.lang.RuntimeException) -> a
    com.google.inject.internal.Errors ambiguousTypeConversion(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding,com.google.inject.spi.TypeConverterBinding) -> a
    com.google.inject.internal.Errors bindingToProvider() -> a
    com.google.inject.internal.Errors subtypeNotProvided(java.lang.Class,java.lang.Class) -> a
    com.google.inject.internal.Errors notASubtype(java.lang.Class,java.lang.Class) -> b
    com.google.inject.internal.Errors recursiveImplementationType() -> b
    com.google.inject.internal.Errors recursiveProviderType() -> c
    com.google.inject.internal.Errors missingRuntimeRetention(java.lang.Object) -> b
    com.google.inject.internal.Errors missingScopeAnnotation() -> d
    com.google.inject.internal.Errors optionalConstructor(java.lang.reflect.Constructor) -> a
    com.google.inject.internal.Errors cannotBindToGuiceType(java.lang.String) -> a
    com.google.inject.internal.Errors scopeNotFound(java.lang.Class) -> a
    com.google.inject.internal.Errors scopeAnnotationOnAbstractType(java.lang.Class,java.lang.Class,java.lang.Object) -> a
    com.google.inject.internal.Errors misplacedBindingAnnotation(java.lang.reflect.Member,java.lang.annotation.Annotation) -> a
    com.google.inject.internal.Errors missingConstructor(java.lang.Class) -> b
    com.google.inject.internal.Errors tooManyConstructors(java.lang.Class) -> c
    com.google.inject.internal.Errors duplicateScopes(com.google.inject.Scope,java.lang.Class,com.google.inject.Scope) -> a
    com.google.inject.internal.Errors voidProviderMethod() -> e
    com.google.inject.internal.Errors missingConstantValues() -> f
    com.google.inject.internal.Errors cannotInjectInnerClass(java.lang.Class) -> d
    com.google.inject.internal.Errors duplicateBindingAnnotations(java.lang.reflect.Member,java.lang.Class,java.lang.Class) -> a
    com.google.inject.internal.Errors cannotInjectFinalField(java.lang.reflect.Field) -> a
    com.google.inject.internal.Errors cannotInjectAbstractMethod(java.lang.reflect.Method) -> a
    com.google.inject.internal.Errors cannotInjectMethodWithTypeParameters(java.lang.reflect.Method) -> b
    com.google.inject.internal.Errors duplicateScopeAnnotations(java.lang.Class,java.lang.Class) -> c
    com.google.inject.internal.Errors recursiveBinding() -> g
    com.google.inject.internal.Errors bindingAlreadySet(com.google.inject.Key,java.lang.Object) -> a
    com.google.inject.internal.Errors jitBindingAlreadySet(com.google.inject.Key) -> c
    com.google.inject.internal.Errors childBindingAlreadySet(com.google.inject.Key,java.util.Set) -> a
    com.google.inject.internal.Errors errorCheckingDuplicateBinding(com.google.inject.Key,java.lang.Object,java.lang.Throwable) -> a
    com.google.inject.internal.Errors errorInjectingMethod(java.lang.Throwable) -> a
    com.google.inject.internal.Errors errorNotifyingTypeListener(com.google.inject.spi.TypeListenerBinding,com.google.inject.TypeLiteral,java.lang.Throwable) -> a
    com.google.inject.internal.Errors errorInjectingConstructor(java.lang.Throwable) -> b
    com.google.inject.internal.Errors errorInProvider(java.lang.RuntimeException) -> a
    com.google.inject.internal.Errors errorInUserInjector(com.google.inject.MembersInjector,com.google.inject.TypeLiteral,java.lang.RuntimeException) -> a
    com.google.inject.internal.Errors errorNotifyingInjectionListener(com.google.inject.spi.InjectionListener,com.google.inject.TypeLiteral,java.lang.RuntimeException) -> a
    com.google.inject.internal.Errors exposedButNotBound(com.google.inject.Key) -> d
    com.google.inject.internal.Errors keyNotFullySpecified(com.google.inject.TypeLiteral) -> a
    java.util.Collection getMessagesFromThrowable(java.lang.Throwable) -> c
    com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    com.google.inject.internal.Errors cannotInjectRawProvider() -> h
    com.google.inject.internal.Errors cannotInjectRawMembersInjector() -> i
    com.google.inject.internal.Errors cannotInjectTypeLiteralOf(java.lang.reflect.Type) -> a
    com.google.inject.internal.Errors cannotInjectRawTypeLiteral() -> j
    com.google.inject.internal.Errors cannotSatisfyCircularDependency(java.lang.Class) -> e
    com.google.inject.internal.Errors circularProxiesDisabled(java.lang.Class) -> f
    void throwCreationExceptionIfErrorsExist() -> k
    void throwConfigurationExceptionIfErrorsExist() -> l
    void throwProvisionExceptionIfErrorsExist() -> m
    com.google.inject.internal.Errors merge(java.util.Collection) -> a
    com.google.inject.internal.Errors merge(com.google.inject.internal.Errors) -> a
    java.util.List getSources() -> r
    void throwIfNewErrors(int) -> a
    com.google.inject.internal.ErrorsException toException() -> n
    boolean hasErrors() -> o
    com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[]) -> b
    com.google.inject.internal.Errors addMessage(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> b
    com.google.inject.internal.Errors addMessage(com.google.inject.spi.Message) -> a
    java.lang.String format(java.lang.String,java.lang.Object[]) -> a
    java.util.List getMessages() -> p
    java.lang.String format(java.lang.String,java.util.Collection) -> a
    java.lang.Object checkForNull(java.lang.Object,java.lang.Object,com.google.inject.spi.Dependency) -> a
    java.lang.Throwable getOnlyCause(java.util.Collection) -> b
    int size() -> q
    java.lang.Object convert(java.lang.Object) -> c
    void formatSource(java.util.Formatter,java.lang.Object) -> a
    void formatInjectionPoint(java.util.Formatter,com.google.inject.spi.Dependency,com.google.inject.spi.InjectionPoint) -> a
com.google.inject.internal.Errors$1 -> eF:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.inject.internal.Errors$2 -> eG:
    java.lang.String toString(java.lang.Object) -> a
com.google.inject.internal.Errors$3 -> eH:
    java.lang.String toString(java.lang.Object) -> a
com.google.inject.internal.Errors$4 -> eI:
    java.lang.String toString(java.lang.Object) -> a
com.google.inject.internal.Errors$Converter -> eJ:
    java.lang.Class type -> a
    java.lang.String toString(java.lang.Object) -> a
com.google.inject.internal.ErrorsException -> eK:
    com.google.inject.internal.Errors errors -> a
    com.google.inject.internal.Errors getErrors() -> a
com.google.inject.internal.Exceptions$UnhandledCheckedUserException -> eL:
com.google.inject.internal.ExposedBindingImpl -> eM:
    com.google.inject.spi.PrivateElements privateElements -> d
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    java.util.Set getDependencies() -> l
    com.google.inject.spi.PrivateElements getPrivateElements() -> h
    java.lang.String toString() -> toString
com.google.inject.internal.ExposedKeyFactory -> eN:
    com.google.inject.Key key -> a
    com.google.inject.spi.PrivateElements privateElements -> b
    com.google.inject.internal.BindingImpl delegate -> c
    void notify(com.google.inject.internal.Errors) -> a
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.ExposureBuilder -> eO:
    java.lang.Object source -> a
    com.google.inject.Key key -> b
    java.lang.String toString() -> toString
com.google.inject.internal.FactoryProxy -> eP:
    com.google.inject.internal.InjectorImpl injector -> a
    com.google.inject.Key key -> b
    com.google.inject.Key targetKey -> c
    java.lang.Object source -> d
    com.google.inject.internal.InternalFactory targetFactory -> e
    void notify(com.google.inject.internal.Errors) -> a
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.FailableCache -> eQ:
    java.util.Map delegate -> a
    java.lang.Object create(java.lang.Object,com.google.inject.internal.Errors) -> a
    java.lang.Object get(java.lang.Object,com.google.inject.internal.Errors) -> b
    boolean remove(java.lang.Object) -> a
com.google.inject.internal.FailableCache$1 -> eR:
    com.google.inject.internal.FailableCache this$0 -> a
    java.lang.Object apply(java.lang.Object) -> a
com.google.inject.internal.InheritingState -> eS:
    com.google.inject.internal.State parent -> b
    java.util.Map explicitBindingsMutable -> c
    java.util.Map explicitBindings -> d
    java.util.Map scopes -> e
    java.util.List converters -> f
    java.util.List listenerBindings -> g
    com.google.inject.internal.WeakKeySet blacklistedKeys -> h
    java.lang.Object lock -> i
    com.google.inject.internal.State parent() -> a
    com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key) -> a
    java.util.Map getExplicitBindingsThisLevel() -> b
    void putBinding(com.google.inject.Key,com.google.inject.internal.BindingImpl) -> a
    com.google.inject.Scope getScope(java.lang.Class) -> a
    void putAnnotation(java.lang.Class,com.google.inject.Scope) -> a
    java.lang.Iterable getConvertersThisLevel() -> c
    void addConverter(com.google.inject.spi.TypeConverterBinding) -> a
    com.google.inject.spi.TypeConverterBinding getConverter(java.lang.String,com.google.inject.TypeLiteral,com.google.inject.internal.Errors,java.lang.Object) -> a
    void addTypeListener(com.google.inject.spi.TypeListenerBinding) -> a
    java.util.List getTypeListenerBindings() -> d
    void blacklist(com.google.inject.Key,java.lang.Object) -> a
    boolean isBlacklisted(com.google.inject.Key) -> b
    java.util.Set getSourcesForBlacklistedKey(com.google.inject.Key) -> c
    java.lang.Object lock() -> e
com.google.inject.internal.Initializable -> eT:
    java.lang.Object get(com.google.inject.internal.Errors) -> a
com.google.inject.internal.Initializables$1 -> eU:
    java.lang.Object val$instance -> a
    java.lang.Object get(com.google.inject.internal.Errors) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.Initializer -> eV:
    java.lang.Thread creatingThread -> a
    java.util.concurrent.CountDownLatch ready -> b
    java.util.Map pendingInjection -> c
    com.google.inject.internal.Initializable requestInjection(com.google.inject.internal.InjectorImpl,java.lang.Object,java.lang.Object,java.util.Set) -> a
    void injectAll(com.google.inject.internal.Errors) -> a
com.google.inject.internal.Initializer$InjectableReference -> eW:
    com.google.inject.internal.InjectorImpl injector -> a
    java.lang.Object instance -> b
    java.lang.Object source -> c
    com.google.inject.internal.MembersInjectorImpl membersInjector -> d
    com.google.inject.internal.Initializer this$0 -> e
    java.lang.Object get(com.google.inject.internal.Errors) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.InjectionRequestProcessor -> eX:
    java.util.List staticInjections -> a
    com.google.inject.internal.Initializer initializer -> d
    java.lang.Boolean visit(com.google.inject.spi.InjectionRequest) -> b
    java.lang.Object visit(com.google.inject.spi.StaticInjectionRequest) -> a
    java.lang.Object visit(com.google.inject.spi.InjectionRequest) -> a
com.google.inject.internal.InjectionRequestProcessor$StaticInjection -> eY:
    com.google.inject.internal.InjectorImpl injector -> a
    java.lang.Object source -> d
    com.google.inject.spi.StaticInjectionRequest request -> e
    com.google.inject.internal.util.$ImmutableList memberInjectors -> b
    com.google.inject.internal.InjectionRequestProcessor this$0 -> c
    void validate() -> a
com.google.inject.internal.InjectionRequestProcessor$StaticInjection$1 -> eZ:
    com.google.inject.internal.InjectionRequestProcessor$StaticInjection this$1 -> a
    java.lang.Object call(com.google.inject.internal.InternalContext) -> a
com.google.inject.internal.InjectorImpl -> fa:
    com.google.inject.TypeLiteral STRING_TYPE -> g
    com.google.inject.internal.State state -> a
    com.google.inject.internal.InjectorImpl parent -> h
    com.google.inject.internal.InjectorImpl$BindingsMultimap bindingsMultimap -> i
    com.google.inject.internal.InjectorImpl$InjectorOptions options -> b
    java.util.Map jitBindings -> c
    com.google.inject.internal.Lookups lookups -> d
    com.google.inject.internal.ConstructorInjectorStore constructors -> e
    com.google.inject.internal.MembersInjectorStore membersInjectorStore -> f
    java.lang.ThreadLocal localContext -> j
    void index() -> b
    com.google.inject.internal.BindingImpl getBinding(com.google.inject.Key) -> b
    com.google.inject.internal.BindingImpl getExistingBinding(com.google.inject.Key) -> c
    com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation) -> b
    com.google.inject.internal.BindingImpl getJustInTimeBinding(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation) -> c
    boolean isProvider(com.google.inject.Key) -> d
    boolean isTypeLiteral(com.google.inject.Key) -> e
    com.google.inject.Key getProvidedKey(com.google.inject.Key,com.google.inject.internal.Errors) -> b
    boolean isMembersInjector(com.google.inject.Key) -> f
    com.google.inject.internal.BindingImpl convertConstantStringBinding(com.google.inject.Key,com.google.inject.internal.Errors) -> c
    void initializeBinding(com.google.inject.internal.BindingImpl,com.google.inject.internal.Errors) -> a
    boolean cleanup(com.google.inject.internal.BindingImpl,java.util.Set) -> a
    void removeFailedJitBinding(com.google.inject.Key,com.google.inject.spi.InjectionPoint) -> a
    com.google.inject.internal.BindingImpl createUninitializedBinding(com.google.inject.Key,com.google.inject.internal.Scoping,java.lang.Object,com.google.inject.internal.Errors,boolean) -> a
    com.google.inject.internal.BindingImpl createJustInTimeBindingRecursive(com.google.inject.Key,com.google.inject.internal.Errors,boolean,com.google.inject.internal.InjectorImpl$JitLimitation) -> a
    com.google.inject.internal.BindingImpl createJustInTimeBinding(com.google.inject.Key,com.google.inject.internal.Errors,boolean,com.google.inject.internal.InjectorImpl$JitLimitation) -> b
    com.google.inject.internal.InternalFactory getInternalFactory(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation) -> a
    java.util.Map getBindings() -> a
    com.google.inject.internal.SingleParameterInjector[] getParametersInjectors(java.util.List,com.google.inject.internal.Errors) -> a
    void injectMembers(java.lang.Object) -> a
    com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral) -> a
    com.google.inject.Provider getProviderOrThrow(com.google.inject.Key,com.google.inject.internal.Errors) -> a
    com.google.inject.Provider getProvider(com.google.inject.Key) -> a_
    java.lang.Object getInstance(com.google.inject.Key) -> a
    java.lang.Object getInstance(java.lang.Class) -> a
    java.lang.Object callInContext(com.google.inject.internal.ContextualCallable) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.InjectorImpl$1 -> fb:
    java.lang.Object initialValue() -> initialValue
com.google.inject.internal.InjectorImpl$2 -> fc:
    com.google.inject.Key val$providerKey -> a
    com.google.inject.internal.BindingImpl val$providerBinding -> b
    java.lang.Class val$rawType -> c
    java.lang.Class val$providerType -> d
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.InjectorImpl$3 -> fd:
    com.google.inject.internal.BindingImpl val$targetBinding -> a
    com.google.inject.Key val$targetKey -> b
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.InjectorImpl$4 -> fe:
    com.google.inject.spi.Dependency val$dependency -> a
    com.google.inject.internal.InternalFactory val$factory -> b
    com.google.inject.internal.InjectorImpl this$0 -> c
    java.lang.Object get() -> a
    java.lang.String toString() -> toString
com.google.inject.internal.InjectorImpl$4$1 -> ff:
    com.google.inject.internal.Errors val$errors -> a
    com.google.inject.internal.InjectorImpl$4 this$1 -> b
    java.lang.Object call(com.google.inject.internal.InternalContext) -> a
com.google.inject.internal.InjectorImpl$BindingsMultimap -> fg:
    java.util.Map multimap -> a
com.google.inject.internal.InjectorImpl$ConvertedConstantBindingImpl -> fh:
    java.lang.Object value -> d
    com.google.inject.Provider provider -> e
    com.google.inject.Binding originalBinding -> f
    com.google.inject.Provider getProvider() -> b
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    com.google.inject.Key getSourceKey() -> h
    java.util.Set getDependencies() -> l
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.InjectorImpl$InjectorOptions -> fi:
    com.google.inject.Stage stage -> a
    boolean jitDisabled -> b
    boolean disableCircularProxies -> c
    java.lang.String toString() -> toString
com.google.inject.internal.InjectorImpl$JitLimitation -> fj:
    com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT -> a
    com.google.inject.internal.InjectorImpl$JitLimitation EXISTING_JIT -> b
    com.google.inject.internal.InjectorImpl$JitLimitation NEW_OR_EXISTING_JIT -> c
com.google.inject.internal.InjectorImpl$MethodInvoker -> fk:
    java.lang.reflect.Method val$method -> a
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> a
com.google.inject.internal.InjectorImpl$ProviderBindingImpl -> fl:
    com.google.inject.internal.BindingImpl providedBinding -> d
    com.google.inject.Key getProvidedKey() -> h
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    java.lang.String toString() -> toString
    java.util.Set getDependencies() -> l
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.InjectorImpl$ProviderBindingImpl$1 -> fm:
    com.google.inject.Provider val$provider -> a
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.InjectorOptionsProcessor -> fn:
    boolean disableCircularProxies -> a
    boolean jitDisabled -> d
com.google.inject.internal.InjectorShell -> fo:
    java.util.List elements -> a
    com.google.inject.internal.InjectorImpl injector -> b
com.google.inject.internal.InjectorShell$Builder -> fp:
    java.util.List elements -> a
    java.util.List modules -> b
    com.google.inject.internal.State state -> c
    com.google.inject.internal.InjectorImpl parent -> d
    com.google.inject.internal.InjectorImpl$InjectorOptions options -> e
    com.google.inject.Stage stage -> f
    com.google.inject.internal.PrivateElementsImpl privateElements -> g
    java.util.List build(com.google.inject.internal.Initializer,com.google.inject.internal.ProcessedBindingData,com.google.inject.internal.util.$Stopwatch,com.google.inject.internal.Errors) -> a
com.google.inject.internal.InjectorShell$InjectorFactory -> fq:
    com.google.inject.Injector injector -> a
    java.lang.String toString() -> toString
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
    java.lang.Object get() -> a
com.google.inject.internal.InjectorShell$LoggerFactory -> fr:
    java.lang.String toString() -> toString
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
    java.lang.Object get() -> a
com.google.inject.internal.InjectorShell$RootModule -> fs:
    com.google.inject.Stage stage -> a
    void configure(com.google.inject.Binder) -> a
com.google.inject.internal.InstanceBindingImpl -> ft:
    java.lang.Object instance -> d
    com.google.inject.Provider provider -> e
    com.google.inject.internal.util.$ImmutableSet injectionPoints -> f
    com.google.inject.Provider getProvider() -> b
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    java.lang.Object getInstance() -> h
    java.util.Set getInjectionPoints() -> i
    java.util.Set getDependencies() -> l
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.InternalContext -> fu:
    java.util.Map constructionContexts -> a
    com.google.inject.spi.Dependency dependency -> b
    com.google.inject.spi.Dependency setDependency(com.google.inject.spi.Dependency) -> a
com.google.inject.internal.InternalFactory -> fv:
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.InternalFactoryToProviderAdapter -> fw:
    com.google.inject.internal.Initializable initializable -> a
    java.lang.Object source -> b
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.InternalInjectorCreator -> fx:
    com.google.inject.internal.util.$Stopwatch stopwatch -> a
    com.google.inject.internal.Errors errors -> b
    com.google.inject.internal.Initializer initializer -> c
    com.google.inject.internal.ProcessedBindingData bindingData -> d
    com.google.inject.internal.InjectionRequestProcessor injectionRequestProcessor -> e
    com.google.inject.internal.InjectorShell$Builder shellBuilder -> f
    java.util.List shells -> g
    com.google.inject.internal.InternalInjectorCreator stage(com.google.inject.Stage) -> a
    com.google.inject.internal.InternalInjectorCreator addModules(java.lang.Iterable) -> a
    com.google.inject.Injector build() -> a
    void initializeStatically() -> b
    com.google.inject.Injector primaryInjector() -> c
    void injectDynamically() -> d
    void loadEagerSingletons(com.google.inject.internal.InjectorImpl,com.google.inject.Stage,com.google.inject.internal.Errors) -> a
    boolean isEagerSingleton(com.google.inject.internal.InjectorImpl,com.google.inject.internal.BindingImpl,com.google.inject.Stage) -> a
com.google.inject.internal.InternalInjectorCreator$1 -> fy:
    com.google.inject.spi.Dependency dependency -> a
    com.google.inject.internal.BindingImpl val$binding -> b
    com.google.inject.internal.Errors val$errors -> c
    java.lang.Void call(com.google.inject.internal.InternalContext) -> b
    java.lang.Object call(com.google.inject.internal.InternalContext) -> a
com.google.inject.internal.InternalInjectorCreator$ToolStageInjector -> fz:
    com.google.inject.Injector delegateInjector -> a
    void injectMembers(java.lang.Object) -> a
    java.util.Map getBindings() -> a
    java.lang.Object getInstance(com.google.inject.Key) -> a
    java.lang.Object getInstance(java.lang.Class) -> a
com.google.inject.internal.LinkedBindingImpl -> fA:
    com.google.inject.Key targetKey -> d
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    com.google.inject.Key getLinkedKey() -> h
    java.util.Set getDependencies() -> l
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.LinkedProviderBindingImpl -> fB:
    com.google.inject.Key providerKey -> d
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    com.google.inject.Key getProviderKey() -> h
    java.util.Set getDependencies() -> l
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.LookupProcessor -> fC:
    java.lang.Boolean visit(com.google.inject.spi.ProviderLookup) -> b
    java.lang.Object visit(com.google.inject.spi.ProviderLookup) -> a
com.google.inject.internal.Lookups -> fD:
    com.google.inject.Provider getProvider(com.google.inject.Key) -> a_
com.google.inject.internal.MembersInjectorImpl -> fE:
    com.google.inject.TypeLiteral typeLiteral -> a
    com.google.inject.internal.InjectorImpl injector -> b
    com.google.inject.internal.util.$ImmutableList memberInjectors -> c
    com.google.inject.internal.util.$ImmutableList userMembersInjectors -> d
    com.google.inject.internal.util.$ImmutableList injectionListeners -> e
    void injectMembers(java.lang.Object) -> a
    void injectAndNotify(java.lang.Object,com.google.inject.internal.Errors,boolean) -> a
    void notifyListeners(java.lang.Object,com.google.inject.internal.Errors) -> a
    void injectMembers(java.lang.Object,com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,boolean) -> a
    java.lang.String toString() -> toString
    com.google.inject.internal.util.$ImmutableSet getInjectionPoints() -> a
com.google.inject.internal.MembersInjectorImpl$1 -> fF:
    java.lang.Object val$instance -> a
    com.google.inject.internal.Errors val$errors -> b
    boolean val$toolableOnly -> c
    com.google.inject.internal.MembersInjectorImpl this$0 -> d
    java.lang.Object call(com.google.inject.internal.InternalContext) -> a
com.google.inject.internal.MembersInjectorStore -> fG:
    com.google.inject.internal.InjectorImpl injector -> c
    com.google.inject.internal.util.$ImmutableList typeListenerBindings -> a
    com.google.inject.internal.FailableCache cache -> b
    com.google.inject.internal.MembersInjectorImpl get(com.google.inject.TypeLiteral,com.google.inject.internal.Errors) -> a
    com.google.inject.internal.MembersInjectorImpl createWithListeners(com.google.inject.TypeLiteral,com.google.inject.internal.Errors) -> b
    com.google.inject.internal.util.$ImmutableList getInjectors(java.util.Set,com.google.inject.internal.Errors) -> a
com.google.inject.internal.MembersInjectorStore$1 -> fH:
    com.google.inject.internal.MembersInjectorStore this$0 -> a
    java.lang.Object create(java.lang.Object,com.google.inject.internal.Errors) -> a
com.google.inject.internal.MessageProcessor -> fI:
    java.util.logging.Logger logger -> a
    java.lang.String getRootMessage(java.lang.Throwable) -> a
    java.lang.Object visit(com.google.inject.spi.Message) -> a
com.google.inject.internal.MoreTypes -> fJ:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.util.Map PRIMITIVE_TO_WRAPPER -> b
    com.google.inject.TypeLiteral canonicalizeForKey(com.google.inject.TypeLiteral) -> a
    boolean isFullySpecified(java.lang.reflect.Type) -> e
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> a
    java.lang.Class getRawType(java.lang.reflect.Type) -> b
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    java.lang.String typeToString(java.lang.reflect.Type) -> c
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> a
    void access$000(java.lang.reflect.Type,java.lang.String) -> a
    boolean access$100(java.lang.reflect.Type) -> d
    int access$200(java.lang.Object) -> a
com.google.inject.internal.MoreTypes$CompositeType -> fK:
    boolean isFullySpecified() -> a
com.google.inject.internal.MoreTypes$GenericArrayTypeImpl -> fL:
    java.lang.reflect.Type componentType -> a
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean isFullySpecified() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.internal.MoreTypes$ParameterizedTypeImpl -> fM:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean isFullySpecified() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.internal.MoreTypes$WildcardTypeImpl -> fN:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean isFullySpecified() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.internal.PrivateElementProcessor -> fO:
    java.util.List injectorShellBuilders -> a
    java.lang.Object visit(com.google.inject.spi.PrivateElements) -> a
com.google.inject.internal.PrivateElementsImpl -> fP:
    java.lang.Object source -> a
    java.util.List elementsMutable -> b
    java.util.List exposureBuilders -> c
    com.google.inject.internal.util.$ImmutableList elements -> d
    com.google.inject.internal.util.$ImmutableMap exposedKeysToSources -> e
    com.google.inject.Injector injector -> f
    java.lang.Object getSource() -> c
    java.util.List getElements() -> a
    com.google.inject.Injector getInjector() -> b
    void initInjector(com.google.inject.Injector) -> a
    java.util.Set getExposedKeys() -> d
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
    java.util.List getElementsMutable() -> e
    void addExposureBuilder(com.google.inject.internal.ExposureBuilder) -> a
    java.lang.Object getExposedSource(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.ProcessedBindingData -> fQ:
    java.util.List creationListeners -> a
    java.util.List uninitializedBindings -> b
    void addCreationListener(com.google.inject.internal.CreationListener) -> a
com.google.inject.internal.ProviderInstanceBindingImpl -> fR:
    com.google.inject.Provider providerInstance -> d
    com.google.inject.internal.util.$ImmutableSet injectionPoints -> e
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    com.google.inject.Provider getProviderInstance() -> h
    java.util.Set getInjectionPoints() -> i
    java.util.Set getDependencies() -> l
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.ProviderMethod -> fS:
    com.google.inject.Key key -> a
    java.lang.Class scopeAnnotation -> b
    java.lang.Object instance -> c
    java.lang.reflect.Method method -> d
    com.google.inject.internal.util.$ImmutableSet dependencies -> e
    java.util.List parameterProviders -> f
    boolean exposed -> g
    void configure(com.google.inject.Binder) -> a
    java.lang.Object get() -> a
    java.util.Set getDependencies() -> l
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.ProviderMethodsModule -> fT:
    java.lang.Object delegate -> a
    com.google.inject.TypeLiteral typeLiteral -> b
    com.google.inject.Module forModule(com.google.inject.Module) -> a
    void configure(com.google.inject.Binder) -> a
    com.google.inject.Key getKey(com.google.inject.internal.Errors,com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.annotation.Annotation[]) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.ProviderMethodsModule$LogProvider -> fU:
    java.lang.String name -> a
    java.lang.Object get() -> a
com.google.inject.internal.ProviderToInternalFactoryAdapter -> fV:
    com.google.inject.internal.InjectorImpl injector -> a
    com.google.inject.internal.InternalFactory internalFactory -> b
    java.lang.Object get() -> a
    java.lang.String toString() -> toString
    com.google.inject.internal.InternalFactory access$000(com.google.inject.internal.ProviderToInternalFactoryAdapter) -> a
com.google.inject.internal.ProviderToInternalFactoryAdapter$1 -> fW:
    com.google.inject.internal.Errors val$errors -> a
    com.google.inject.internal.ProviderToInternalFactoryAdapter this$0 -> b
    java.lang.Object call(com.google.inject.internal.InternalContext) -> a
com.google.inject.internal.ScopeBindingProcessor -> fX:
    java.lang.Object visit(com.google.inject.spi.ScopeBinding) -> a
com.google.inject.internal.Scoping -> fY:
    com.google.inject.internal.Scoping UNSCOPED -> a
    com.google.inject.internal.Scoping SINGLETON_ANNOTATION -> c
    com.google.inject.internal.Scoping SINGLETON_INSTANCE -> d
    com.google.inject.internal.Scoping EAGER_SINGLETON -> b
    com.google.inject.internal.Scoping forAnnotation(java.lang.Class) -> a
    boolean isExplicitlyScoped() -> a
    boolean isEagerSingleton(com.google.inject.Stage) -> a
    com.google.inject.Scope getScopeInstance() -> b
    java.lang.Class getScopeAnnotation() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.inject.internal.InternalFactory scope(com.google.inject.Key,com.google.inject.internal.InjectorImpl,com.google.inject.internal.InternalFactory,java.lang.Object,com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.Scoping makeInjectable(com.google.inject.internal.Scoping,com.google.inject.internal.InjectorImpl,com.google.inject.internal.Errors) -> a
com.google.inject.internal.Scoping$1 -> fZ:
    com.google.inject.Scope getScopeInstance() -> b
    java.lang.String toString() -> toString
com.google.inject.internal.Scoping$2 -> ga:
    java.lang.Class getScopeAnnotation() -> c
    java.lang.String toString() -> toString
com.google.inject.internal.Scoping$3 -> gb:
    com.google.inject.Scope getScopeInstance() -> b
    java.lang.String toString() -> toString
com.google.inject.internal.Scoping$4 -> gc:
    com.google.inject.Scope getScopeInstance() -> b
    java.lang.String toString() -> toString
com.google.inject.internal.Scoping$5 -> gd:
    java.lang.Class val$scopingAnnotation -> c
    java.lang.Class getScopeAnnotation() -> c
    java.lang.String toString() -> toString
com.google.inject.internal.Scoping$6 -> ge:
    com.google.inject.Scope val$scope -> c
    com.google.inject.Scope getScopeInstance() -> b
    java.lang.String toString() -> toString
com.google.inject.internal.SingleFieldInjector -> gf:
    java.lang.reflect.Field field -> a
    com.google.inject.spi.InjectionPoint injectionPoint -> b
    com.google.inject.spi.Dependency dependency -> c
    com.google.inject.internal.InternalFactory factory -> d
    com.google.inject.spi.InjectionPoint getInjectionPoint() -> a
    void inject(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,java.lang.Object) -> a
com.google.inject.internal.SingleMemberInjector -> gg:
    void inject(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,java.lang.Object) -> a
    com.google.inject.spi.InjectionPoint getInjectionPoint() -> a
com.google.inject.internal.SingleMethodInjector -> gh:
    com.google.inject.internal.InjectorImpl$MethodInvoker methodInvoker -> a
    com.google.inject.internal.SingleParameterInjector[] parameterInjectors -> b
    com.google.inject.spi.InjectionPoint injectionPoint -> c
    com.google.inject.spi.InjectionPoint getInjectionPoint() -> a
    void inject(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,java.lang.Object) -> a
com.google.inject.internal.SingleParameterInjector -> gi:
    java.lang.Object[] NO_ARGUMENTS -> a
    com.google.inject.spi.Dependency dependency -> b
    com.google.inject.internal.InternalFactory factory -> c
    java.lang.Object inject(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext) -> a
    java.lang.Object[] getAll(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.internal.SingleParameterInjector[]) -> a
com.google.inject.internal.State -> gj:
    com.google.inject.internal.State NONE -> a
    com.google.inject.internal.State parent() -> a
    com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key) -> a
    java.util.Map getExplicitBindingsThisLevel() -> b
    void putBinding(com.google.inject.Key,com.google.inject.internal.BindingImpl) -> a
    com.google.inject.Scope getScope(java.lang.Class) -> a
    void putAnnotation(java.lang.Class,com.google.inject.Scope) -> a
    void addConverter(com.google.inject.spi.TypeConverterBinding) -> a
    com.google.inject.spi.TypeConverterBinding getConverter(java.lang.String,com.google.inject.TypeLiteral,com.google.inject.internal.Errors,java.lang.Object) -> a
    java.lang.Iterable getConvertersThisLevel() -> c
    void addTypeListener(com.google.inject.spi.TypeListenerBinding) -> a
    java.util.List getTypeListenerBindings() -> d
    void blacklist(com.google.inject.Key,java.lang.Object) -> a
    boolean isBlacklisted(com.google.inject.Key) -> b
    java.util.Set getSourcesForBlacklistedKey(com.google.inject.Key) -> c
    java.lang.Object lock() -> e
com.google.inject.internal.State$1 -> gk:
    com.google.inject.internal.State parent() -> a
    com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key) -> a
    java.util.Map getExplicitBindingsThisLevel() -> b
    void putBinding(com.google.inject.Key,com.google.inject.internal.BindingImpl) -> a
    com.google.inject.Scope getScope(java.lang.Class) -> a
    void putAnnotation(java.lang.Class,com.google.inject.Scope) -> a
    void addConverter(com.google.inject.spi.TypeConverterBinding) -> a
    com.google.inject.spi.TypeConverterBinding getConverter(java.lang.String,com.google.inject.TypeLiteral,com.google.inject.internal.Errors,java.lang.Object) -> a
    java.lang.Iterable getConvertersThisLevel() -> c
    void addTypeListener(com.google.inject.spi.TypeListenerBinding) -> a
    java.util.List getTypeListenerBindings() -> d
    void blacklist(com.google.inject.Key,java.lang.Object) -> a
    boolean isBlacklisted(com.google.inject.Key) -> b
    java.util.Set getSourcesForBlacklistedKey(com.google.inject.Key) -> c
    java.lang.Object lock() -> e
com.google.inject.internal.TypeConverterBindingProcessor -> gl:
    void prepareBuiltInConverters(com.google.inject.internal.InjectorImpl) -> a
    void convertToPrimitiveType(java.lang.Class,java.lang.Class) -> a
    void convertToClass(java.lang.Class,com.google.inject.spi.TypeConverter) -> a
    void convertToClasses(com.google.inject.matcher.Matcher,com.google.inject.spi.TypeConverter) -> a
    void internalConvertToTypes(com.google.inject.matcher.Matcher,com.google.inject.spi.TypeConverter) -> b
    java.lang.Object visit(com.google.inject.spi.TypeConverterBinding) -> a
com.google.inject.internal.TypeConverterBindingProcessor$1 -> gm:
    java.lang.Object convert(java.lang.String,com.google.inject.TypeLiteral) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.TypeConverterBindingProcessor$2 -> gn:
    java.lang.Object convert(java.lang.String,com.google.inject.TypeLiteral) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.TypeConverterBindingProcessor$3 -> go:
    java.lang.String toString() -> toString
    boolean matches(java.lang.Object) -> a
com.google.inject.internal.TypeConverterBindingProcessor$4 -> gp:
    java.lang.Object convert(java.lang.String,com.google.inject.TypeLiteral) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.TypeConverterBindingProcessor$5 -> gq:
    java.lang.reflect.Method val$parser -> a
    java.lang.Class val$wrapperType -> b
    java.lang.Object convert(java.lang.String,com.google.inject.TypeLiteral) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.TypeConverterBindingProcessor$6 -> gr:
    com.google.inject.matcher.Matcher val$typeMatcher -> a
    java.lang.String toString() -> toString
    boolean matches(java.lang.Object) -> a
com.google.inject.internal.TypeListenerBindingProcessor -> gs:
    java.lang.Object visit(com.google.inject.spi.TypeListenerBinding) -> a
com.google.inject.internal.UniqueAnnotations -> gt:
    java.util.concurrent.atomic.AtomicInteger nextUniqueValue -> a
    java.lang.annotation.Annotation create() -> a
com.google.inject.internal.UniqueAnnotations$1 -> gu:
    int val$value -> a
    int value() -> a
    java.lang.Class annotationType() -> annotationType
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.UniqueAnnotations$Internal -> gv:
    int value() -> a
com.google.inject.internal.UntargettedBindingImpl -> gw:
    java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor) -> a
    com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping) -> a
    com.google.inject.internal.BindingImpl withKey(com.google.inject.Key) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.inject.internal.UntargettedBindingImpl$1 -> gx:
    java.lang.Object get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean) -> a
com.google.inject.internal.UntargettedBindingProcessor -> gy:
    java.lang.Object visit(com.google.inject.Binding) -> a
com.google.inject.internal.UntargettedBindingProcessor$1 -> gz:
    com.google.inject.internal.UntargettedBindingProcessor this$0 -> e
    java.lang.Boolean visit$1dbd5ccc() -> b
    java.lang.Object visit(com.google.inject.spi.UntargettedBinding) -> a
    java.lang.Object visitOther(com.google.inject.Binding) -> a
com.google.inject.internal.WeakKeySet -> gA:
    java.util.Map backingSet -> a
com.google.inject.internal.util.$AbstractIterator -> gB:
    com.google.inject.internal.util.$AbstractIterator$State state -> a
    java.lang.Object next -> b
    java.lang.Object computeNext() -> a
    java.lang.Object endOfData() -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.inject.internal.util.$AbstractIterator$1 -> gC:
    int[] $SwitchMap$com$google$inject$internal$util$AbstractIterator$State -> a
com.google.inject.internal.util.$AbstractIterator$State -> gD:
    com.google.inject.internal.util.$AbstractIterator$State READY -> a
    com.google.inject.internal.util.$AbstractIterator$State NOT_READY -> b
    com.google.inject.internal.util.$AbstractIterator$State DONE -> c
    com.google.inject.internal.util.$AbstractIterator$State FAILED -> d
    com.google.inject.internal.util.$AbstractIterator$State[] $VALUES -> e
    com.google.inject.internal.util.$AbstractIterator$State[] values() -> a
com.google.inject.internal.util.$AbstractMapEntry -> gE:
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.internal.util.$AsynchronousComputationException -> gF:
com.google.inject.internal.util.$CustomConcurrentHashMap$Builder -> gG:
    float loadFactor -> a
    int initialCapacity -> b
    int concurrencyLevel -> c
com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl -> gH:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy computingStrategy$4df2c919 -> d
    com.google.inject.internal.util.$Function computer -> e
    java.lang.Object get(java.lang.Object) -> get
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl -> gI:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy -> a
    int segmentMask -> d
    int segmentShift -> e
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments -> b
    float loadFactor -> c
    java.util.Set keySet -> f
    java.util.Collection values -> g
    java.util.Set entrySet -> h
    int hash(java.lang.Object) -> a
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int) -> a
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator -> gJ:
    java.lang.Object next() -> next
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet -> gK:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$HashIterator -> gL:
    int nextSegmentIndex -> a
    int nextTableIndex -> b
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> c
    java.lang.Object nextEntry -> d
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$WriteThroughEntry nextExternal -> e
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$WriteThroughEntry lastReturned -> f
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> g
    void advance() -> b
    boolean nextInChain() -> c
    boolean nextInTable() -> d
    boolean advanceTo(java.lang.Object) -> a
    boolean hasNext() -> hasNext
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$WriteThroughEntry nextEntry() -> a
    void remove() -> remove
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$InternalsImpl -> gM:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> a
    boolean removeEntry(java.lang.Object,java.lang.Object) -> a
    boolean removeEntry(java.lang.Object) -> a
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$KeyIterator -> gN:
    java.lang.Object next() -> next
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$KeySet -> gO:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment -> gP:
    int count -> a
    int modCount -> b
    int threshold -> c
    java.util.concurrent.atomic.AtomicReferenceArray table -> d
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> e
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> a
    java.lang.Object getFirst(int) -> b
    java.lang.Object getEntry(java.lang.Object,int) -> a
    java.lang.Object get(java.lang.Object,int) -> b
    boolean containsKey(java.lang.Object,int) -> c
    boolean containsValue(java.lang.Object) -> a
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> a
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> a
    void expand() -> a
    java.lang.Object remove(java.lang.Object,int) -> d
    boolean remove(java.lang.Object,int,java.lang.Object) -> b
    boolean removeEntry(java.lang.Object,int,java.lang.Object) -> c
    boolean removeEntry(java.lang.Object,int) -> e
    void clear() -> b
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$ValueIterator -> gQ:
    java.lang.Object next() -> next
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Values -> gR:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$WriteThroughEntry -> gS:
    java.lang.Object key -> a
    java.lang.Object value -> b
    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0 -> c
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.inject.internal.util.$CustomConcurrentHashMap$Internals -> gT:
    boolean removeEntry(java.lang.Object,java.lang.Object) -> a
    boolean removeEntry(java.lang.Object) -> a
com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy -> gU:
    java.lang.Object newEntry(java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    void setValue(java.lang.Object,java.lang.Object) -> a
    java.lang.Object getValue(java.lang.Object) -> a
    boolean equalKeys(java.lang.Object,java.lang.Object) -> b
    boolean equalValues(java.lang.Object,java.lang.Object) -> c
    int hashKey(java.lang.Object) -> b
    java.lang.Object getKey(java.lang.Object) -> c
    java.lang.Object getNext(java.lang.Object) -> d
    int getHash(java.lang.Object) -> e
    void setInternals(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals) -> a
    java.lang.Object compute(java.lang.Object,java.lang.Object,com.google.inject.internal.util.$Function) -> a
    java.lang.Object waitForValue(java.lang.Object) -> f
com.google.inject.internal.util.$ExpirationTimer -> gV:
    java.util.Timer instance -> a
com.google.inject.internal.util.$FinalizableReference -> gW:
    void finalizeReferent() -> a
com.google.inject.internal.util.$FinalizableReferenceQueue -> gX:
    java.util.logging.Logger logger -> b
    java.lang.reflect.Method startFinalizer -> c
    java.lang.ref.ReferenceQueue queue -> a
    boolean threadStarted -> d
    void cleanUp() -> a
    java.lang.reflect.Method getStartFinalizer(java.lang.Class) -> a
    java.util.logging.Logger access$000() -> b
com.google.inject.internal.util.$FinalizableReferenceQueue$DecoupledLoader -> gY:
    java.lang.Class loadFinalizer() -> a
com.google.inject.internal.util.$FinalizableReferenceQueue$DirectLoader -> gZ:
    java.lang.Class loadFinalizer() -> a
com.google.inject.internal.util.$FinalizableReferenceQueue$FinalizerLoader -> ha:
    java.lang.Class loadFinalizer() -> a
com.google.inject.internal.util.$FinalizableReferenceQueue$SystemLoader -> hb:
    java.lang.Class loadFinalizer() -> a
com.google.inject.internal.util.$FinalizableSoftReference -> hc:
com.google.inject.internal.util.$FinalizableWeakReference -> hd:
com.google.inject.internal.util.$Finalizer -> he:
    java.util.logging.Logger logger -> a
    java.lang.ref.WeakReference finalizableReferenceClassReference -> b
    java.lang.ref.PhantomReference frqReference -> c
    java.lang.ref.ReferenceQueue queue -> d
    void run() -> run
    java.lang.reflect.Method getFinalizeReferentMethod() -> a
com.google.inject.internal.util.$Finalizer$ShutDown -> hf:
com.google.inject.internal.util.$Function -> hg:
    java.lang.Object apply(java.lang.Object) -> a
com.google.inject.internal.util.$ImmutableCollection -> hh:
    com.google.inject.internal.util.$ImmutableCollection EMPTY_IMMUTABLE_COLLECTION -> a
    java.lang.Object[] EMPTY_ARRAY -> b
    com.google.inject.internal.util.$UnmodifiableIterator EMPTY_ITERATOR -> c
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableCollection$1 -> hi:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.inject.internal.util.$ImmutableCollection$EmptyImmutableCollection -> hj:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableEntry -> hk:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.inject.internal.util.$ImmutableList -> hl:
    com.google.inject.internal.util.$ImmutableList EMPTY_IMMUTABLE_LIST -> d
    com.google.inject.internal.util.$ImmutableList of() -> b
    com.google.inject.internal.util.$ImmutableList of(java.lang.Object) -> a
    com.google.inject.internal.util.$ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    com.google.inject.internal.util.$ImmutableList of(java.lang.Object[]) -> a
    com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable) -> a
    java.lang.Object[] nullChecked(java.lang.Object[]) -> b
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    com.google.inject.internal.util.$ImmutableList subList(int,int) -> a
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    java.lang.Object[] copyIntoArray(java.lang.Object[]) -> c
    java.lang.Object[] copyOf(java.lang.Object[],int) -> a
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
com.google.inject.internal.util.$ImmutableList$EmptyImmutableList -> hm:
    java.lang.Object[] EMPTY_ARRAY -> e
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.inject.internal.util.$ImmutableList subList(int,int) -> a
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableList$RegularImmutableList -> hn:
    int offset -> e
    int size -> f
    java.lang.Object[] array -> g
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.inject.internal.util.$ImmutableList subList(int,int) -> a
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
    int access$300(com.google.inject.internal.util.$ImmutableList$RegularImmutableList) -> a
com.google.inject.internal.util.$ImmutableList$RegularImmutableList$1 -> ho:
    int index -> a
    int val$start -> b
    com.google.inject.internal.util.$ImmutableList$RegularImmutableList this$0 -> c
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    void remove() -> remove
com.google.inject.internal.util.$ImmutableMap -> hp:
    com.google.inject.internal.util.$ImmutableMap EMPTY_IMMUTABLE_MAP -> a
    com.google.inject.internal.util.$ImmutableMap of() -> a
    java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object) -> b
    com.google.inject.internal.util.$ImmutableMap copyOf(java.util.Map) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.lang.Object get(java.lang.Object) -> get
    com.google.inject.internal.util.$ImmutableSet entrySet() -> b
    com.google.inject.internal.util.$ImmutableSet keySet() -> c
    com.google.inject.internal.util.$ImmutableCollection values() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.Map$Entry access$300(java.lang.Object,java.lang.Object) -> a
com.google.inject.internal.util.$ImmutableMap$Builder -> hq:
    java.util.List entries -> a
    com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> a
com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap -> hr:
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    com.google.inject.internal.util.$ImmutableSet entrySet() -> b
    com.google.inject.internal.util.$ImmutableSet keySet() -> c
    com.google.inject.internal.util.$ImmutableCollection values() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap -> hs:
    java.util.Map$Entry[] entries -> a
    java.lang.Object[] table -> b
    int mask -> c
    int keySetHashCode -> d
    com.google.inject.internal.util.$ImmutableSet entrySet -> e
    com.google.inject.internal.util.$ImmutableSet keySet -> f
    com.google.inject.internal.util.$ImmutableCollection values -> g
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    com.google.inject.internal.util.$ImmutableSet entrySet() -> b
    com.google.inject.internal.util.$ImmutableSet keySet() -> c
    com.google.inject.internal.util.$ImmutableCollection values() -> d
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.Map$Entry[] access$500(com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap) -> a
    int access$600(com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap) -> b
com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap$EntrySet -> ht:
    com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap map -> d
    boolean contains(java.lang.Object) -> contains
com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap$KeySet -> hu:
    com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap map -> e
    boolean contains(java.lang.Object) -> contains
    java.lang.Object transform(java.lang.Object) -> a
com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap$Values -> hv:
    com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap map -> d
    int size() -> size
    boolean isEmpty() -> isEmpty
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap$Values$1 -> hw:
    int index -> a
    com.google.inject.internal.util.$ImmutableMap$RegularImmutableMap$Values this$0 -> b
    java.lang.Object computeNext() -> a
com.google.inject.internal.util.$ImmutableMap$SingletonImmutableMap -> hx:
    java.lang.Object singleKey -> a
    java.lang.Object singleValue -> b
    java.util.Map$Entry entry -> c
    com.google.inject.internal.util.$ImmutableSet entrySet -> d
    com.google.inject.internal.util.$ImmutableSet keySet -> e
    com.google.inject.internal.util.$ImmutableCollection values -> f
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    com.google.inject.internal.util.$ImmutableSet entrySet() -> b
    com.google.inject.internal.util.$ImmutableSet keySet() -> c
    com.google.inject.internal.util.$ImmutableCollection values() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
com.google.inject.internal.util.$ImmutableMap$SingletonImmutableMap$Values -> hy:
    java.lang.Object singleValue -> d
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableSet -> hz:
    com.google.inject.internal.util.$ImmutableSet EMPTY_IMMUTABLE_SET -> d
    com.google.inject.internal.util.$ImmutableSet of() -> b
    com.google.inject.internal.util.$ImmutableSet of(java.lang.Object) -> b
    com.google.inject.internal.util.$ImmutableSet of(java.lang.Object[]) -> a
    com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable) -> a
    boolean isHashCodeFast() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.String toString() -> toString
    com.google.inject.internal.util.$ImmutableSet create(java.lang.Iterable,int) -> a
    com.google.inject.internal.util.$ImmutableSet$Builder builder() -> d
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableSet$ArrayImmutableSet -> hA:
    java.lang.Object[] elements -> d
    int size() -> size
    boolean isEmpty() -> isEmpty
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean containsAll(java.util.Collection) -> containsAll
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableSet$Builder -> hB:
    java.util.ArrayList contents -> a
    com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object) -> a
    com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable) -> a
com.google.inject.internal.util.$ImmutableSet$EmptyImmutableSet -> hC:
    java.lang.Object[] EMPTY_ARRAY -> d
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> c
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableSet$RegularImmutableSet -> hD:
    java.lang.Object[] table -> d
    int mask -> e
    int hashCode -> f
    boolean contains(java.lang.Object) -> contains
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> c
com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet -> hE:
    java.lang.Object element -> d
    int hashCode -> e
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> c
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableSet$TransformedImmutableSet -> hF:
    java.lang.Object[] source -> d
    int hashCode -> e
    java.lang.Object transform(java.lang.Object) -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    com.google.inject.internal.util.$UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> c
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$ImmutableSet$TransformedImmutableSet$1 -> hG:
    int index -> a
    com.google.inject.internal.util.$ImmutableSet$TransformedImmutableSet this$0 -> b
    java.lang.Object computeNext() -> a
com.google.inject.internal.util.$Iterables$1 -> hH:
    java.lang.Object apply(java.lang.Object) -> a
com.google.inject.internal.util.$Iterables$2 -> hI:
    java.lang.Iterable val$iterators -> a
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$Iterables$3 -> hJ:
    java.lang.Iterable val$fromIterable -> a
    com.google.inject.internal.util.$Function val$function -> b
    java.util.Iterator iterator() -> iterator
com.google.inject.internal.util.$Iterables$IterableWithToString -> hK:
    java.lang.String toString() -> toString
com.google.inject.internal.util.$Iterators -> hL:
    java.util.Iterator EMPTY_ITERATOR -> a
    java.util.ListIterator EMPTY_LIST_ITERATOR -> b
    com.google.inject.internal.util.$UnmodifiableIterator emptyIterator() -> a
    java.util.ListIterator emptyListIterator() -> b
    com.google.inject.internal.util.$UnmodifiableIterator unmodifiableIterator(java.util.Iterator) -> a
    java.lang.String toString(java.util.Iterator) -> b
    java.lang.Object getOnlyElement(java.util.Iterator) -> c
    java.util.Iterator concat(java.util.Iterator) -> d
    java.util.Iterator transform(java.util.Iterator,com.google.inject.internal.util.$Function) -> a
    com.google.inject.internal.util.$UnmodifiableIterator forArray(java.lang.Object[]) -> a
    com.google.inject.internal.util.$UnmodifiableIterator forArray(java.lang.Object[],int,int) -> a
    com.google.inject.internal.util.$UnmodifiableIterator singletonIterator(java.lang.Object) -> a
com.google.inject.internal.util.$Iterators$1 -> hM:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.inject.internal.util.$Iterators$2 -> hN:
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    void remove() -> remove
com.google.inject.internal.util.$Iterators$3 -> hO:
    java.util.Iterator val$iterator -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.inject.internal.util.$Iterators$4 -> hP:
    java.util.Iterator current -> a
    java.util.Iterator removeFrom -> b
    java.util.Iterator val$inputs -> c
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.inject.internal.util.$Iterators$5 -> hQ:
    java.util.Iterator val$fromIterator -> a
    com.google.inject.internal.util.$Function val$function -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.inject.internal.util.$Iterators$6 -> hR:
    int length -> a
    int i -> b
    java.lang.Object[] val$array -> c
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.inject.internal.util.$Iterators$7 -> hS:
    int i -> a
    int val$offset -> b
    int val$end -> c
    java.lang.Object[] val$array -> d
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.inject.internal.util.$Iterators$8 -> hT:
    boolean done -> a
    java.lang.Object val$value -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.inject.internal.util.$MapMaker -> hU:
    com.google.inject.internal.util.$MapMaker$Strength keyStrength -> a
    com.google.inject.internal.util.$MapMaker$Strength valueStrength -> b
    long expirationNanos -> c
    com.google.inject.internal.util.$CustomConcurrentHashMap$Builder builder -> d
    com.google.inject.internal.util.$MapMaker$ValueReference COMPUTING -> e
    com.google.inject.internal.util.$MapMaker weakKeys() -> a
    com.google.inject.internal.util.$MapMaker weakValues() -> b
    java.util.concurrent.ConcurrentMap makeComputingMap(com.google.inject.internal.util.$Function) -> a
    com.google.inject.internal.util.$MapMaker$Strength access$100(com.google.inject.internal.util.$MapMaker) -> a
    com.google.inject.internal.util.$MapMaker$Strength access$200(com.google.inject.internal.util.$MapMaker) -> b
    long access$300(com.google.inject.internal.util.$MapMaker) -> c
    com.google.inject.internal.util.$CustomConcurrentHashMap$Builder access$400(com.google.inject.internal.util.$MapMaker) -> d
    com.google.inject.internal.util.$MapMaker$ValueReference access$500() -> c
    com.google.inject.internal.util.$MapMaker$ValueReference access$600() -> d
com.google.inject.internal.util.$MapMaker$1 -> hV:
    java.lang.Object get() -> get
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$MapMaker$ComputationExceptionReference -> hW:
    java.lang.Throwable t -> a
    java.lang.Object get() -> get
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$MapMaker$LinkedSoftEntry -> hX:
    com.google.inject.internal.util.$MapMaker$ReferenceEntry next -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
com.google.inject.internal.util.$MapMaker$LinkedStrongEntry -> hY:
    com.google.inject.internal.util.$MapMaker$ReferenceEntry next -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
com.google.inject.internal.util.$MapMaker$LinkedWeakEntry -> hZ:
    com.google.inject.internal.util.$MapMaker$ReferenceEntry next -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
com.google.inject.internal.util.$MapMaker$NullOutputExceptionReference -> ia:
    java.lang.String message -> a
    java.lang.Object get() -> get
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$MapMaker$QueueHolder -> ib:
    com.google.inject.internal.util.$FinalizableReferenceQueue queue -> a
com.google.inject.internal.util.$MapMaker$ReferenceEntry -> ic:
    com.google.inject.internal.util.$MapMaker$ValueReference getValueReference() -> c
    void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference) -> a
    void valueReclaimed() -> d
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
    int getHash() -> e
    java.lang.Object getKey() -> f
com.google.inject.internal.util.$MapMaker$SoftEntry -> id:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals -> a
    int hash -> b
    com.google.inject.internal.util.$MapMaker$ValueReference valueReference -> c
    java.lang.Object getKey() -> f
    void finalizeReferent() -> a
    com.google.inject.internal.util.$MapMaker$ValueReference getValueReference() -> c
    void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference) -> a
    void valueReclaimed() -> d
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
    int getHash() -> e
com.google.inject.internal.util.$MapMaker$SoftValueReference -> ie:
    com.google.inject.internal.util.$MapMaker$ReferenceEntry entry -> a
    void finalizeReferent() -> a
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$MapMaker$StrategyImpl -> if:
    com.google.inject.internal.util.$MapMaker$Strength keyStrength -> c
    com.google.inject.internal.util.$MapMaker$Strength valueStrength -> d
    java.util.concurrent.ConcurrentMap map -> a
    long expirationNanos -> e
    com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals -> b
    void setValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object) -> a
    boolean equalKeys(java.lang.Object,java.lang.Object) -> b
    boolean equalValues(java.lang.Object,java.lang.Object) -> c
    int hashKey(java.lang.Object) -> b
    com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object compute(java.lang.Object,com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$Function) -> a
    void setValueReference(com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ValueReference) -> a
    void setInternals(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals) -> a
    java.lang.Object waitForValue(java.lang.Object) -> f
    java.lang.Object compute(java.lang.Object,java.lang.Object,com.google.inject.internal.util.$Function) -> a
    int getHash(java.lang.Object) -> e
    java.lang.Object getNext(java.lang.Object) -> d
    java.lang.Object getKey(java.lang.Object) -> c
    java.lang.Object getValue(java.lang.Object) -> a
    void setValue(java.lang.Object,java.lang.Object) -> a
    java.lang.Object copyEntry(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object newEntry(java.lang.Object,int,java.lang.Object) -> a
com.google.inject.internal.util.$MapMaker$StrategyImpl$1 -> ig:
    java.lang.ref.WeakReference val$keyReference -> a
    java.lang.ref.WeakReference val$valueReference -> b
    com.google.inject.internal.util.$MapMaker$StrategyImpl this$0 -> c
    void run() -> run
com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference -> ih:
    com.google.inject.internal.util.$MapMaker$ReferenceEntry original -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry -> b
    com.google.inject.internal.util.$MapMaker$StrategyImpl this$0 -> c
    java.lang.Object get() -> get
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
    void removeEntry() -> b
com.google.inject.internal.util.$MapMaker$Strength -> ii:
    com.google.inject.internal.util.$MapMaker$Strength WEAK -> a
    com.google.inject.internal.util.$MapMaker$Strength SOFT -> c
    com.google.inject.internal.util.$MapMaker$Strength STRONG -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int hash(java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ValueReference referenceValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals,java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
com.google.inject.internal.util.$MapMaker$Strength$1 -> ij:
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int hash(java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ValueReference referenceValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals,java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
com.google.inject.internal.util.$MapMaker$Strength$2 -> ik:
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int hash(java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ValueReference referenceValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals,java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
com.google.inject.internal.util.$MapMaker$Strength$3 -> il:
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int hash(java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ValueReference referenceValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object) -> a
    com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals,java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
com.google.inject.internal.util.$MapMaker$StrongEntry -> im:
    java.lang.Object key -> a
    com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals -> b
    int hash -> c
    com.google.inject.internal.util.$MapMaker$ValueReference valueReference -> d
    java.lang.Object getKey() -> f
    com.google.inject.internal.util.$MapMaker$ValueReference getValueReference() -> c
    void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference) -> a
    void valueReclaimed() -> d
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
    int getHash() -> e
com.google.inject.internal.util.$MapMaker$StrongValueReference -> in:
    java.lang.Object referent -> a
    java.lang.Object get() -> get
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$MapMaker$ValueReference -> io:
    java.lang.Object get() -> get
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$MapMaker$WeakEntry -> ip:
    com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals -> a
    int hash -> b
    com.google.inject.internal.util.$MapMaker$ValueReference valueReference -> c
    java.lang.Object getKey() -> f
    void finalizeReferent() -> a
    com.google.inject.internal.util.$MapMaker$ValueReference getValueReference() -> c
    void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference) -> a
    void valueReclaimed() -> d
    com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext() -> b
    int getHash() -> e
com.google.inject.internal.util.$MapMaker$WeakValueReference -> iq:
    com.google.inject.internal.util.$MapMaker$ReferenceEntry entry -> a
    void finalizeReferent() -> a
    com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry) -> a
    java.lang.Object waitForValue() -> a_
com.google.inject.internal.util.$NullOutputException -> ir:
com.google.inject.internal.util.$Nullable -> is:
com.google.inject.internal.util.$SourceProvider -> it:
    java.lang.Object UNKNOWN_SOURCE -> a
    com.google.inject.internal.util.$ImmutableSet classNamesToSkip -> c
    com.google.inject.internal.util.$SourceProvider DEFAULT_INSTANCE -> b
    com.google.inject.internal.util.$SourceProvider plusSkippedClasses(java.lang.Class[]) -> a
    java.util.List asStrings(java.lang.Class[]) -> b
    java.lang.StackTraceElement get() -> a
com.google.inject.internal.util.$Stopwatch -> iu:
    java.util.logging.Logger logger -> a
    long start -> b
    long reset() -> a
    void resetAndLog(java.lang.String) -> a
com.google.inject.internal.util.$ToStringBuilder -> iv:
    java.util.Map map -> a
    java.lang.String name -> b
    com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object) -> a
    java.lang.String toString() -> toString
com.google.inject.internal.util.$UnmodifiableIterator -> iw:
    void remove() -> remove
com.google.inject.matcher.Matcher -> ix:
    boolean matches(java.lang.Object) -> a
com.google.inject.matcher.Matchers -> iy:
    com.google.inject.matcher.Matcher ANY -> a
    com.google.inject.matcher.Matcher any() -> a
    com.google.inject.matcher.Matcher subclassesOf(java.lang.Class) -> a
    com.google.inject.matcher.Matcher identicalTo(java.lang.Object) -> a
com.google.inject.matcher.Matchers$Any -> iz:
    boolean matches(java.lang.Object) -> a
    java.lang.String toString() -> toString
com.google.inject.matcher.Matchers$IdenticalTo -> iA:
    java.lang.Object value -> a
    boolean matches(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.inject.matcher.Matchers$SubclassesOf -> iB:
    java.lang.Class superclass -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean matches(java.lang.Object) -> a
com.google.inject.name.Named -> iC:
    java.lang.String value() -> a
com.google.inject.name.NamedImpl -> iD:
    java.lang.String value -> a
    java.lang.String value() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Class annotationType() -> annotationType
com.google.inject.spi.BindingTargetVisitor -> iE:
    java.lang.Object visit(com.google.inject.spi.InstanceBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ProviderInstanceBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ProviderKeyBinding) -> a
    java.lang.Object visit(com.google.inject.spi.LinkedKeyBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ExposedBinding) -> a
    java.lang.Object visit(com.google.inject.spi.UntargettedBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ConstructorBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ConvertedConstantBinding) -> a
    java.lang.Object visit(com.google.inject.spi.ProviderBinding) -> a
    java.lang.Object visitOther(com.google.inject.Binding) -> a
com.google.inject.spi.ConstructorBinding -> iF:
    com.google.inject.spi.InjectionPoint getConstructor() -> k
com.google.inject.spi.ConvertedConstantBinding -> iG:
com.google.inject.spi.Dependency -> iH:
    com.google.inject.spi.InjectionPoint injectionPoint -> a
    com.google.inject.Key key -> b
    boolean nullable -> c
    int parameterIndex -> d
    com.google.inject.spi.Dependency get(com.google.inject.Key) -> a
    java.util.Set forInjectionPoints(java.util.Set) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.inject.spi.Element -> iI:
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
com.google.inject.spi.ElementVisitor -> iJ:
    java.lang.Object visit(com.google.inject.Binding) -> a
    java.lang.Object visit(com.google.inject.spi.ScopeBinding) -> a
    java.lang.Object visit(com.google.inject.spi.TypeConverterBinding) -> a
    java.lang.Object visit(com.google.inject.spi.InjectionRequest) -> a
    java.lang.Object visit(com.google.inject.spi.StaticInjectionRequest) -> a
    java.lang.Object visit(com.google.inject.spi.ProviderLookup) -> a
    java.lang.Object visit(com.google.inject.spi.Message) -> a
    java.lang.Object visit(com.google.inject.spi.PrivateElements) -> a
    java.lang.Object visit(com.google.inject.spi.TypeListenerBinding) -> a
    java.lang.Object visitOther(com.google.inject.spi.Element) -> a
com.google.inject.spi.Elements -> iK:
    java.util.List getElements(com.google.inject.Module[]) -> a
    java.util.List getElements(com.google.inject.Stage,java.lang.Iterable) -> a
com.google.inject.spi.Elements$1 -> iL:
    java.lang.Object visit(com.google.inject.spi.InstanceBinding) -> a
    java.lang.Object visitOther(com.google.inject.Binding) -> a
com.google.inject.spi.Elements$RecordingBinder -> iM:
    com.google.inject.Stage stage -> a
    java.util.Set modules -> b
    java.util.List elements -> c
    java.lang.Object source -> d
    com.google.inject.internal.util.$SourceProvider sourceProvider -> e
    com.google.inject.spi.Elements$RecordingBinder parent -> f
    com.google.inject.internal.PrivateElementsImpl privateElements -> g
    void bindScope(java.lang.Class,com.google.inject.Scope) -> a
    void requestInjection(java.lang.Object) -> a
    void bindListener(com.google.inject.matcher.Matcher,com.google.inject.spi.TypeListener) -> a
    void requestStaticInjection(java.lang.Class[]) -> a
    void install(com.google.inject.Module) -> a
    void addError(java.lang.String,java.lang.Object[]) -> a
    void addError(com.google.inject.spi.Message) -> a
    com.google.inject.binder.ScopedBindingBuilder bind$314c39fd(com.google.inject.Key) -> d
    com.google.inject.binder.ScopedBindingBuilder bind$632dde3e(java.lang.Class) -> a
    com.google.inject.binder.AnnotatedConstantBindingBuilder bindConstant() -> a
    com.google.inject.Provider getProvider(com.google.inject.Key) -> b
    com.google.inject.Provider getProvider(java.lang.Class) -> b
    com.google.inject.PrivateBinder newPrivateBinder() -> b
    void expose(com.google.inject.Key) -> c
    java.lang.Object getSource() -> c
    java.lang.String toString() -> toString
    com.google.inject.Binder withSource(java.lang.Object) -> b
    com.google.inject.binder.ScopedBindingBuilder bind$5e9cddf6(com.google.inject.Key) -> a
    java.util.List access$100(com.google.inject.spi.Elements$RecordingBinder) -> a
com.google.inject.spi.Elements$RecordingBinder$1 -> iN:
com.google.inject.spi.ExposedBinding -> iO:
com.google.inject.spi.HasDependencies -> iP:
    java.util.Set getDependencies() -> l
com.google.inject.spi.InjectionListener -> iQ:
    roboguice.event.eventListener.factory.EventListenerThreadingDecorator observerThreadingDecorator -> a
    com.google.inject.Provider eventManagerProvider -> b
    java.lang.reflect.Method method -> c
    java.lang.Class event -> d
    roboguice.event.EventThread threadType -> e
    void afterInjection(java.lang.Object) -> a
com.google.inject.spi.InjectionPoint -> iR:
    java.util.logging.Logger logger -> a
    boolean optional -> b
    java.lang.reflect.Member member -> c
    com.google.inject.TypeLiteral declaringType -> d
    com.google.inject.internal.util.$ImmutableList dependencies -> e
    com.google.inject.internal.util.$ImmutableList forMember(java.lang.reflect.Member,com.google.inject.TypeLiteral,java.lang.annotation.Annotation[][]) -> a
    com.google.inject.spi.Dependency newDependency(com.google.inject.Key,boolean,int) -> a
    java.lang.reflect.Member getMember() -> a
    java.util.List getDependencies() -> b
    boolean isOptional() -> c
    boolean isToolable() -> d
    com.google.inject.TypeLiteral getDeclaringType() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.inject.spi.InjectionPoint forConstructorOf(com.google.inject.TypeLiteral) -> a
    java.util.Set forStaticMethodsAndFields(java.lang.Class) -> a
    java.util.Set forInstanceMethodsAndFields(com.google.inject.TypeLiteral) -> b
    java.util.Set forInstanceMethodsAndFields(java.lang.Class) -> b
    boolean checkForMisplacedBindingAnnotations(java.lang.reflect.Member,com.google.inject.internal.Errors) -> a
    java.lang.annotation.Annotation getAtInject(java.lang.reflect.AnnotatedElement) -> a
    java.util.Set getInjectionPoints(com.google.inject.TypeLiteral,boolean,com.google.inject.internal.Errors) -> a
    boolean access$000(java.lang.reflect.Method,java.lang.reflect.Method) -> a
com.google.inject.spi.InjectionPoint$InjectableField -> iS:
    java.lang.reflect.Field field -> f
    com.google.inject.spi.InjectionPoint toInjectionPoint() -> a
com.google.inject.spi.InjectionPoint$InjectableMember -> iT:
    com.google.inject.TypeLiteral declaringType -> a
    boolean optional -> b
    boolean jsr330 -> c
    com.google.inject.spi.InjectionPoint$InjectableMember previous -> d
    com.google.inject.spi.InjectionPoint$InjectableMember next -> e
    com.google.inject.spi.InjectionPoint toInjectionPoint() -> a
com.google.inject.spi.InjectionPoint$InjectableMembers -> iU:
    com.google.inject.spi.InjectionPoint$InjectableMember head -> a
    com.google.inject.spi.InjectionPoint$InjectableMember tail -> b
    void add(com.google.inject.spi.InjectionPoint$InjectableMember) -> a
com.google.inject.spi.InjectionPoint$InjectableMethod -> iV:
    java.lang.reflect.Method method -> f
    boolean overrodeGuiceInject -> g
    com.google.inject.spi.InjectionPoint toInjectionPoint() -> a
    boolean isFinal() -> b
com.google.inject.spi.InjectionPoint$OverrideIndex -> iW:
    com.google.inject.spi.InjectionPoint$InjectableMembers injectableMembers -> a
    java.util.Map bySignature -> b
    com.google.inject.spi.InjectionPoint$Position position -> c
    java.lang.reflect.Method lastMethod -> d
    com.google.inject.spi.InjectionPoint$Signature lastSignature -> e
    boolean removeIfOverriddenBy(java.lang.reflect.Method,boolean,com.google.inject.spi.InjectionPoint$InjectableMethod) -> a
com.google.inject.spi.InjectionPoint$Position -> iX:
    com.google.inject.spi.InjectionPoint$Position TOP -> a
    com.google.inject.spi.InjectionPoint$Position MIDDLE -> b
    com.google.inject.spi.InjectionPoint$Position BOTTOM -> c
com.google.inject.spi.InjectionPoint$Signature -> iY:
    java.lang.String name -> a
    java.lang.Class[] parameterTypes -> b
    int hash -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.inject.spi.InjectionRequest -> iZ:
    java.lang.Object source -> a
    java.lang.Object instance -> b
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
com.google.inject.spi.InstanceBinding -> ja:
    java.lang.Object getInstance() -> h
    java.util.Set getInjectionPoints() -> i
com.google.inject.spi.LinkedKeyBinding -> jb:
    com.google.inject.Key getLinkedKey() -> h
com.google.inject.spi.Message -> jc:
    java.lang.String message -> a
    java.lang.Throwable cause -> b
    java.util.List sources -> c
    java.lang.String getSource() -> a
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
    java.lang.Throwable getCause() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getSource() -> c
com.google.inject.spi.PrivateElements -> jd:
    java.util.List getElements() -> a
    com.google.inject.Injector getInjector() -> b
    java.util.Set getExposedKeys() -> d
    java.lang.Object getExposedSource(com.google.inject.Key) -> a
com.google.inject.spi.ProviderBinding -> je:
com.google.inject.spi.ProviderInstanceBinding -> jf:
    com.google.inject.Provider getProviderInstance() -> h
    java.util.Set getInjectionPoints() -> i
com.google.inject.spi.ProviderKeyBinding -> jg:
    com.google.inject.Key getProviderKey() -> h
com.google.inject.spi.ProviderLookup -> jh:
    java.lang.Object source -> c
    com.google.inject.Key key -> a
    com.google.inject.Provider delegate -> b
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
    com.google.inject.Provider getProvider() -> a
com.google.inject.spi.ProviderLookup$1 -> ji:
    com.google.inject.spi.ProviderLookup this$0 -> a
    java.lang.Object get() -> a
    java.lang.String toString() -> toString
com.google.inject.spi.ProviderWithDependencies -> jj:
com.google.inject.spi.ProviderWithExtensionVisitor -> jk:
    java.lang.Object acceptExtensionVisitor$7370416a() -> b
com.google.inject.spi.ScopeBinding -> jl:
    java.lang.Object source -> a
    java.lang.Class annotationType -> b
    com.google.inject.Scope scope -> c
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
com.google.inject.spi.StaticInjectionRequest -> jm:
    java.lang.Object source -> a
    java.lang.Class type -> b
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
com.google.inject.spi.Toolable -> jn:
com.google.inject.spi.TypeConverter -> jo:
    java.lang.Object convert(java.lang.String,com.google.inject.TypeLiteral) -> a
com.google.inject.spi.TypeConverterBinding -> jp:
    java.lang.Object source -> a
    com.google.inject.matcher.Matcher typeMatcher -> b
    com.google.inject.spi.TypeConverter typeConverter -> c
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
    java.lang.String toString() -> toString
com.google.inject.spi.TypeEncounter -> jq:
    com.google.inject.internal.Lookups lookups -> a
    java.util.List membersInjectors -> b
    java.util.List injectionListeners -> c
    boolean valid -> d
    com.google.inject.Provider getProvider(java.lang.Class) -> a
    void register(com.google.inject.MembersInjector) -> a
    void register(com.google.inject.spi.InjectionListener) -> a
    void invalidate() -> a
    com.google.inject.internal.util.$ImmutableList getMembersInjectors() -> b
    com.google.inject.internal.util.$ImmutableList getInjectionListeners() -> c
    com.google.inject.Provider getProvider(com.google.inject.Key) -> a
com.google.inject.spi.TypeListener -> jr:
    void hear(com.google.inject.TypeLiteral,com.google.inject.spi.TypeEncounter) -> a
com.google.inject.spi.TypeListenerBinding -> js:
    java.lang.Object source -> a
    com.google.inject.matcher.Matcher typeMatcher -> b
    com.google.inject.spi.TypeListener listener -> c
    java.lang.Object getSource() -> c
    java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor) -> a
com.google.inject.spi.UntargettedBinding -> jt:
com.google.inject.util.Modules -> ju:
    com.google.inject.Module EMPTY_MODULE -> a
com.google.inject.util.Modules$1 -> jv:
    void configure(com.google.inject.Binder) -> a
com.google.inject.util.Providers$1 -> jw:
    java.lang.Object val$instance -> a
    java.lang.Object get() -> a
    java.lang.String toString() -> toString
com.orm.Database -> jx:
    com.orm.SugarDb sugarDb -> a
    android.database.sqlite.SQLiteDatabase sqLiteDatabase -> b
    android.database.sqlite.SQLiteDatabase openDB() -> a
    void closeDB() -> b
com.orm.NumberComparator -> jy:
    int compare(java.lang.Object,java.lang.Object) -> compare
    char charAt(java.lang.String,int) -> a
com.orm.SugarApp -> com.orm.SugarApp:
    com.orm.Database database -> a
    com.orm.SugarApp sugarContext -> b
    void onCreate() -> onCreate
    void onTerminate() -> onTerminate
    com.orm.SugarApp getSugarContext() -> g
com.orm.SugarConfig -> jz:
    java.util.Map fields -> a
    java.lang.String getDatabaseName(android.content.Context) -> a
    void setFields(java.lang.Class,java.util.List) -> a
    java.util.List getFields(java.lang.Class) -> a
    int getDatabaseVersion(android.content.Context) -> b
    java.lang.String getDomainPackageName(android.content.Context) -> c
    boolean getDebugEnabled(android.content.Context) -> d
    java.lang.String getMetaDataString(android.content.Context,java.lang.String) -> a
    java.lang.Integer getMetaDataInteger(android.content.Context,java.lang.String) -> b
    java.lang.Boolean getMetaDataBoolean(android.content.Context,java.lang.String) -> c
com.orm.SugarCursorFactory -> jA:
    boolean debugEnabled -> a
    android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery) -> newCursor
com.orm.SugarDb -> jB:
    android.content.Context context -> a
    java.util.List getDomainClasses(android.content.Context) -> a
    com.orm.SugarRecord getDomainClass(java.lang.String,android.content.Context) -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    boolean executeSugarUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
    void executeScript(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
com.orm.SugarRecord -> jC:
    com.orm.SugarApp application -> a
    com.orm.Database database -> b
    java.lang.String tableName -> c
    java.lang.Long id -> d
    void delete() -> b
    void deleteAll(java.lang.Class) -> a
    void save() -> c
    java.util.List listAll(java.lang.Class) -> b
    java.util.List find(java.lang.Class,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> a
    void inflate(android.database.Cursor) -> a
    java.util.List getTableFields() -> d
    java.util.List getAllFields(java.util.List,java.lang.Class) -> a
    java.lang.String getSqlName() -> e
    java.lang.String getTableName(java.lang.Class) -> c
com.orm.dsl.Ignore -> jD:
javax.inject.Inject -> jE:
javax.inject.Named -> jF:
    java.lang.String value() -> a
javax.inject.Provider -> jG:
    java.lang.Object get() -> a
javax.inject.Qualifier -> jH:
javax.inject.Scope -> jI:
javax.inject.Singleton -> jJ:
roboguice.RoboGuice -> jK:
    com.google.inject.Stage DEFAULT_STAGE -> a
    java.util.WeakHashMap injectors -> b
    java.util.WeakHashMap resourceListeners -> c
    java.util.WeakHashMap viewListeners -> d
    int modulesResourceId -> e
    com.google.inject.Injector getBaseApplicationInjector(android.app.Application) -> a
    com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage,com.google.inject.Module[]) -> a
    com.google.inject.Injector setBaseApplicationInjector(android.app.Application,com.google.inject.Stage) -> a
    roboguice.inject.RoboInjector getInjector(android.content.Context) -> a
    roboguice.inject.ResourceListener getResourceListener(android.app.Application) -> b
    roboguice.inject.ViewListener getViewListener(android.app.Application) -> c
    void destroyInjector(android.content.Context) -> b
roboguice.RoboGuice$1 -> jL:
    android.app.Application val$application -> a
    java.lang.Object visit(com.google.inject.spi.StaticInjectionRequest) -> a
roboguice.activity.RoboAccountAuthenticatorActivity -> roboguice.activity.RoboAccountAuthenticatorActivity:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboActivity -> roboguice.activity.RoboActivity:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboActivityGroup -> roboguice.activity.RoboActivityGroup:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboExpandableListActivity -> roboguice.activity.RoboExpandableListActivity:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboFragmentActivity -> roboguice.activity.RoboFragmentActivity:
    roboguice.event.EventManager eventManager -> e
    java.util.HashMap scopedObjects -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboLauncherActivity -> roboguice.activity.RoboLauncherActivity:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboListActivity -> roboguice.activity.RoboListActivity:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.RoboPreferenceActivity -> roboguice.activity.RoboPreferenceActivity:
    roboguice.event.EventManager eventManager -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
roboguice.activity.RoboSplashActivity -> roboguice.activity.RoboSplashActivity:
    int minDisplayMs -> a
    void onCreate(android.os.Bundle) -> onCreate
    void doStuffInBackground$3802a6f6() -> a
    void andFinishThisOne() -> b
    void startNextActivity() -> c
roboguice.activity.RoboSplashActivity$1 -> jM:
    long val$start -> a
    roboguice.activity.RoboSplashActivity this$0 -> b
    void run() -> run
roboguice.activity.RoboTabActivity -> roboguice.activity.RoboTabActivity:
    roboguice.event.EventManager eventManager -> a
    java.util.HashMap scopedObjects -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onContentChanged() -> onContentChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.Map getScopedObjectMap() -> a
roboguice.activity.event.OnActivityResultEvent -> jN:
roboguice.activity.event.OnConfigurationChangedEvent -> jO:
roboguice.activity.event.OnContentChangedEvent -> jP:
roboguice.activity.event.OnCreateEvent -> jQ:
roboguice.activity.event.OnDestroyEvent -> jR:
roboguice.activity.event.OnNewIntentEvent -> jS:
roboguice.activity.event.OnPauseEvent -> jT:
roboguice.activity.event.OnRestartEvent -> jU:
roboguice.activity.event.OnResumeEvent -> jV:
roboguice.activity.event.OnStartEvent -> jW:
roboguice.activity.event.OnStopEvent -> jX:
roboguice.config.DefaultRoboModule -> jY:
    java.lang.Class fragmentManagerClass -> b
    java.lang.Class accountManagerClass -> c
    android.app.Application application -> d
    roboguice.inject.ContextScope contextScope -> e
    roboguice.inject.ResourceListener resourceListener -> f
    roboguice.inject.ViewListener viewListener -> g
    void configure() -> a
roboguice.config.DefaultRoboModule$1 -> jZ:
roboguice.config.DefaultRoboModule$2 -> ka:
roboguice.config.DefaultRoboModule$3 -> kb:
roboguice.config.DefaultRoboModule$4 -> kc:
roboguice.config.DefaultRoboModule$5 -> kd:
roboguice.content.RoboContentProvider -> roboguice.content.RoboContentProvider:
roboguice.event.EventListener -> ke:
    void onEvent(java.lang.Object) -> a
roboguice.event.EventManager -> kf:
    java.util.Map registrations -> a
    void registerObserver(java.lang.Class,roboguice.event.EventListener) -> a
    void fire(java.lang.Object) -> a
    void destroy() -> a
roboguice.event.EventThread -> kg:
    roboguice.event.EventThread CURRENT -> c
    roboguice.event.EventThread UI -> a
    roboguice.event.EventThread BACKGROUND -> b
    roboguice.event.EventThread[] $VALUES -> d
    roboguice.event.EventThread[] values() -> a
roboguice.event.Observes -> kh:
    roboguice.event.EventThread value() -> a
roboguice.event.ObservesTypeListener -> ki:
    com.google.inject.Provider eventManagerProvider -> a
    roboguice.event.eventListener.factory.EventListenerThreadingDecorator observerThreadingDecorator -> b
    void hear(com.google.inject.TypeLiteral,com.google.inject.spi.TypeEncounter) -> a
    void findContextObserver(java.lang.reflect.Method,com.google.inject.spi.TypeEncounter) -> a
roboguice.event.eventListener.AsynchronousEventListenerDecorator -> kj:
    roboguice.event.EventListener eventListener -> a
    void onEvent(java.lang.Object) -> a
roboguice.event.eventListener.EventListenerRunnable -> kk:
    java.lang.Object event -> a
    roboguice.event.EventListener eventListener -> b
    void run() -> run
roboguice.event.eventListener.ObserverMethodListener -> kl:
    java.lang.String descriptor -> a
    java.lang.reflect.Method method -> b
    java.lang.Object instance -> c
    void onEvent(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
roboguice.event.eventListener.RunnableAsyncTaskAdaptor -> km:
    java.lang.Runnable runnable -> c
    java.lang.Object call() -> call
roboguice.event.eventListener.UIThreadEventListenerDecorator -> kn:
    roboguice.event.EventListener eventListener -> a
    android.os.Handler handler -> b
    void onEvent(java.lang.Object) -> a
roboguice.event.eventListener.factory.EventListenerThreadingDecorator -> ko:
    roboguice.event.EventListener decorate(roboguice.event.EventThread,roboguice.event.EventListener) -> a
roboguice.event.eventListener.factory.EventListenerThreadingDecorator$1 -> kp:
    int[] $SwitchMap$roboguice$event$EventThread -> a
roboguice.inject.AccountManagerProvider -> kq:
    java.lang.Object get() -> a
roboguice.inject.AssetManagerProvider -> kr:
    java.lang.Object get() -> a
roboguice.inject.ContentResolverProvider -> ks:
    java.lang.Object get() -> a
roboguice.inject.ContextScope -> kt:
    java.lang.ThreadLocal contextThreadLocal -> a
    java.util.Map applicationScopedObjects -> b
    void enter(android.content.Context) -> a
    void exit(android.content.Context) -> b
    com.google.inject.Provider scope(com.google.inject.Key,com.google.inject.Provider) -> a
    java.util.Stack getContextStack() -> a
    java.util.Map getScopedObjectMap(android.content.Context) -> c
roboguice.inject.ContextScope$1 -> ku:
    com.google.inject.Key val$key -> a
    com.google.inject.Provider val$unscoped -> b
    roboguice.inject.ContextScope this$0 -> c
    java.lang.Object get() -> a
roboguice.inject.ContextScopedSystemServiceProvider -> kv:
    com.google.inject.Provider contextProvider -> a
    java.lang.String serviceName -> b
    java.lang.Object get() -> a
roboguice.inject.ContextSingleton -> kw:
roboguice.inject.ExtraConverter -> kx:
    java.lang.Object convert$7713a341() -> a
roboguice.inject.ExtrasListener -> ky:
    com.google.inject.Provider contextProvider -> a
    void hear(com.google.inject.TypeLiteral,com.google.inject.spi.TypeEncounter) -> a
roboguice.inject.ExtrasListener$ExtrasMembersInjector -> kz:
    java.lang.reflect.Field field -> a
    com.google.inject.Provider contextProvider -> b
    roboguice.inject.InjectExtra annotation -> c
    void injectMembers(java.lang.Object) -> a
roboguice.inject.FragmentManagerProvider -> kA:
    java.lang.Object get() -> a
roboguice.inject.HandlerProvider -> kB:
    java.lang.Object get() -> a
roboguice.inject.InjectExtra -> kC:
    java.lang.String value() -> a
    boolean optional() -> b
roboguice.inject.InjectFragment -> kD:
    int value() -> a
    java.lang.String tag() -> b
roboguice.inject.InjectPreference -> kE:
roboguice.inject.InjectResource -> kF:
    int value() -> a
    java.lang.String name() -> b
roboguice.inject.InjectView -> kG:
    int value() -> a
    java.lang.String tag() -> b
roboguice.inject.PreferenceListener -> kH:
    java.util.ArrayList preferencesForInjection -> a
    com.google.inject.Provider contextProvider -> b
    roboguice.inject.ContextScope scope -> c
    void hear(com.google.inject.TypeLiteral,com.google.inject.spi.TypeEncounter) -> a
    void registerPreferenceForInjection(roboguice.inject.PreferenceListener$PreferenceMembersInjector) -> a
roboguice.inject.PreferenceListener$PreferenceMembersInjector -> kI:
    roboguice.inject.PreferenceListener this$0 -> a
    void injectMembers(java.lang.Object) -> a
roboguice.inject.ResourceListener -> kJ:
    android.app.Application application -> a
    void hear(com.google.inject.TypeLiteral,com.google.inject.spi.TypeEncounter) -> a
    void requestStaticInjection(java.lang.Class[]) -> a
roboguice.inject.ResourceListener$ResourceMembersInjector -> kK:
    java.lang.reflect.Field field -> a
    android.app.Application application -> b
    roboguice.inject.InjectResource annotation -> c
    void injectMembers(java.lang.Object) -> a
roboguice.inject.ResourcesProvider -> kL:
    java.lang.Object get() -> a
roboguice.inject.RoboInjector -> kM:
    com.google.inject.Injector delegate -> a
    android.content.Context context -> b
    roboguice.inject.ContextScope scope -> c
    void injectViewMembers(android.app.Activity) -> a
    void injectMembersWithoutViews(java.lang.Object) -> b
    java.util.Map getBindings() -> a
    java.lang.Object getInstance(com.google.inject.Key) -> a
    java.lang.Object getInstance(java.lang.Class) -> a
    void injectMembers(java.lang.Object) -> a
roboguice.inject.SharedPreferencesProvider -> kN:
    java.lang.Object get() -> a
roboguice.inject.SystemServiceProvider -> kO:
    java.lang.String serviceName -> a
    java.lang.Object get() -> a
roboguice.inject.ViewListener -> kP:
    java.lang.Class fragmentClass -> a
    java.lang.Class fragmentManagerClass -> b
    java.lang.reflect.Method fragmentGetViewMethod -> c
    java.lang.reflect.Method fragmentFindFragmentByIdMethod -> d
    java.lang.reflect.Method fragmentFindFragmentByTagMethod -> e
    void hear(com.google.inject.TypeLiteral,com.google.inject.spi.TypeEncounter) -> a
roboguice.inject.ViewListener$ViewMembersInjector -> kQ:
    java.util.WeakHashMap viewMembersInjectors -> a
    java.lang.reflect.Field field -> b
    java.lang.annotation.Annotation annotation -> c
    java.lang.ref.WeakReference instanceRef -> d
    com.google.inject.Provider fragmentManagerProvider -> e
    com.google.inject.Provider activityProvider -> f
    void injectMembers(java.lang.Object) -> a
    void injectViews(java.lang.Object) -> b
roboguice.receiver.RoboBroadcastReceiver -> roboguice.receiver.RoboBroadcastReceiver:
roboguice.service.RoboIntentService -> roboguice.service.RoboIntentService:
roboguice.service.RoboService -> roboguice.service.RoboService:
roboguice.util.Ln -> kR:
    roboguice.util.Ln$BaseConfig config -> a
    roboguice.util.Ln$Print print -> b
    int e(java.lang.Throwable) -> a
roboguice.util.Ln$BaseConfig -> kS:
    int minimumLogLevel -> a
    java.lang.String scope -> b
roboguice.util.Ln$Print -> kT:
    int println(int,java.lang.String) -> a
roboguice.util.RoboContext -> kU:
    java.util.Map getScopedObjectMap() -> a
roboguice.util.SafeAsyncTask -> kV:
    java.util.concurrent.Executor DEFAULT_EXECUTOR -> c
    android.os.Handler handler -> a
    java.util.concurrent.Executor executor -> d
    java.lang.StackTraceElement[] launchLocation -> b
    java.util.concurrent.FutureTask future -> e
    void execute() -> a
    void onPreExecute() -> b
    void onSuccess$5d527811() -> c
    void onInterrupted(java.lang.Exception) -> a
    void onException(java.lang.Exception) -> b
    void onThrowable(java.lang.Throwable) -> a
    void onFinally() -> d
roboguice.util.SafeAsyncTask$Task -> kW:
    roboguice.util.SafeAsyncTask parent -> a
    android.os.Handler handler -> b
    java.lang.Void call() -> a
    void doFinally() -> b
    void postToUiThreadAndWait(java.util.concurrent.Callable) -> a
    java.lang.Object call() -> call
roboguice.util.SafeAsyncTask$Task$1 -> kX:
    roboguice.util.SafeAsyncTask$Task this$0 -> a
    java.lang.Object call() -> call
roboguice.util.SafeAsyncTask$Task$2 -> kY:
    java.lang.Object val$r -> a
    roboguice.util.SafeAsyncTask$Task this$0 -> b
    java.lang.Object call() -> call
roboguice.util.SafeAsyncTask$Task$3 -> kZ:
    java.lang.Exception val$e -> a
    roboguice.util.SafeAsyncTask$Task this$0 -> b
    java.lang.Object call() -> call
roboguice.util.SafeAsyncTask$Task$4 -> la:
    java.lang.Throwable val$e -> a
    roboguice.util.SafeAsyncTask$Task this$0 -> b
    java.lang.Object call() -> call
roboguice.util.SafeAsyncTask$Task$5 -> lb:
    roboguice.util.SafeAsyncTask$Task this$0 -> a
    java.lang.Object call() -> call
roboguice.util.SafeAsyncTask$Task$6 -> lc:
    java.util.concurrent.Callable val$c -> a
    java.lang.Exception[] val$exceptions -> b
    java.util.concurrent.CountDownLatch val$latch -> c
    void run() -> run
